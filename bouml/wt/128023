format 221
"src" // src
  revision 3
  modified_by 23 "ckranz"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "/home/ckranz/zeugs/wordtris/src/"
  cpp_src_dir "/home/ckranz/zeugs/wordtris/src/"
  classview 128023 "src"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 128023 "dea_char_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 128023 "CHAR"
	public type class_ref 128023 // dea_char_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 128151 "SPECIAL"
	public type class_ref 128023 // dea_char_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 128279 "INVALID"
	public type class_ref 128023 // dea_char_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 128151 "dea_special_types_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " these are reg ex specific chars not dea specific
dea specials group n transitions to a single
"
      attribute 128407 "ANY_SYMBOL"
	public type class_ref 128151 // dea_special_types_t
	init_value " '.'"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 128535 "ANY_WHITESPACE"
	public type class_ref 128151 // dea_special_types_t
	init_value " 'w'"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 128663 "ANY_DIGIT"
	public type class_ref 128151 // dea_special_types_t
	init_value " 'd'
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 128279 "dea_input_symbol_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 128023 "dea_input_symbol_t"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "c" explicit_type "char"
	  param in name "t" type class_ref 128023 // dea_char_type_t
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} :
        symbol( c ),
        type( t )
    {
    };
"
	
	
	
	
      end

      attribute 128791 "symbol"
	public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 128023 // type (<directional composition>)
	relation 128023 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128023 // type (<directional composition>)
	  b parent class_ref 128023 // dea_char_type_t
      end
    end

    class 128407 "TDeaTransition"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
****************************************************************************"
      operation 128151 "TDeaTransition"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "trg" explicit_type "size_t"
	  param in name "input_symbol" type class_ref 128279 // dea_input_symbol_t
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} :
        m_input_symbol( input_symbol ),
        m_next_state( trg )
    {
    };
"
	
	
	
	
      end

      operation 128279 "~TDeaTransition"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 128407 "print"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( CHAR == m_input_symbol.type )
            printf(\"              |--> \\\"%c\\\" ==> %zd\\n\", m_input_symbol.symbol, m_next_state );
        else
            printf(\"              |--> [%c] ==> %zd\\n\", m_input_symbol.symbol, m_next_state );
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 128535 "process_symbol"
	cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "symbol" explicit_type "char"
	  param in name "verbose" explicit_type "byte"
	    defaultvalue "0 "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        bool matching = false;
        if ( 0 != verbose ) 
            printf(\"%c ?= %c \", m_input_symbol.symbol, symbol );

        switch ( m_input_symbol.type )
        {
            case SPECIAL:
                matching = process_special( symbol );
                if ( !matching )
                {
                    if ( 0 != verbose ) 
                        printf(\"\\t FAIL\");
                }
                if ( 0 != verbose ) 
                    printf(\"\\n\");
                break;
            case CHAR:
                if ( symbol == m_input_symbol.symbol )
                {
                    matching = true;
                }
                break;
            default: 
                break;
        }

        return matching;
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 128663 "get_next_state"
	cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_next_state;
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 128791 "process_special"
	cpp_inline private explicit_return_type "bool"
	nparams 1
	  param in name "s" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        bool res = false;

        switch( m_input_symbol.symbol )
        {
            case ANY_SYMBOL:        
                res = true;
                break;
            case ANY_WHITESPACE:
                switch ( s )
                {
                    case _SP:
                    case _TAB:
                    case _LF:
                    case _CR:
                        res = true;
                        break;
                    default: break;
                }
                break;
            case ANY_DIGIT:
                if ( ( s >= '0' ) && ( s <= '9' ) )
                {
                    res = true;
                }
                break;
            default: break;
        }

        return res;
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      classrelation 128151 // m_input_symbol (<directional composition>)
	relation 128151 *-->
	  a role_name "m_input_symbol" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128151 // m_input_symbol (<directional composition>)
	  b parent class_ref 128279 // dea_input_symbol_t
      end

      attribute 128919 "m_next_state"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 128535 "TDeaState"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
****************************************************************************"
      operation 128919 "TDeaState"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "is_accepting" explicit_type "bool"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} :
        m_is_accepting( is_accepting )
    {
    };
"
	
	
	
	
      end

      operation 129047 "~TDeaState"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 129175 "is_accepting"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_is_accepting;
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 129303 "transition_count"
	cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_transitions.size();
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 129431 "print"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "idx" explicit_type "size_t"
	  param in name "is_current" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        printf(\"     |--> [%zd @ %p] is_accepting == %d\", idx, (void*)this, m_is_accepting );
        if ( false != is_current ) printf(\" {*}\\n\");
        else printf(\"\\n\");

        for( size_t t_idx=0; t_idx < m_transitions.size(); t_idx++ )
        {
            m_transitions[t_idx].print();
        }
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 129559 "new_transition"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "trg" explicit_type "size_t"
	  param in name "input_symbol" type class_ref 128279 // dea_input_symbol_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        m_transitions.push_back( TDeaTransition( trg, input_symbol ) );
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 129687 "process_symbol"
	cpp_inline public explicit_return_type "size_t"
	nparams 3
	  param in name "self_idx" explicit_type "size_t"
	  param in name "symbol" explicit_type "char"
	  param in name "verbose" explicit_type "byte"
	    defaultvalue "0 "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        size_t result = self_idx;

        for (size_t t_idx = 0; t_idx < m_transitions.size(); t_idx++ )
        {
            bool found = m_transitions[t_idx].process_symbol( symbol, verbose );
            if ( found )
            {
                result = m_transitions[t_idx].get_next_state();
                break;
            }

            if ( 0 != verbose ) 
                printf(\"\\n\");
        }

        return result;
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      attribute 129047 "m_is_accepting"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 128279 // m_transitions (<directional composition>)
	relation 128279 *-->
	  stereotype "std::vector"
	  a role_name "m_transitions" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 128279 // m_transitions (<directional composition>)
	  b parent class_ref 128407 // TDeaTransition
      end
    end

    class 128663 "TDea"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
****************************************************************************"
      operation 129815 "TDea"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
        m_states.push_back( TDeaState( false ) );
        m_current_state = 0;
    };
"
	
	
	
	
      end

      operation 129943 "TDea"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "state_count" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} {
        m_states.resize( state_count, TDeaState( false ) );
        m_current_state = 0;
    };
"
	
	
	
	
      end

      operation 130071 "TDea"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "contains_word" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} {
        new_contains( contains_word );
        m_current_state = 0;
    };
"
	
	
	
	
      end

      operation 130199 "~TDea"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 130327 "init"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( m_states.size() > 0 )
            m_current_state = 0;
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 130455 "print"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        printf(\"dea %p\\n\", (void*)this);
        printf(\" |--> states => %zd @ %p\\n\", m_states.size(), (void*)&m_states );
        for ( size_t s_idx=0; s_idx < m_states.size() ; s_idx++ )
        {
            m_states[s_idx].print( s_idx, ( s_idx == m_current_state ) );
        }
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 130583 "process_symbol"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "symbol" explicit_type "char"
	  param in name "verbose" explicit_type "byte"
	    defaultvalue "0 "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
       m_current_state = m_states[m_current_state].process_symbol( m_current_state, symbol, verbose );
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 130711 "verify_input"
	cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "input" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        bool result = false;

        size_t input_len = input.length();
        printf(\"input(%zd) = %s\\n\", input_len, input.c_str() );
        for ( size_t input_idx = 0; input_idx < input_len; input_idx++ )
        {
            process_symbol( input[input_idx], 1 );
        }

        result = m_states[m_current_state].is_accepting();

        return result;
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 130839 "is_current_state_accepting"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_states[m_current_state].is_accepting();
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 130967 "new_contains"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "w" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( w.length() > 0 )
        {
            m_states.clear();
            m_states.resize( w.length(), TDeaState( false ) );
            m_states.push_back( TDeaState( true ) );

            m_states[0].new_transition( 1, dea_input_symbol_t( w[0], CHAR ) );

            for (size_t i=1; i<w.length(); i++ )
            {
                m_states[i].new_transition( i+1, dea_input_symbol_t( w[i], CHAR ) );
                m_states[i].new_transition( 1,   dea_input_symbol_t( w[0], CHAR ) );
                m_states[i].new_transition( 0,   dea_input_symbol_t( ANY_SYMBOL, SPECIAL ) );
            }

            init();
        }
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      classrelation 128407 // m_states (<directional composition>)
	relation 128407 *-->
	  stereotype "std::vector"
	  a role_name "m_states" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 128407 // m_states (<directional composition>)
	  b parent class_ref 128535 // TDeaState
      end

      attribute 129175 "m_current_state"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 128791 "WtLetter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 131095 "WtLetter"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        m_col( 5 ),
        m_row( WtBoard::row_count - 1 ),
        m_value( '\\0' )
    {};
"
	
	
	
	
      end

      operation 131223 "~WtLetter"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 131351 "WtLetter"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 128791 // WtLetter
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " no copy allowed"
      end

      operation 131479 "operator ="
	private return_type class_ref 128791 // WtLetter
	nparams 1
	  param in name "" type class_ref 128791 // WtLetter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 131607 "init"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "init_letter" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_col = 5;
        m_row = (WtBoard::row_count - 1);
        m_value = init_letter;
    };
"
	
	
	
	
	comment " api defintion


***********************"
      end

      operation 131735 "get_next"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "next_letter" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_value = next_letter;
        m_col = 5;
        m_row = (WtBoard::row_count - 1);
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 131863 "move_left"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( m_col > 0 )
            m_col --;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 131991 "move_right"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( m_col < ( WtBoard::col_count - 1 ) )
            m_col ++;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 132119 "single_drop"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( m_row > 0 )
            m_row --;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 132247 "drop_at"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "r" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( r < WtBoard::row_count )
            m_row = r;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 132375 "current_column"
	const cpp_inline public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_col; };
"
	
	
	
	
	comment "
***********************"
      end

      operation 132503 "current_row"
	const cpp_inline public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_row; };
"
	
	
	
	
      end

      operation 132631 "current_value"
	const cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_value; };
"
	
	
	
	
      end

      attribute 129303 "m_col"
	private explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 129431 "m_row"
	private explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 129559 "m_value"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 128919 "WtAnimationStep"
      visibility package 
      nformals 1
      formal name "animation_content" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      operation 132759 "WtAnimationStep"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "c" explicit_type "animation_content"
	  param in name "duration" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} :
        content( c ),
        step_duration( duration )
    {};
"
	
	
	
	
      end

      operation 132887 "~WtAnimationStep"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      attribute 129687 "content"
	public explicit_type "animation_content"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 129815 "step_duration"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 129047 "WtGridAnimation"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      class 129175 "GridText"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 133015 "GridText"
	  cpp_inline public explicit_return_type ""
	  nparams 5
	    param in name "r" explicit_type "uint8_t"
	    param in name "c" explicit_type "uint8_t"
	    param in name "horiz" explicit_type "bool"
	    param in name "t" explicit_type "std::string"
	    param in name "f" explicit_type "std::string"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${volatile}${throw}${abstract} :
            text( t ),
            font( f ),
            row ( r ),
            col ( c ),
            horizontal( horiz )
            {};
"
	  
	  
	  
	  
	end

	attribute 129943 "text"
	  public explicit_type "std::string"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 130071 "font"
	  public explicit_type "std::string"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 130199 "row"
	  public explicit_type "uint8_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 130327 "col"
	  public explicit_type "uint8_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 130455 "horizontal"
	  public explicit_type "bool"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 129303 "GridAnimationStep"
	visibility package stereotype "typedef" base_type class_ref 129175 // GridText
	cpp_decl "${comment}typedef WtAnimationStep<${type}> ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 128535 // <dependency>
	  relation 128535 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 128535 // <dependency>
	    b parent class_ref 129175 // GridText
	end
      end

      operation 133143 "no_animation"
	class_operation cpp_inline public return_type class_ref 129047 // WtGridAnimation
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static const WtGridAnimation empty;
        return empty;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 133271 "WtGridAnimation"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
     };
"
	
	
	
	
      end

      operation 133399 "~WtGridAnimation"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 133527 "push_back"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "step" type class_ref 129303 // GridAnimationStep
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_animation_steps.push_back( step );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 133655 "operator []"
	const cpp_inline public return_type class_ref 129303 // GridAnimationStep
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return m_animation_steps[idx];
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 133783 "empty"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_animation_steps.empty();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 133911 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_animation_steps.size();
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 128663 // m_animation_steps (<directional composition>)
	relation 128663 *-->
	  stereotype "std::vector"
	  a role_name "m_animation_steps" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 128663 // m_animation_steps (<directional composition>)
	  b parent class_ref 129303 // GridAnimationStep
      end
    end

    class 129431 "WtDrawingPolicyIf"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 134039 "clr"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 134167 "set_theme"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 134295 "get_font_size"
	abstract cpp_virtual public return_type class_ref 129559 // WtDim
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 134423 "draw_board"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "board" type class_ref 129687 // WtBoard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 134551 "draw_active_letter"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "active" type class_ref 128791 // WtLetter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 134679 "set_bg"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "bg_img" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 134807 "draw_text"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "pos" type class_ref 129815 // WtCoord
	  param in name "text" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 134935 "draw_image"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 3
	  param in name "pos" type class_ref 129815 // WtCoord
	  param in name "size" type class_ref 129559 // WtDim
	  param in name "image" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, const ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 135063 "update"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end
    end

    class 129559 "WtDim"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      operation 176279 "WtDim"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        w(0),
        h(0) {};
"
	
	
	
	
      end

      operation 176407 "WtDim"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "iW" explicit_type "ssize_t"
	  param in name "iH" explicit_type "ssize_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} :
        w(iW),
        h(iH) {};
"
	
	
	
	
      end

      attribute 139543 "w"
	public explicit_type "ssize_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 139671 "h"
	public explicit_type "ssize_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 129687 "WtBoard"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 130583 "row_count"
	class_attribute const_attribute public explicit_type "uint8_t"
	init_value "=  ROW_COUNT"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 130711 "col_count"
	class_attribute const_attribute public explicit_type "uint8_t"
	init_value "=  COL_COUNT"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 130199 "RowSequence"
	visibility package stereotype "typedef" explicit_base_type "char"
	cpp_decl "${comment}typedef ${type} ${name}[WtBoard::col_count];
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 135447 "WtBoard"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {

    };
"
	
	
	
	
      end

      operation 135575 "~WtBoard"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 135703 "WtBoard"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 129687 // WtBoard
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 135831 "operator ="
	private return_type class_ref 129687 // WtBoard
	nparams 1
	  param in name "" type class_ref 129687 // WtBoard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      attribute 130839 "empty_cell"
	class_attribute const_attribute public explicit_type "char"
	init_value "=  '\\0'"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " api defintion
"
      end

      operation 135959 "init"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        for( uint8_t r = 0; r<ROW_COUNT; r++ )
            for( uint8_t c = 0; c<COL_COUNT; c++ )
                set_cell( r, c, empty_cell );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 136087 "cell_occupied"
	cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "r" explicit_type "uint8_t"
	  param in name "c" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return ( get_cell( r, c ) != empty_cell );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 136215 "set_cell"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "r" explicit_type "uint8_t"
	  param in name "c" explicit_type "uint8_t"
	  param in name "val" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        m_board[r][c] = val;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 136343 "get_cell"
	const cpp_inline public explicit_return_type "char"
	nparams 2
	  param in name "r" explicit_type "uint8_t"
	  param in name "c" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        if ( ( r >= ROW_COUNT ) || ( c >= COL_COUNT ) )
            return ' ';

        return m_board[r][c];
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 136471 "get_row_sequence"
	const cpp_inline public return_type class_ref 130199 // RowSequence
	nparams 1
	  param in name "r" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( r >= ROW_COUNT )
            return m_board[0];

        return m_board[r];
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 136599 "get_row_string"
	const cpp_inline public explicit_return_type "std::string"
	nparams 1
	  param in name "r" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( r >= ROW_COUNT )
            return \"\";

        std::string row(\"\");

        for( uint8_t c_idx = 0; c_idx < WtBoard::col_count; c_idx++ )
        {
            row.push_back( ( m_board[r][c_idx] == WtBoard::empty_cell ? 
                                    ' ' :
                                    m_board[r][c_idx] ) );
        }

        return row;

//        return std::string( get_row_sequence( r ) );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 136727 "get_col_string"
	const cpp_inline public explicit_return_type "std::string"
	nparams 1
	  param in name "c" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( c >= COL_COUNT )
            return \"\";

        std::string col(\"\");

        for( uint8_t r_idx = 0; r_idx < WtBoard::row_count; r_idx++ )
        {
            //col.push_back( m_board[r_idx][c] );
            col.insert( col.begin(), ( m_board[r_idx][c] == WtBoard::empty_cell ? 
                                            ' ' : m_board[r_idx][c] ) );
        }

        return col;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 136855 "collapse_above"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "r" explicit_type "uint8_t"
	  param in name "c" explicit_type "uint8_t"
	  param in name "carry" explicit_type "char"
	    defaultvalue "WtBoard::empty_cell "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        /* drop remaining stones afterwards */
        for( uint8_t row=r; row < WtBoard::row_count-1; row++ )
        {
            set_cell( row, c,
                      get_cell( row+1, c ) );
        }
        set_cell( WtBoard::row_count-1, c, carry );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 136983 "collapse_below"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "r" explicit_type "uint8_t"
	  param in name "c" explicit_type "uint8_t"
	  param in name "carry" explicit_type "char"
	    defaultvalue "WtBoard::empty_cell "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        /* drop remaining stones afterwards */
        for( uint8_t row=r; row > 0; row-- )
        {
            set_cell( row, c,
                      get_cell( row-1, c ) );
        }
        set_cell( 0, c, carry );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 137111 "collapse_above"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "r" explicit_type "uint8_t"
	  param in name "carry" explicit_type "char"
	    defaultvalue "WtBoard::empty_cell "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        /* drop remaining stones afterwards */
        for( uint8_t row=r; row < WtBoard::row_count-1; row++ )
        {
            for( uint8_t c=0; c < WtBoard::col_count; c++ )
            {
                set_cell( row, c,
                          get_cell( row+1, c ) );
            }
        }
        for( uint8_t c=0; c < WtBoard::col_count; c++ )
        {
           set_cell( WtBoard::row_count-1, c, carry );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 130967 "m_board"
	private explicit_type "char"
	multiplicity "[ROW_COUNT][COL_COUNT]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 129815 "WtCoord"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      operation 176535 "WtCoord"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        x(0),
        y(0) {};
"
	
	
	
	
      end

      operation 176663 "WtCoord"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "iX" explicit_type "ssize_t"
	  param in name "iY" explicit_type "ssize_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} :
        x(iX),
        y(iY) {};
"
	
	
	
	
      end

      operation 176791 "WtCoord"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "c" type class_ref 129815 // WtCoord
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract} :
        x(c.x),
        y(c.y) {};
"
	
	
	
	
      end

      operation 176919 "operator ="
	cpp_inline public return_type class_ref 129815 // WtCoord
	nparams 1
	  param in name "c" type class_ref 129815 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        x = c.x;
        y = c.y;
        return (*this);
    };
"
	
	
	
	
      end

      operation 177047 "operator =="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 129815 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return ( x == rhs.x ) && ( y == rhs.y );
    };
"
	
	
	
	
      end

      operation 177175 "operator +"
	cpp_inline public return_type class_ref 129815 // WtCoord
	nparams 1
	  param in name "rhs" type class_ref 129815 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        x = x + rhs.x;
        y = y + rhs.y;
        return (*this);
    };
"
	
	
	
	
      end

      operation 177303 "in_region"
	cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "start_pos" type class_ref 129815 // WtCoord
	  param in name "size" type class_ref 129559 // WtDim
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return (  ( x >= start_pos.x ) && ( x < start_pos.x+size.w )
               && ( y >= start_pos.y ) && ( y < start_pos.y+size.h ) );
    };
"
	
	
	
	
      end

      operation 177431 "moveX"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "dim" type class_ref 129559 // WtDim
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        x = x + dim.w;
    };
"
	
	
	
	
      end

      attribute 139799 "x"
	public explicit_type "ssize_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 139927 "y"
	public explicit_type "ssize_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 129943 "WtInputPolicyIf"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 135191 "read_input"
	abstract cpp_virtual public return_type class_ref 130071 // WtInputEvent
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 135319 "get_key_map"
	abstract cpp_virtual public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end
    end

    class 130071 "WtInputEvent"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      operation 177559 "WtInputEvent"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        is_key_event( true ),
        is_motion_event( false ),
        key( wt_control_INVALID ),
        pos()
    {};
"
	
	
	
	
      end

      attribute 140055 "is_key_event"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 140183 "is_motion_event"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 140311 "is_drag_event"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 136983 // key (<directional composition>)
	relation 136983 *-->
	  a role_name "key" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 136983 // key (<directional composition>)
	  b parent class_ref 135959 // wt_control
      end

      classrelation 137111 // pos (<directional composition>)
	relation 137111 *-->
	  a role_name "pos" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 137111 // pos (<directional composition>)
	  b parent class_ref 129815 // WtCoord
      end

      classrelation 137239 // d_pos (<directional composition>)
	relation 137239 *-->
	  a role_name "d_pos" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 137239 // d_pos (<directional composition>)
	  b parent class_ref 129815 // WtCoord
      end
    end

    class 130327 "WtButton"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 137239 "WtButton"
	cpp_inline public explicit_return_type ""
	nparams 5
	  param in name "id" explicit_type "uint16_t"
	  param in name "pos" type class_ref 129815 // WtCoord
	  param in name "size" type class_ref 129559 // WtDim
	  param in name "button_image" explicit_type "std::string"
	  param in name "label" explicit_type "std::string"
	    defaultvalue "\"\" "
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${volatile}${throw}${abstract} :
        m_id( id ),
        m_pos( pos ),
        m_size( size ),
        m_img( button_image ),
        m_label( label )
    {
    };
"
	
	
	
	
      end

      operation 137367 "~WtButton"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 137495 "id"
	const cpp_inline public explicit_return_type "uint16_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_id;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 137623 "set_id"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "uint16_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_id = id;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 137751 "label"
	cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n::translate(m_label);
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 137879 "image"
	cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_img;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 138007 "set_image"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "img" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_img = img;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 138135 "width"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_size.w;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 138263 "height"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_size.h;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 138391 "size"
	const cpp_inline public return_type class_ref 129559 // WtDim
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_size;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 138519 "position"
	const cpp_inline public return_type class_ref 129815 // WtCoord
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_pos;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 138647 "set_position"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "new_pos" type class_ref 129815 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_pos = new_pos;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 138775 "x"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_pos.x;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 138903 "set_x"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "ssize_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_pos.x = x;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 139031 "y"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_pos.y;
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 131095 "m_id"
	private explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 128791 // m_pos (<directional composition>)
	relation 128791 *-->
	  a role_name "m_pos" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128791 // m_pos (<directional composition>)
	  b parent class_ref 129815 // WtCoord
      end

      classrelation 128919 // m_size (<directional composition>)
	relation 128919 *-->
	  a role_name "m_size" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 128919 // m_size (<directional composition>)
	  b parent class_ref 129559 // WtDim
      end

      attribute 131223 "m_img"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 131351 "m_label"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 130455 "WtDrawing"
      visibility package 
      nformals 1
      formal name "DrawingPolicy" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 129047 // <generalisation>
	relation 129047 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 129047 // <generalisation>
	  b parent class_ref 130583 // typedef1
      end

      operation 139159 "instance"
	class_operation cpp_inline public return_type class_ref 130455 // WtDrawing
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static WtDrawing _instance;
        return _instance;
    };
"
	
	
	
	
	comment " singleton definition"
      end

      operation 139287 "~WtDrawing"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 139415 "WtDrawing"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        DrawingPolicy()
    {
    };
"
	
	
	
	
      end

      operation 139543 "WtDrawing"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 130455 // WtDrawing
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 139671 "operator ="
	private return_type class_ref 130455 // WtDrawing
	nparams 1
	  param in name "" type class_ref 130455 // WtDrawing
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 139799 "init"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
	comment " api defintion


***********************"
      end

      operation 139927 "draw_player_stat"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "player" type class_ref 130711 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::string player_stat = \"Score: \";
        player_stat.append( std::to_string( player.get_points() ) );

        DrawingPolicy::draw_image( WtCoord( 79, 32 ),
                                   WtDim( 256, 65 ),
                                   \"label_bg.bmp\" );
        DrawingPolicy::draw_text( WtCoord( 90, 50 ),
                                  player_stat );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 140055 "draw_hint"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "hint" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        const size_t line_length = 30;
        size_t line_count = (hint.length() / line_length) + ( hint.length() % line_length > 0 ? 1 : 0 );
        for(size_t l_idx = 0; l_idx < line_count; l_idx++ )
        {
            std::string line = hint.substr( l_idx*line_length, line_length );
            DrawingPolicy::draw_text( WtCoord( 79, 890+(l_idx * DrawingPolicy::get_font_size().h *2) ),
                                      line );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 140183 "draw_help_box"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "help" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        const size_t line_length = 30;
        size_t line_count = (help.length() / line_length) + ( help.length() % line_length > 0 ? 1 : 0 );
        for(size_t l_idx = 0; l_idx < line_count; l_idx++ )
        {
            std::string line = help.substr( l_idx*line_length, line_length );
            DrawingPolicy::draw_text( WtCoord( (ACTIVE_WINDOW_WIDTH / 2)-((line.length()*DrawingPolicy::get_font_size().w)/2), 
                                               (ACTIVE_WINDOW_HEIGHT / 4)+(l_idx * DrawingPolicy::get_font_size().h *2) ),
                                      line );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 140311 "draw_message"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "msg" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        //todo replace with proper message box
        WtDim sz( 328, 69 );
        WtCoord pos( (ACTIVE_WINDOW_WIDTH - 328) / 2,
                     (ACTIVE_WINDOW_HEIGHT / 2) - (69 / 2) );
        DrawingPolicy::draw_image( pos,
                                   sz,
                                   \"menu_btn.bmp\" );
        WtDim font_sz = DrawingPolicy::get_font_size();

        size_t text_center_w = ( msg.length() / 2 ) * font_sz.w;
        size_t button_center_x = ( sz.w / 2 + pos.x );
        size_t button_center_y = ( sz.h / 2 + pos.y );

        DrawingPolicy::draw_text( WtCoord( button_center_x - text_center_w, 
                                           button_center_y - font_sz.h ),
                                  msg );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 140439 "draw_button"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "button" type class_ref 130327 // WtButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        DrawingPolicy::draw_image( WtCoord( button.x(), button.y() ),
                                   WtDim( button.width(), button.height() ),
                                   button.image() );

        if ( ! button.label().empty() )
        {
            WtDim font_sz = DrawingPolicy::get_font_size();

            size_t text_center_w = ( button.label().length() / 2 ) * font_sz.w;
            size_t button_center_x = ( button.width() / 2 + button.x() );
            size_t button_center_y = ( button.height() / 2 + button.y() );

            DrawingPolicy::draw_text( WtCoord( button_center_x - text_center_w,
                                               button_center_y - font_sz.h ),
                                      button.label() );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end
    end

    class 130583 "typedef1"
      visibility package stereotype "typedef" explicit_base_type "DrawingPolicy"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 130711 "WtPlayer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 166679 "WtPlayer"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        m_points( 0 ),
        m_words( 0 ),
        m_level( 1 )
    {};
"
	
	
	
	
      end

      operation 166807 "~WtPlayer"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 166935 "WtPlayer"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 130711 // WtPlayer
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " no copy allowed"
      end

      operation 167063 "operator ="
	private return_type class_ref 130711 // WtPlayer
	nparams 1
	  param in name "" type class_ref 130711 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 167191 "word_solved"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "length" explicit_type "size_t"
	    defaultvalue "1 "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_words ++;
        m_points += length * (m_level * PTS_P_WORD);
        m_level = 1 + (uint8_t)((m_words - 1) / 10);       
    };
"
	
	
	
	
	comment " api defintion


***********************"
      end

      operation 167319 "row_cleared"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "new_points" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_words ++;
        m_points += new_points * m_level;
        m_level = 1 + (uint8_t)((m_words - 1) / 10);       
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 167447 "letter_dropped"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "row_diff" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_points += ( 21 + (3 * m_level) - row_diff );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 167575 "reset"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        m_points = 0;
        m_words = 0;
        m_level = 1;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 167703 "set_level_offset"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "level" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_level = level;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 167831 "get_points"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_points; };
"
	
	
	
	
	comment "
***********************"
      end

      operation 167959 "get_solved_word_count"
	const cpp_inline public explicit_return_type "uint16_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_words;  };
"
	
	
	
	
      end

      operation 168087 "get_current_level"
	const cpp_inline public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_level;  };
"
	
	
	
	
      end

      attribute 135447 "m_points"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 135575 "m_words"
	private explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 135703 "m_level"
	private explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 130839 "WtGameCtr"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 129175 // <generalisation>
	relation 129175 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 129175 // <generalisation>
	  b parent class_ref 130967 // WtInputObserver
      end

      classrelation 129303 // <generalisation>
	relation 129303 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 129303 // <generalisation>
	  b parent class_ref 131095 // WtSettingsChangeObserver
      end

      attribute 131479 "background_image"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  \"bg.bmp\""
	cpp_constexpr cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 140567 "instance"
	class_operation cpp_inline public return_type class_ref 130839 // WtGameCtr
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static WtGameCtr _instance;
        return _instance;
    };
"
	
	
	
	
	comment " singleton definition"
      end

      operation 140695 "~WtGameCtr"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 140823 "WtGameCtr"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        m_player(),
        m_active(),
        m_board(),
        m_active_mode( GAME_MODE_CTR.default_mode() ),
        m_game_over( false ),
        m_shall_quit( false ),
        m_shall_restart( false ),
        m_pause( false ),
        m_pause_menu( NULL ),
        m_left_btn( 0xF1, 
                    WtCoord(0,100),
                    WtDim( ACTIVE_WINDOW_WIDTH / 2, ACTIVE_WINDOW_HEIGHT/2+ACTIVE_WINDOW_HEIGHT/4 ), \"\"), 
        m_right_btn( 0xF2, 
                     WtCoord(ACTIVE_WINDOW_WIDTH / 2, 100),
                     WtDim( ACTIVE_WINDOW_WIDTH / 2, ACTIVE_WINDOW_HEIGHT/2+ACTIVE_WINDOW_HEIGHT/4 ), \"\"),
        m_drop_btn( 0xF3, 
                    WtCoord( 0, ACTIVE_WINDOW_HEIGHT/2+ACTIVE_WINDOW_HEIGHT/4 ),
                    WtDim( ACTIVE_WINDOW_WIDTH, ACTIVE_WINDOW_HEIGHT-(ACTIVE_WINDOW_HEIGHT/2+ACTIVE_WINDOW_HEIGHT/4)  ), \"\"),
        m_pause_btn( 0xF4, 
                     WtCoord( 393, 32 ),
                     WtDim( 64, 64 ), \"pause_btn.bmp\" )
    {
        WtSettings settings = STORAGE.get_settings();
        set_mode( GAME_MODE_CTR.mode_from_string( settings.game_mode ) );
        WtL10n::set_language( settings.language );
        if ( INVALID_GAME_MODE != m_active_mode )
           m_active_mode->set_difficulty( settings.difficulty );

        ACTIVE_WINDOW.init();
        ACTIVE_WINDOW.set_theme( settings.active_theme );
    };
"
	
	
	
	
      end

      operation 140951 "WtGameCtr"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 130839 // WtGameCtr
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 141079 "operator ="
	private return_type class_ref 130839 // WtGameCtr
	nparams 1
	  param in name "" type class_ref 130839 // WtGameCtr
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 141207 "draw"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ACTIVE_WINDOW.draw_board( m_board );
        ACTIVE_WINDOW.draw_player_stat( m_player );
        ACTIVE_WINDOW.draw_active_letter( m_active );
        ACTIVE_WINDOW.draw_hint( m_active_mode->get_hint() );
        ACTIVE_WINDOW.draw_button( m_pause_btn );
    };
"
	
	
	
	
	comment " api defintion


***********************"
      end

      operation 141335 "update_window"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        /*
         * redraw board 
         */

        ACTIVE_WINDOW.clr();
        draw();
        ACTIVE_WINDOW.update();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 141463 "play_animation"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "animation" type class_ref 129047 // WtGridAnimation
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        for ( size_t a_idx = 0; a_idx < animation.size(); a_idx++ )
        {
            ACTIVE_WINDOW.clr();
            draw();

            ACTIVE_WINDOW.draw_at_grid( animation[a_idx].content.row,
                                        animation[a_idx].content.col,
                                        animation[a_idx].content.horizontal,
                                        animation[a_idx].content.text,
                                        animation[a_idx].content.font );

            ACTIVE_WINDOW.update();

            usleep( animation[a_idx].step_duration );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 141591 "update_game"
	cpp_inline private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        bool game_over = false;
        if ( m_active_mode->stone_blocked( m_board,
                                           m_active.current_row() - 1,
                                           m_active.current_column() ) )
        {
            /* commit ACTIVE to board */
            m_active_mode->insert_stone_at( m_board, 
                                            m_active.current_row(), 
                                            m_active.current_column(), 
                                            m_active.current_value() );

            WtGameModeState eval_result = m_active_mode->eval_board( m_board,
                                                                     m_player );

            if ( !eval_result.animation.empty() )
            {
                play_animation( eval_result.animation );
            }

            if ( !eval_result.game_over )
            {
                /* generate next stone */
                m_active.get_next( m_active_mode->next_letter() );

                game_over = m_active_mode->stone_blocked( m_board,
                                                          m_active.current_row(),
                                                          m_active.current_column() );
            }
            else
            {
                game_over = true;
            }
        }
        else
        {
            m_active.single_drop();
        }
        return game_over;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 141719 "notify_drop"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        uint8_t new_row = m_active.current_row() - 1;
        while ( ! m_active_mode->stone_blocked( m_board,
                                                new_row,
                                                m_active.current_column() ) )
        {
            new_row --;
        }
        new_row++;

        m_player.letter_dropped( m_active.current_row() - new_row );
        m_active.drop_at( new_row );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 141847 "notify_left"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( ! m_active_mode->stone_blocked( m_board,
                                             m_active.current_row(),
                                             m_active.current_column() - 1 ) )
        {
            m_active.move_left();
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 141975 "notify_right"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( ! m_active_mode->stone_blocked( m_board,
                                             m_active.current_row(),
                                             m_active.current_column() + 1 ) )
        {
            m_active.move_right(); 
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 142103 "notify_pause"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        m_pause = !m_pause;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 142231 "notify_button_pressed"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "uint16_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        switch( id )
        {
            case 0xF1: notify_left(); break;
            case 0xF2: notify_right(); break;
            case 0xF3: notify_drop(); break;
            case 0xF4: notify_pause(); break;
            default: break;
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 142359 "set_buttons"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ACTIVE_INPUT.add_button( m_left_btn );
        ACTIVE_INPUT.add_button( m_right_btn );
        ACTIVE_INPUT.add_button( m_drop_btn );
        ACTIVE_INPUT.add_button( m_pause_btn );

        ACTIVE_INPUT.listen( this );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 142487 "unset_buttons"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ACTIVE_INPUT.ignore( this );

        ACTIVE_INPUT.remove_button( m_left_btn );
        ACTIVE_INPUT.remove_button( m_right_btn );
        ACTIVE_INPUT.remove_button( m_drop_btn );
        ACTIVE_INPUT.remove_button( m_pause_btn );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 142615 "notify_language_changed"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "lang_code" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::cout << \"new lanuage selected = \"<< lang_code << std::endl;

        WtSettings settings = STORAGE.get_settings();
        settings.language = lang_code;
        STORAGE.store_settings( settings );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 142743 "notify_game_mode_changed"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "mode" type class_ref 131223 // WtGameModeIf
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( NULL != mode )
        {
            set_mode( mode );

            WtSettings settings = STORAGE.get_settings();
            settings.game_mode = mode->get_id_string();
            STORAGE.store_settings( settings );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 142871 "notify_difficulty_changed"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "diffi" type class_ref 131351 // wt_difficulty
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( INVALID_GAME_MODE != m_active_mode )
        {
            std::cout << \"new diff selected = \"<< diffi << std::endl;
            m_active_mode->set_difficulty( diffi );

            WtSettings settings = STORAGE.get_settings();
            settings.difficulty = diffi;
            STORAGE.store_settings( settings );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 142999 "notify_theme_changed"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ACTIVE_WINDOW.set_theme( name );

        std::cout << \"new theme selected = \"<< name << std::endl;
        WtSettings settings = STORAGE.get_settings();
        settings.active_theme = name;
        STORAGE.store_settings( settings );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 143127 "update_highscores"
	cpp_inline private return_type class_ref 131479 // WtHighscores
	nparams 3
	  param inout name "player" type class_ref 130711 // WtPlayer
	  param inout name "mode" type class_ref 131223 // WtGameModeIf
	  param inout name "scores" type class_ref 131479 // WtHighscores
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        // eval if player stat is within first 3 of game mode
        // if true add player at correct position

        return scores;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 143255 "set_mode"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "mode" type class_ref 131223 // WtGameModeIf
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( ( INVALID_GAME_MODE != mode ) && ( INVALID_GAME_MODE != m_active_mode ) )
        {
            mode->set_difficulty( m_active_mode->get_difficulty() );
        }
        m_active_mode = mode;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 143383 "set_pause_menu"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "menu" type class_ref 131607 // WtMenuIf
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_pause_menu = menu;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 143511 "quit"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        m_shall_quit = true;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 143639 "restart"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        m_shall_quit = true;
        m_shall_restart = true;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 143767 "run"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ACTIVE_WINDOW.set_bg( WtGameCtr::background_image );
        set_buttons();

        do
        {
            m_shall_restart = false;
            m_game_over = false;
            m_shall_quit = false;

            m_player.reset();
            m_board.init();

            if ( INVALID_GAME_MODE == m_active_mode )
            {
                std::cout << \"invalid game mode\\n\";
                m_game_over = true;
            }
            else
            {
                m_active_mode->init_game( m_board, m_player );
                m_active.init( m_active_mode->next_letter() );
            }

            uint8_t countdown = 48 - (m_player.get_current_level()*4);
            while ( !m_game_over && !m_shall_quit )
            {
                ACTIVE_INPUT.read();

                if ( !m_pause )
                {
                    if ( countdown == 0 )
                    {
                        m_game_over = update_game();

                        countdown = 48 - (m_player.get_current_level()*4);
                    }         

                    update_window();
                    countdown--;
                }
                else
                {
                    if ( NULL != m_pause_menu )
                    {
                        m_pause = false;
                        unset_buttons();
                        m_pause_menu->show();
                        ACTIVE_WINDOW.set_bg( WtGameCtr::background_image );
                        set_buttons();
                    }
                }

                usleep(12500);
            }
        }
        while ( m_shall_restart );

        STORAGE.store_highscores( update_highscores( m_player, m_active_mode, STORAGE.get_scores() ) );

        if ( m_game_over )
        {
            ACTIVE_WINDOW.set_bg( \"bg_menu_pause.bmp\" );
            ACTIVE_WINDOW.clr();
            ACTIVE_WINDOW.draw_player_stat( m_player );
//            ACTIVE_WINDOW.draw_board( m_board );
//            ACTIVE_WINDOW.draw_active_letter( m_active );
//            ACTIVE_WINDOW.draw_hint( m_active_mode->get_hint() );
 //           ACTIVE_WINDOW.draw_button( m_pause_btn );

            ACTIVE_WINDOW.draw_message(WtL10n::tr(\"you lost! :P\"));
            ACTIVE_WINDOW.update();
            sleep(5);
        }
        unset_buttons();
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 129431 // m_player (<directional composition>)
	relation 129431 *-->
	  a role_name "m_player" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 129431 // m_player (<directional composition>)
	  b parent class_ref 130711 // WtPlayer
      end

      classrelation 129559 // m_active (<directional composition>)
	relation 129559 *-->
	  a role_name "m_active" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 129559 // m_active (<directional composition>)
	  b parent class_ref 128791 // WtLetter
      end

      classrelation 129687 // m_board (<directional composition>)
	relation 129687 *-->
	  a role_name "m_board" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 129687 // m_board (<directional composition>)
	  b parent class_ref 129687 // WtBoard
      end

      classrelation 129815 // m_active_mode (<unidirectional association>)
	relation 129815 --->
	  a role_name "m_active_mode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 129815 // m_active_mode (<unidirectional association>)
	  b parent class_ref 131223 // WtGameModeIf
      end

      attribute 131607 "m_game_over"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 131735 "m_shall_quit"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 131863 "m_shall_restart"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 131991 "m_pause"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 129943 // m_pause_menu (<unidirectional association>)
	relation 129943 --->
	  a role_name "m_pause_menu" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 129943 // m_pause_menu (<unidirectional association>)
	  b parent class_ref 131607 // WtMenuIf
      end

      classrelation 130071 // m_left_btn (<directional composition>)
	relation 130071 *-->
	  a role_name "m_left_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130071 // m_left_btn (<directional composition>)
	  b parent class_ref 130327 // WtButton
      end

      classrelation 130199 // m_right_btn (<directional composition>)
	relation 130199 *-->
	  a role_name "m_right_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130199 // m_right_btn (<directional composition>)
	  b parent class_ref 130327 // WtButton
      end

      classrelation 130327 // m_drop_btn (<directional composition>)
	relation 130327 *-->
	  a role_name "m_drop_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130327 // m_drop_btn (<directional composition>)
	  b parent class_ref 130327 // WtButton
      end

      classrelation 130455 // m_pause_btn (<directional composition>)
	relation 130455 *-->
	  a role_name "m_pause_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130455 // m_pause_btn (<directional composition>)
	  b parent class_ref 130327 // WtButton
      end
    end

    class 130967 "WtInputObserver"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "base class for each input observer
************************************"
      operation 154135 "notify_drop"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 154263 "notify_left"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 154391 "notify_right"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 154519 "notify_pause"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 154647 "notify_quit"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { exit(0); };
"
	
	
	
	
      end

      operation 154775 "notify_button_pressed"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "uint16_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 154903 "notify_motion"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "" type class_ref 129815 // WtCoord
	  param in name "" type class_ref 129815 // WtCoord
	  param in name "" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end
    end

    class 131095 "WtSettingsChangeObserver"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 173847 "notify_language_changed"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "lang_code" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 173975 "notify_difficulty_changed"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "diffi" type class_ref 131351 // wt_difficulty
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 174103 "notify_game_mode_changed"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "mode" type class_ref 131223 // WtGameModeIf
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 174231 "notify_theme_changed"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end
    end

    class 131223 "WtGameModeIf"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      operation 148247 "WtGameModeIf"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "id_string" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} :
        m_current_diff( wt_difficulty_EASY ),
        m_id_string( id_string )
        {};
"
	
	
	
	
      end

      operation 148375 "get_available_difficulties"
	class_operation cpp_inline public explicit_return_type "std::vector<std::pair<wt_difficulty, std::string> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        std::vector<std::pair<wt_difficulty, std::string> > result =
                         { std::make_pair( wt_difficulty_EASY,   WtL10n::tr(\"easy\") ), 
                           std::make_pair( wt_difficulty_MEDIUM, WtL10n::tr(\"normal\") ),
                           std::make_pair( wt_difficulty_HARD,   WtL10n::tr(\"hard\") ) };
        return result;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 148503 "get_id_string"
	cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        //shall not be translated
        return m_id_string;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 148631 "init_game"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "" type class_ref 129687 // WtBoard
	  param inout name "" type class_ref 130711 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
	comment "
***********************"
      end

      operation 148759 "get_title"
	abstract cpp_virtual public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "
***********************"
      end

      operation 148887 "eval_board"
	abstract cpp_virtual public return_type class_ref 131863 // WtGameModeState
	nparams 2
	  param inout name "board" type class_ref 129687 // WtBoard
	  param inout name "player" type class_ref 130711 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "
***********************"
      end

      operation 149015 "next_letter"
	abstract cpp_virtual public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "
***********************"
      end

      operation 149143 "get_hint"
	abstract cpp_virtual public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "
***********************"
      end

      operation 149271 "get_help"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n::tr(\"no help provided\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 149399 "set_difficulty"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "new_difficulty" type class_ref 131351 // wt_difficulty
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_current_diff = new_difficulty;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 149527 "get_difficulty"
	cpp_virtual cpp_inline public return_type class_ref 131351 // wt_difficulty
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_current_diff;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 149655 "stone_blocked"
	cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 3
	  param inout name "board" type class_ref 129687 // WtBoard
	  param in name "row" explicit_type "uint8_t"
	  param in name "col" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return board.cell_occupied( row, col );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 149783 "insert_stone_at"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "board" type class_ref 129687 // WtBoard
	  param in name "row" explicit_type "uint8_t"
	  param in name "col" explicit_type "uint8_t"
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        board.set_cell( row, col, value );
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 132119 // m_current_diff (<directional composition>)
	relation 132119 *-->
	  a role_name "m_current_diff" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 132119 // m_current_diff (<directional composition>)
	  b parent class_ref 131351 // wt_difficulty
      end

      attribute 132887 "m_id_string"
	const_attribute private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 131351 "wt_difficulty"
      visibility package stereotype "typedef" base_type class_ref 135703 // wt_mode_difficulty_tag
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 131479 "WtHighscores"
      visibility package stereotype "typedef" base_type class_ref 136087 // WtScoreEntry
      cpp_decl "${comment}typedef std::vector<${type}> ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 137495 // <dependency>
	relation 137495 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 137495 // <dependency>
	  b parent class_ref 136087 // WtScoreEntry
      end
    end

    class 131607 "WtMenuIf"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 134551 // <generalisation>
	relation 134551 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 134551 // <generalisation>
	  b parent class_ref 130967 // WtInputObserver
      end

      attribute 134295 "m_tri_state_frame"
	const_attribute private explicit_type "std::string"
	init_value "=  \"tri_state_btn.bmp\""
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 134423 "m_tri_state_selected_img"
	const_attribute private explicit_type "std::string"
	multiplicity "[3]"
	init_value "=  { \"tri_state_btn_select0.bmp\", \"tri_state_btn_select1.bmp\", \"tri_state_btn_select2.bmp\" }"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 134551 "m_tri_state_unselected_img"
	const_attribute private explicit_type "std::string"
	init_value "=  \"tri_state_btn_select_none.bmp\""
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 162199 "WtMenuIf"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        m_menu_id(0xFF00),
        m_shall_leave( false ),
        m_bg( \"bg_menu.bmp\" ),
        m_fade( true )
    {
    };
"
	
	
	
	
      end

      operation 162327 "WtMenuIf"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "menu_id" explicit_type "uint16_t"
	  param in name "bg_img" explicit_type "std::string"
	    defaultvalue "\"bg_menu.bmp\""
	  param in name "fade" explicit_type "bool"
	    defaultvalue "true "
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} :
        m_menu_id( menu_id ),
        m_shall_leave( false ),
        m_bg( bg_img ),
        m_fade( fade )
    {
    };
"
	
	
	
	
      end

      operation 162455 "~WtMenuIf"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 162583 "listen"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 131095 // WtSettingsChangeObserver
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_change_listener.push_back( listener );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 162711 "show"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        open_menu();

        while( !m_shall_leave )
        {
            ACTIVE_INPUT.read();

            ACTIVE_WINDOW.clr();

            show_self();

            menu_update();

            ACTIVE_WINDOW.update();
        }

        close_menu();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 162839 "menu_left"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {

    };
"
	
	
	
	
	comment "signal
***********************"
      end

      operation 162967 "menu_update"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {

    };
"
	
	
	
	
	comment "signal
***********************"
      end

      operation 163095 "leave"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        m_shall_leave = true;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 163223 "get_id"
	const cpp_inline protected explicit_return_type "uint16_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_menu_id;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 163351 "get_button"
	cpp_inline protected return_type class_ref 130327 // WtButton
	nparams 1
	  param in name "id" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        WtButton* result = NULL;
        for(size_t idx=0;idx<m_buttons.size();idx++)
        {
            if ( MENU_BUTTON_ID( id ) == m_buttons[idx].id() )
            {
                result = &m_buttons[idx];
                break;
            }
        }
        return result;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 163479 "add_button"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param in name "button" type class_ref 130327 // WtButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        bool already_exists = false;

        button.set_id( MENU_BUTTON_ID( button.id() ) );

        for(size_t idx=0;idx<m_buttons.size();idx++)
        {
            if ( button.id() == m_buttons[idx].id() )
            {
                already_exists = true;
                break;
            }
        }

        if (! already_exists)
        {
            m_buttons.push_back( button );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 163607 "add_horizontal_carousel"
	cpp_inline protected explicit_return_type "void"
	nparams 4
	  param in name "labeled_ids" explicit_type "std::vector< std::pair<uint16_t, std::string> >"
	  param in name "frame_pos" type class_ref 129815 // WtCoord
	  param in name "frame_size" type class_ref 129559 // WtDim
	  param in name "selected" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        size_t idx = 0;

        for ( size_t i=0; i < labeled_ids.size(); i++ )
        {
            if ( labeled_ids[i].first == selected )
            {
                idx = i;
                break;
            }
        }

        WtCoord working_pos = frame_pos;
        WtDim   list_item_size( 328, 200 );
        working_pos.x += 105; // todo replace with proper calculation of list item image size
        do
        {
            m_buttons.push_back( WtButton( MENU_BUTTON_ID( labeled_ids[idx].first ),
                                           working_pos, list_item_size,
                                           (selected == labeled_ids[idx].first ? 
                                                    \"list_item_active.bmp\" : 
                                                    \"list_item_inactive.bmp\" ),
                                           labeled_ids[idx].second ) );

            working_pos.x += ( 6 + 328 );

            idx = (idx + 1) % labeled_ids.size();
        }
        while( idx != selected );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 163735 "add_radio_group_button"
	cpp_inline protected explicit_return_type "void"
	nparams 4
	  param in name "labeled_ids" explicit_type "std::vector< std::pair<uint16_t, std::string> >"
	  param in name "frame_pos" type class_ref 129815 // WtCoord
	  param in name "frame_size" type class_ref 129559 // WtDim
	  param in name "selected" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        if ( labeled_ids.size() > 1 )
        {
            WtCoord working_state_pos  = WtCoord( frame_pos.x + 1, frame_pos.y + 1 );
            WtDim   working_state_size = WtDim(   (frame_size.w - 1) / labeled_ids.size(),
                                                  (frame_size.h - 2) );

            // Add frame which isnt a button at all but can be set
            // using invalid id...
            m_buttons.push_back( WtButton( INVALID_BUTTON_ID,
                                           frame_pos, frame_size,
                                           m_tri_state_frame ) );

            m_buttons.push_back( WtButton( MENU_BUTTON_ID( labeled_ids.front().first ),
                                           working_state_pos, working_state_size,
                                           (selected == labeled_ids.front().first ? 
                                                    m_tri_state_selected_img[0] : 
                                                    m_tri_state_unselected_img ),
                                           labeled_ids.front().second ) );
            working_state_pos.moveX( working_state_size );           

            for( size_t i_Idx = 1; i_Idx < labeled_ids.size() - 1; i_Idx++ )
            {
                m_buttons.push_back( WtButton( MENU_BUTTON_ID( labeled_ids[i_Idx].first ),
                                     working_state_pos, working_state_size,
                                     (selected == labeled_ids[i_Idx].first ? 
                                                m_tri_state_selected_img[1] : 
                                                m_tri_state_unselected_img ),
                                     labeled_ids[i_Idx].second ) );
                working_state_pos.moveX( working_state_size );
            }

            m_buttons.push_back( WtButton( MENU_BUTTON_ID( labeled_ids.back().first ),
                                           working_state_pos, working_state_size,
                                           (selected == labeled_ids.back().first ? 
                                                    m_tri_state_selected_img[2] : 
                                                    m_tri_state_unselected_img ),
                                           labeled_ids.back().second ) );
            working_state_pos.moveX( working_state_size );
        }
        else
        {
            WtButton newButton = WtButton( labeled_ids.front().first,
                                           frame_pos, frame_size,
                                           m_tri_state_frame );
            add_button( newButton );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 163863 "modify_radio_group_button"
	cpp_inline protected explicit_return_type "void"
	nparams 3
	  param in name "first_id" explicit_type "uint16_t"
	  param in name "count" explicit_type "size_t"
	  param in name "selected" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, const ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        for(size_t idx=0;idx<m_buttons.size();idx++)
        {
            if( m_buttons[idx].id() == MENU_BUTTON_ID( first_id ) )
            {
                m_buttons[idx].set_image(   (selected == first_id ? m_tri_state_selected_img[0] : m_tri_state_unselected_img ) );
                for ( size_t i_idx = 1; i_idx < count-1; i_idx++ )
                    m_buttons[idx+i_idx].set_image( (selected == first_id+i_idx ? m_tri_state_selected_img[1] : m_tri_state_unselected_img ) );
                m_buttons[idx+count-1].set_image( (selected == first_id+(count-1) ? m_tri_state_selected_img[2] : m_tri_state_unselected_img ) );

                break;
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 163991 "add_list"
	cpp_inline protected explicit_return_type "void"
	nparams 4
	  param in name "pos" type class_ref 129815 // WtCoord
	  param in name "size" type class_ref 129559 // WtDim
	  param in name "btn_image" explicit_type "std::string"
	  param in name "texts" explicit_type "std::vector<std::string>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        WtCoord working_pos = pos;
        for ( size_t idx = 0; idx < texts.size(); idx++ )
        {
            add_button( WtButton( idx, working_pos, size, btn_image, texts[idx] ) );
            working_pos.y += (size.h + 20);
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 164119 "open_menu"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        m_shall_leave = false;
        ACTIVE_WINDOW.set_bg( get_bg_img() );

        fade_in();

        for(size_t idx=0;idx<m_buttons.size();idx++)
        {
            if ( m_buttons[idx].id() != INVALID_BUTTON_ID )
            {
                ACTIVE_INPUT.add_button( m_buttons[idx] );
            }
        }

        ACTIVE_INPUT.listen( this );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 164247 "close_menu"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ACTIVE_INPUT.ignore( this );

        for (size_t i=0;i<m_buttons.size();i++)
        {
            ACTIVE_INPUT.remove_button( m_buttons[i] );
        }

        fade_out();

        menu_left();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 164375 "enter_child_menu"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "sub_menu" type class_ref 131607 // WtMenuIf
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        close_menu();

        sub_menu.show();

        open_menu();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 164503 "get_listener"
	cpp_inline protected explicit_return_type "std::vector<WtSettingsChangeObserver*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_change_listener;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 164631 "get_bg_img"
	cpp_inline private explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_bg;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 164759 "fade_in"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        bool done = !m_fade;
        std::vector<WtButton> button_fading = m_buttons;

        for(size_t idx=0;idx<button_fading.size();idx++)
        {
            button_fading[idx].set_x( button_fading[idx].x()-800 );
        }
        
        while( !done )
        {
            ACTIVE_WINDOW.clr();

            for(size_t idx=0;idx<button_fading.size();idx++)
            {
                ACTIVE_WINDOW.draw_button( button_fading[idx] );
            }

            ACTIVE_WINDOW.update();

            usleep(12500);

            done = true;
            for(size_t idx=0;idx<button_fading.size();idx++)
            {
                button_fading[idx].set_x( button_fading[idx].x() + 80);
                if ( button_fading[idx].x() != m_buttons[idx].x() )
                    done = false;
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 164887 "fade_out"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        bool done = !m_fade;
        std::vector<WtButton> button_fading = m_buttons;

        while( !done )
        {
            ACTIVE_WINDOW.clr();

            for(size_t idx=0;idx<button_fading.size();idx++)
            {
                ACTIVE_WINDOW.draw_button( button_fading[idx] );
            }

            ACTIVE_WINDOW.update();

            usleep(12500);

            done = true;
            for(size_t idx=0;idx<button_fading.size();idx++)
            {
                button_fading[idx].set_x( button_fading[idx].x() - 80);
                if ( button_fading[idx].x() != m_buttons[idx].x()-800 )
                    done = false;
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 165015 "show_self"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        for(size_t idx=0;idx<m_buttons.size();idx++)
        {
            ACTIVE_WINDOW.draw_button( m_buttons[idx] );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 134679 "m_menu_id"
	const_attribute private explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 134807 "m_shall_leave"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 134935 "m_bg"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 134679 // m_buttons (<directional composition>)
	relation 134679 *-->
	  stereotype "std::vector"
	  a role_name "m_buttons" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 134679 // m_buttons (<directional composition>)
	  b parent class_ref 130327 // WtButton
      end

      classrelation 134807 // m_change_listener (<unidirectional association>)
	relation 134807 --->
	  stereotype "std::vector"
	  a role_name "m_change_listener" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 134807 // m_change_listener (<unidirectional association>)
	  b parent class_ref 131095 // WtSettingsChangeObserver
      end

      attribute 135063 "m_fade"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 131735 "WtGameModeAbc"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 130583 // <generalisation>
	relation 130583 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 130583 // <generalisation>
	  b parent class_ref 131223 // WtGameModeIf
      end

      operation 143895 "WtGameModeAbc"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
      WtGameModeIf( \"ABC?E\" ),
      m_working_letters(\"\"),
      m_active_row(0) 
    {
    };
"
	
	
	
	
      end

      operation 144023 "~WtGameModeAbc"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 144151 "init_game"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "board" type class_ref 129687 // WtBoard
	  param inout name "player" type class_ref 130711 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        (void)player; // currently unused

        m_active_row = 0;
        setup_sequences();
        show_sequence( board );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 144279 "get_title"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n::tr(\"ABC?E\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 144407 "eval_board"
	cpp_virtual cpp_inline public return_type class_ref 131863 // WtGameModeState
	nparams 2
	  param inout name "board" type class_ref 129687 // WtBoard
	  param inout name "player" type class_ref 130711 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        WtGameModeState gs( false,
                            WtGridAnimation::no_animation() );
        if ( m_working_letters.empty() )
        {
            bool correct = true;
            for( uint8_t c=0; c < WtBoard::col_count; c++ )
            {
                if ( m_current_sequence_control[c] != board.get_cell( m_active_row, c ) )
                {
                    correct = false;
                    break;
                }
            }

            if ( correct )
            {                
                player.word_solved();
                
                board.collapse_above( m_active_row );
            }
            else
            {
                m_active_row++;
            }

            setup_sequences();
            show_sequence( board );
        }
        return gs;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 144535 "next_letter"
	cpp_virtual cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        char next = '#';
        if ( ! m_working_letters.empty() )
        {
            next = WtRandom::get_random_letter_of_word( m_working_letters );
            remove_letter( m_working_letters, next );
        }
        // else shall not happen -> game loop take care if eval_board checks for empty
        // and reloads whatever may next

        return next; 
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 144663 "get_hint"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n::translate( WtL10n::tr(\"Complete the sequence!\") );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 144791 "get_help"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { 
        return WtL10n::translate( WtL10n::tr(\"Try to place the falling letters at the correct position of the given sequence.\") );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 144919 "setup_sequences"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        generate_sequence(m_current_sequence_control);
        m_working_letters = prepare_sequence( m_current_sequence_control, 
                                              get_difficulty(), 
                                              m_current_sequence );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 145047 "show_sequence"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "board" type class_ref 129687 // WtBoard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        for( uint8_t c=0; c < WtBoard::col_count; c++ )
        {
            board.set_cell( m_active_row, c, m_current_sequence[c] );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 145175 "remove_letter"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "word" explicit_type "std::string"
	  param in name "letter" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        size_t first_idx = word.find_first_of( letter );
        if ( first_idx != std::string::npos )
        {
            word.erase( first_idx, 1 );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 145303 "prepare_sequence"
	cpp_inline private explicit_return_type "std::string"
	nparams 3
	  param inout name "in_seq" type class_ref 130199 // RowSequence
	  param in name "diff" type class_ref 131351 // wt_difficulty
	  param inout name "out_seq" type class_ref 130199 // RowSequence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        std::string removed;
        std::vector<size_t> indices = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
        uint8_t lettersToRemove = 0;
        switch( diff )
        {
            case wt_difficulty_EASY:   lettersToRemove = 2; break;
            case wt_difficulty_MEDIUM: lettersToRemove = 4; break;
            case wt_difficulty_HARD:   lettersToRemove = 8; break;
            default: break;
        }

        for( size_t idx = 0; idx < WtBoard::col_count; idx++ )
        {
            out_seq[idx] = in_seq[idx];
        }

        for( uint8_t removedCount = 0; removedCount < lettersToRemove; removedCount++ )
        {
            size_t r_idx = WtRandom::get_random_from_sequence( indices );

            removed.push_back( out_seq[r_idx] );
            out_seq[r_idx] = WtBoard::empty_cell;

            indices.erase( find(indices.begin(), indices.end(), r_idx ) );
        }
        return removed;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 145431 "generate_sequence"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "seq" type class_ref 130199 // RowSequence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        uint8_t starting_idx = WtRandom::roll_dice(26-WtBoard::col_count);
        for( size_t idx = 0; idx < WtBoard::col_count; idx++ )
        {
            seq[idx] = ( 'A'+(idx+starting_idx) );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 130711 // m_current_sequence (<directional composition>)
	relation 130711 *-->
	  a role_name "m_current_sequence" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130711 // m_current_sequence (<directional composition>)
	  b parent class_ref 130199 // RowSequence
      end

      classrelation 130839 // m_current_sequence_control (<directional composition>)
	relation 130839 *-->
	  a role_name "m_current_sequence_control" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130839 // m_current_sequence_control (<directional composition>)
	  b parent class_ref 130199 // RowSequence
      end

      attribute 132119 "m_working_letters"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 132247 "m_active_row"
	private explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 131863 "WtGameModeState"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      operation 148119 "WtGameModeState"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "go" explicit_type "bool"
	  param in name "a" type class_ref 129047 // WtGridAnimation
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw}${abstract} :
        game_over( go ),
        animation( a ) {};
"
	
	
	
	
      end

      attribute 132759 "game_over"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 131991 // animation (<directional composition>)
	relation 131991 *-->
	  a role_name "animation" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 131991 // animation (<directional composition>)
	  b parent class_ref 129047 // WtGridAnimation
      end
    end

    class 131991 "WtGameModeCtr"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 145559 "instance"
	class_operation cpp_inline public return_type class_ref 131991 // WtGameModeCtr
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static WtGameModeCtr _instance;
        return _instance;
    };
"
	
	
	
	
      end

      operation 145687 "~WtGameModeCtr"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 145815 "default_mode"
	cpp_inline public return_type class_ref 131223 // WtGameModeIf
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return &m_demoMode;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 145943 "mode_from_string"
	cpp_inline public return_type class_ref 131223 // WtGameModeIf
	nparams 1
	  param in name "mode_id" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        WtGameModeIf* result = default_mode();
        if ( ! mode_id.empty() )
        {
            for( size_t idx = 0; idx < m_available_modes.size(); idx++ )
            {
                if ( m_available_modes[idx]->get_id_string() == mode_id )
                {
                    result = m_available_modes[idx];
                    break;
                }
            }
        }
        return result;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 146071 "get_available_modes"
	cpp_inline public explicit_return_type "std::vector<WtGameModeIf*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_available_modes;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 146199 "WtGameModeCtr"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
        m_available_modes.push_back( &m_demoMode );
        m_available_modes.push_back( &m_guessMode );
        m_available_modes.push_back( &m_tetrisMode );
        m_available_modes.push_back( &m_abcMode );
        m_available_modes.push_back( &m_wordtrisMode );
    };
"
	
	
	
	
      end

      operation 146327 "WtGameModeCtr"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 131991 // WtGameModeCtr
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 146455 "operator ="
	private return_type class_ref 131991 // WtGameModeCtr
	nparams 1
	  param in name "" type class_ref 131991 // WtGameModeCtr
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      classrelation 130967 // m_demoMode (<directional composition>)
	relation 130967 *-->
	  a role_name "m_demoMode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 130967 // m_demoMode (<directional composition>)
	  b parent class_ref 132119 // WtGameModeDemo
      end

      classrelation 131095 // m_guessMode (<directional composition>)
	relation 131095 *-->
	  a role_name "m_guessMode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 131095 // m_guessMode (<directional composition>)
	  b parent class_ref 132247 // WtGameModeGuessing
      end

      classrelation 131223 // m_tetrisMode (<directional composition>)
	relation 131223 *-->
	  a role_name "m_tetrisMode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 131223 // m_tetrisMode (<directional composition>)
	  b parent class_ref 132375 // WtGameModeTetris
      end

      classrelation 131351 // m_abcMode (<directional composition>)
	relation 131351 *-->
	  a role_name "m_abcMode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 131351 // m_abcMode (<directional composition>)
	  b parent class_ref 131735 // WtGameModeAbc
      end

      classrelation 131479 // m_wordtrisMode (<directional composition>)
	relation 131479 *-->
	  a role_name "m_wordtrisMode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 131479 // m_wordtrisMode (<directional composition>)
	  b parent class_ref 132503 // WtGameModeWordtris
      end

      classrelation 131607 // m_available_modes (<unidirectional association>)
	relation 131607 --->
	  stereotype "std::vector"
	  a role_name "m_available_modes" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 131607 // m_available_modes (<unidirectional association>)
	  b parent class_ref 131223 // WtGameModeIf
      end
    end

    class 132119 "WtGameModeDemo"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "demo implementation of game mode if
***************************************"
      classrelation 132247 // <generalisation>
	relation 132247 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 132247 // <generalisation>
	  b parent class_ref 131223 // WtGameModeIf
      end

      operation 149911 "WtGameModeDemo"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtGameModeIf( \"Demo\" ),
        m_active_wordbase( \"12340()()()()#@abcdEFGK\" )
    {
    };
"
	
	
	
	
      end

      operation 150039 "~WtGameModeDemo"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 150167 "init_game"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "board" type class_ref 129687 // WtBoard
	  param inout name "player" type class_ref 130711 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        for( size_t r_idx = 0; r_idx < WtBoard::row_count/2+1; r_idx++ )
            for( size_t c_idx = 0; c_idx < WtBoard::col_count; c_idx++ )
            {
                uint8_t dice = WtRandom::roll_dice(6);
                if ( dice > 5 )
                    board.set_cell( r_idx, c_idx, WtRandom::get_random_letter_of_word( m_active_wordbase ) );
            }

        player.set_level_offset(9);
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 150295 "get_title"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return \"Demo\";
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 150423 "eval_board"
	cpp_virtual cpp_inline public return_type class_ref 131863 // WtGameModeState
	nparams 2
	  param inout name "" type class_ref 129687 // WtBoard
	  param inout name "" type class_ref 130711 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        WtGameModeState gs( false,
                             WtGridAnimation::no_animation() );
        return gs;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 150551 "next_letter"
	cpp_virtual cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtRandom::get_random_letter_of_word( m_active_wordbase ); 
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 150679 "get_hint"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        std::string s_hint( \"dEmO MoDe\" );
        return s_hint;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 150807 "WtGameModeDemo"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 132119 // WtGameModeDemo
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 150935 "operator ="
	private return_type class_ref 132119 // WtGameModeDemo
	nparams 1
	  param in name "" type class_ref 132119 // WtGameModeDemo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      attribute 133015 "m_active_wordbase"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 132247 "WtGameModeGuessing"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 131735 // <generalisation>
	relation 131735 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 131735 // <generalisation>
	  b parent class_ref 131223 // WtGameModeIf
      end

      operation 146583 "WtGameModeGuessing"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtGameModeIf( \"Guess it\" ),
        m_active_word( \"BlAcK\" ),
        m_wordlist()
    {
        m_active_word_guessed   = m_active_word;
        m_active_word_scrambled = scramble( m_active_word );
    };
"
	
	
	
	
      end

      operation 146711 "~WtGameModeGuessing"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 146839 "get_title"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n::tr(\"Guess it!\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 146967 "init_game"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "" type class_ref 129687 // WtBoard
	  param inout name "" type class_ref 130711 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        m_active_word           = \"BlAcK\";
        m_active_word_guessed   = m_active_word;
        m_active_word_scrambled = scramble( m_active_word );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 147095 "eval_board"
	cpp_virtual cpp_inline public return_type class_ref 131863 // WtGameModeState
	nparams 2
	  param inout name "board" type class_ref 129687 // WtBoard
	  param inout name "player" type class_ref 130711 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        WtGameModeState gs( false,
                            WtGridAnimation::no_animation() );

        if ( m_active_word_guessed.empty() )
        {
            bool found_word = false;

            // search rows for word
            //TODO: use DEA instead of string construction
            for ( uint8_t r_idx = 0; r_idx < WtBoard::row_count; r_idx++ )
            {
                std::string row = std::string(\"\");
                for ( uint8_t c_idx = 0; c_idx < WtBoard::col_count; c_idx++ )
                {
                    char cell = board.get_cell( r_idx, c_idx );
                    if ( cell != WtBoard::empty_cell )
                        row.push_back( cell );
                    else
                        row.push_back( ' ' );
                }
              
                size_t found_idx = row.find( m_active_word );
                if ( found_idx != std::string::npos )
                {
                    for ( size_t c_idx = found_idx; c_idx < (m_active_word.length()+found_idx); c_idx++ )
                        board.set_cell( r_idx, (uint8_t)(c_idx), WtBoard::empty_cell );
                    //TODO gravity bitch!
                    found_word = true;
                    break;
                }
            }

            if ( found_word )
            {
                player.word_solved();
                get_next_word();
            }
            else
            {
                get_next_word();
            }
        }

        return gs;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 147223 "next_letter"
	cpp_virtual cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        char next = '#';
        if ( ! m_active_word_guessed.empty() )
        {
            next = WtRandom::get_random_letter_of_word( m_active_word_guessed );
            remove_letter( m_active_word_guessed, next );
        }
        // else shall not happen -> game loop take care if eval_board checks for empty
        // and reloads whatever may next

        return next; 
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 147351 "get_hint"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n::tr(\"Guess the word: \").append(m_active_word_scrambled);
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 147479 "WtGameModeGuessing"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 132247 // WtGameModeGuessing
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 147607 "operator ="
	private return_type class_ref 132247 // WtGameModeGuessing
	nparams 1
	  param in name "" type class_ref 132247 // WtGameModeGuessing
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 147735 "get_next_word"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        size_t idx = 0;
        uint8_t buf;
        const std::vector<std::string>& guess_list = m_wordlist.get_wordlist_by_name(\"short list\");
        if ( WtRandom::getrandom( &buf, 1 ) <= 1 )
        {
            idx = (buf % guess_list.size());
        }
        m_active_word = guess_list[idx];
        m_active_word_guessed = m_active_word;
        m_active_word_scrambled = scramble( m_active_word );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 147863 "remove_letter"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "word" explicit_type "std::string"
	  param in name "letter" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        size_t first_idx = word.find_first_of( letter );
        if ( first_idx != std::string::npos )
        {
            word.erase( first_idx, 1 );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 147991 "scramble"
	cpp_virtual cpp_inline private explicit_return_type "std::string"
	nparams 1
	  param in name "word" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::string word_copy = word;
        std::string result = std::string(\"\");

        while ( ! word_copy.empty() )
        {
            char next = WtRandom::get_random_letter_of_word( word_copy );
            result.push_back( next );
            remove_letter( word_copy, next );
        }

        return result;
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 132375 "m_active_word"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 132503 "m_active_word_guessed"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 132631 "m_active_word_scrambled"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 131863 // m_wordlist (<directional composition>)
	relation 131863 *-->
	  a role_name "m_wordlist" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 131863 // m_wordlist (<directional composition>)
	  b parent class_ref 132631 // WtWordList
      end
    end

    class 132375 "WtGameModeTetris"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 132375 // <generalisation>
	relation 132375 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 132375 // <generalisation>
	  b parent class_ref 131223 // WtGameModeIf
      end

      operation 151063 "WtGameModeTetris"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtGameModeIf( \"Fill Rows\" ),
        m_active_wordbase( \"()+&\" )
    {
    };
"
	
	
	
	
      end

      operation 151191 "~WtGameModeTetris"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 151319 "get_title"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n::tr(\"Fill Rows\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 151447 "eval_board"
	cpp_virtual cpp_inline public return_type class_ref 131863 // WtGameModeState
	nparams 2
	  param inout name "board" type class_ref 129687 // WtBoard
	  param inout name "player" type class_ref 130711 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        WtGameModeState gs( false,
                            WtGridAnimation::no_animation() );
        // search rows for word
        for ( uint8_t r_idx = 0; r_idx < WtBoard::row_count; r_idx++ )
        {
            bool row_full = true;
            size_t active_word = 0;
            std::string words[WtBoard::col_count];

            words[active_word].push_back( board.get_cell( r_idx, 0 ) );
            for ( uint8_t c_idx = 1; c_idx < WtBoard::col_count; c_idx++ )
            {
                char next = board.get_cell( r_idx, c_idx );
                if ( next != '\\0' )
                {
                    if ( words[active_word][0] != next )
                    {
                        active_word++;
                    }
                    words[active_word].push_back( next );
                }
                else
                {
                    row_full = false;
                }
            }

            if ( row_full )
            {
                uint32_t points = 0;
                for ( uint8_t w_idx = 0; w_idx < WtBoard::col_count; w_idx ++ )
                {
                    points += (words[w_idx].length() * words[w_idx].length()) * 20;
                }
                player.row_cleared( points );
                /* drop remaining stones afterwards */
                board.collapse_above( r_idx );
            }
        }

        return gs;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 151575 "next_letter"
	cpp_virtual cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtRandom::get_random_letter_of_word( m_active_wordbase ); 
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 151703 "get_hint"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n::tr(\"build rows.\\nthe more equal symbols, more points.\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 151831 "WtGameModeTetris"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 132375 // WtGameModeTetris
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 151959 "operator ="
	private return_type class_ref 132375 // WtGameModeTetris
	nparams 1
	  param in name "" type class_ref 132375 // WtGameModeTetris
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      attribute 133143 "m_active_wordbase"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 132503 "WtGameModeWordtris"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 132503 // <generalisation>
	relation 132503 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 132503 // <generalisation>
	  b parent class_ref 131223 // WtGameModeIf
      end

      attribute 133271 "min_word_length"
	class_attribute const_attribute private explicit_type "size_t"
	init_value "=  3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 152087 "WtGameModeWordtris"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtGameModeIf( \"WordtrisClassic\" ),
        m_letters( \"ETAOINSRHDLUCMFYWGPBVKXQJZ\" ),
        m_wordlist()
    {
        m_wordlist.load_from_list( \"20k list\", WtWordList::eToUpper );
        std::cout << \"words = \" << m_wordlist.size() << std::endl;
    };
"
	
	
	
	
      end

      operation 152215 "~WtGameModeWordtris"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 152343 "get_title"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n::tr(\"Classic Mode\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 152471 "init_game"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "board" type class_ref 129687 // WtBoard
	  param inout name "player" type class_ref 130711 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        (void)player; //currently not used

        for( size_t r_idx = 0; r_idx < WtBoard::row_count/2; r_idx++ )
            for( size_t c_idx = 0; c_idx < WtBoard::col_count; c_idx++ )
            {
                board.set_cell( r_idx, c_idx, ' ' );
            }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 152599 "eval_board"
	cpp_virtual cpp_inline public return_type class_ref 131863 // WtGameModeState
	nparams 2
	  param inout name "board" type class_ref 129687 // WtBoard
	  param inout name "player" type class_ref 130711 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        WtGridAnimation blink;
        WtGameModeState gs( false,
                            WtGridAnimation::no_animation() );
        bool something_found = false;

        do
        {
            something_found = false;
            for ( uint8_t r_idx = 0; r_idx < WtBoard::row_count; r_idx++ )
            {
                std::string row_str = board.get_row_string( r_idx );
                std::vector<std::string> sequences = split( std::string(row_str) );
                for( size_t s_idx = 0; s_idx < sequences.size(); s_idx++ )
                {
                    if ( sequences[s_idx].length() >= min_word_length )
                    {
                        std::string word = contains_word( sequences[s_idx] );
                        if ( !word.empty() ) 
                        {
                            {
                                WtGridAnimation::GridAnimationStep step( WtGridAnimation::GridText( WtBoard::row_count-r_idx,
                                                                                                    row_str.find( word ),
                                                                                                    true,
                                                                                                    word, 
                                                                                                    \"grid_inverse\" ),
                                                                           200000 );
                                blink.push_back( step );
                                step.content.font = \"grid\";
                                blink.push_back( step );
                                step.content.font = \"grid_inverse\";
                                blink.push_back( step );
                            }
                            gs.animation = blink;
                            player.word_solved( word.length() );
                            erase_from_row( r_idx, row_str, word, board );
                            something_found = true;
                            
                            break;
                        }
                    }
                }
            }


            for ( uint8_t c_idx = 0; c_idx < WtBoard::col_count; c_idx++ )
            {
                std::string col_str = board.get_col_string( c_idx );
                std::string trimmed = col_str;
                trim( trimmed );

                if ( trimmed.length() >= min_word_length )
                {
                    std::string word = contains_word( trimmed );
                    if ( !word.empty() ) 
                    {
                        {
                            WtGridAnimation::GridAnimationStep step( WtGridAnimation::GridText( WtBoard::row_count-col_str.find( word ),
                                                                                                c_idx,
                                                                                                false,
                                                                                                word, 
                                                                                                \"grid_inverse\" ),
                                                                       200000 );
                            blink.push_back( step );
                            step.content.font = \"grid\";
                            blink.push_back( step );
                            step.content.font = \"grid_inverse\";
                            blink.push_back( step );
                        }
                        gs.animation = blink;
                        player.word_solved( word.length() );
                        erase_from_col( c_idx, col_str, word, board );
                        something_found = true;

                        break;
                    }
                }
            }
        }
        while( something_found );

        return gs;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 152727 "next_letter"
	cpp_virtual cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
                                                   // E  T A O I N S R H D L U C M F Y W G P B V K X Q J Z,?,*
        std::discrete_distribution<int> distribution {12,9,8,8,7,7,6,6,6,4,4,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,5,5 };
        return WtRandom::get_random_letter_of_weight_seq( std::string(m_letters).append(\"?*\"),
                                                          distribution ); 
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 152855 "get_hint"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n::tr(\"try to build 3+ letter words!\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 152983 "stone_blocked"
	cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 3
	  param inout name "board" type class_ref 129687 // WtBoard
	  param in name "row" explicit_type "uint8_t"
	  param in name "col" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return ( board.cell_occupied( row, col ) || row < (WtBoard::row_count/2-1) );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 153111 "insert_stone_at"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "board" type class_ref 129687 // WtBoard
	  param in name "row" explicit_type "uint8_t"
	  param in name "col" explicit_type "uint8_t"
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        if ( value == '*' )
        {
            // a bomb has been dropped!
            if ( 
                 ( ( board.get_cell( row-1, col ) != WtBoard::empty_cell )
                   &&
                   ( board.get_cell( row-1, col ) != ' ' )
                 )
               )
            {
                if ( row <= (WtBoard::row_count/2+1) )
                {
                    for ( uint8_t idx = row-1; idx > 0; idx-- )
                    {
                        char next = board.get_cell( idx-1, col );
                        if ( ( next == ' ' ) && ( idx == row-1 ) )
                            next = WtBoard::empty_cell;

                        board.set_cell( idx, col, next );

                        if ( ( next == ' ' ) || ( next == WtBoard::empty_cell ) )
                            break;
                    }
                    board.set_cell( 0, col, ' ' );
                }
                else
                {
                    board.set_cell( row-1, col, WtBoard::empty_cell );
                }
            }
        }
        else
        {
            if ( value == '?' )
            {
                value = WtRandom::get_random_letter_of_word( m_letters );
            }

            // if we stack up, we push the other rows downward until they reach
            // the end of the board and then we stack up
            if ( 
                 ( ( board.get_cell( row-1, col ) != WtBoard::empty_cell )
                   &&
                   ( board.get_cell( row-1, col ) != ' ' )
                 )
                 &&
                 ( board.get_cell( 0, col ) == ' ' )
               )
            {
                for ( uint8_t idx = 0; idx < row-1; idx++ )
                {
                    board.set_cell( idx, col, board.get_cell( idx+1, col ) );
                }
                board.set_cell( row - 1, col, value );
            }
            else
            {
                board.set_cell( row, col, value );
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 153239 "WtGameModeWordtris"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 132503 // WtGameModeWordtris
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 153367 "operator ="
	private return_type class_ref 132503 // WtGameModeWordtris
	nparams 1
	  param in name "" type class_ref 132503 // WtGameModeWordtris
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 153495 "column_gravity"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param in name "c_idx" explicit_type "uint8_t"
	  param inout name "board" type class_ref 129687 // WtBoard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        std::string col_str = board.get_col_string( c_idx );
        if ( col_str.find_first_not_of( \" \" ) != std::string::npos )
        {
            std::string lower = col_str.substr( WtBoard::row_count/2 );
            std::string upper = col_str.substr( 0, WtBoard::row_count/2 );
/*
            std::cout << \"col_str before = \\\"\" << col_str << \"\\\"\"<< std::endl;
            std::cout << \"upper before = \\\"\"<< upper << \"\\\"\"<< std::endl;
            std::cout << \"lower before = \\\"\"<< lower << \"\\\"\"<< std::endl;
*/
            upper.erase(std::remove(upper.begin(), upper.end(), ' '), upper.end());
            lower.erase(std::remove(lower.begin(), lower.end(), ' '), lower.end());
/*
            std::cout << \"upper after = \\\"\"<< upper << \"\\\"\"<< std::endl;
            std::cout << \"lower after = \\\"\"<< lower << \"\\\"\"<< std::endl;
  */         
            std::string new_col_str;
            if ( ! upper.empty() )
            {
                std::string upper_col_str(WtBoard::row_count/2-upper.length(), ' ' );
                upper_col_str.append( upper );
                std::string lower_col_str(WtBoard::row_count/2-lower.length(), ' ' );
                lower.append( lower_col_str );
                new_col_str = upper_col_str;           
                new_col_str.append( lower );
            }
            else
            {
                std::string upper_col_str(WtBoard::row_count/2-1, ' ' );
                std::string lower_col_str(WtBoard::row_count/2+1-lower.length(), ' ' );
                lower.append( lower_col_str );
                new_col_str = upper_col_str;           
                new_col_str.append( lower );
            }

            //std::cout << \"new_col_str after = \\\"\" << new_col_str << \"\\\"\"<< std::endl;

            for ( uint8_t r_idx = 0; r_idx < WtBoard::row_count; r_idx++ )
            {
                char cell = new_col_str[ (WtBoard::row_count-1) - r_idx ];
                if ( cell == ' ' )
                {
                    if ( r_idx < WtBoard::row_count / 2 )
                    {
                        cell = ' ';
                    }
                    else
                    {
                        cell = WtBoard::empty_cell;
                    }
                }

                board.set_cell( r_idx, c_idx, cell );
            }

          //  std::cout << \"col_str after = \\\"\" << board.get_col_string( c_idx ) << \"\\\"\"<< std::endl;
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 153623 "erase_from_row"
	cpp_inline private explicit_return_type "void"
	nparams 4
	  param in name "r_idx" explicit_type "uint8_t"
	  param in name "row_str" explicit_type "std::string"
	  param in name "word" explicit_type "std::string"
	  param inout name "board" type class_ref 129687 // WtBoard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        //1. locate beginning
        size_t pos = row_str.find( word );
        std::cout << \"erase '\" << word << \"' from '\" << row_str << \"'\" <<std::endl;
        if ( pos != std::string::npos )
        {
            char replace_char = WtBoard::empty_cell;
            if ( r_idx < WtBoard::row_count/2 )
                replace_char = ' ';
            
            //2. replace acc.
            for( size_t c_idx = pos; c_idx < (pos + word.length()); c_idx++ )
            {
                board.set_cell( r_idx, (uint8_t)c_idx, replace_char );

                //3. push up or pull down if necessary
                column_gravity( c_idx, board );            
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 153751 "erase_from_col"
	cpp_inline private explicit_return_type "void"
	nparams 4
	  param in name "c_idx" explicit_type "uint8_t"
	  param in name "col_str" explicit_type "std::string"
	  param in name "word" explicit_type "std::string"
	  param inout name "board" type class_ref 129687 // WtBoard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        //1. locate beginning
        size_t pos = col_str.find( word );
        if ( pos != std::string::npos )
        {
          //  std::cout << \"colstr = \\\"\" << col_str << \"\\\"; word found at = \"<<pos<<\"w len = \"<<word.length()<<std::endl;
            pos = (WtBoard::row_count - pos) - 1;
            // iterate over rows
            for( size_t w_idx = 0; w_idx < word.length(); w_idx++ )
            {
                uint8_t r_idx = pos - w_idx;

                //2. if row <= row_count/2 replace with ' '
                //   else replace with empty_cell
                char replace_char = WtBoard::empty_cell;
                if ( r_idx < WtBoard::row_count/2 )
                    replace_char = ' ';

                board.set_cell( r_idx, c_idx, replace_char );
            }

            //3. push up or pull down if necessary
            column_gravity( c_idx, board );            
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 153879 "contains_word"
	cpp_inline private explicit_return_type "std::string"
	nparams 1
	  param in name "sequence" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::string result = \"\";

        // use dea with preprocessed contains logic to eval word

        // preprocessor of word list need to create a dea for each word
        // and the contains logic needs to take a list argment 
        // and process as logical OR dea which means parallel symbol
        // processing
        // dea list preprocessor sorts string list by length
        // and gets the max length as parameter for more efficient
        // searching
        // something like this:
        // WtWordList::search_for_word( sequence );
        // length is taken by sequence.length() within search
        // also language selection
        std::vector<std::string> found_words = m_wordlist.get_contained_words( sequence );

        if ( found_words.size() > 0 )
        {
            struct compare {
                bool operator()(const std::string& first, const std::string& second) {
                    return first.size() > second.size();
                }
            } c;

            std::sort(found_words.begin(), found_words.end(), c);

            for( size_t i = 0; i < found_words.size(); i++ )
                std::cout << \"(\" << i << \") \" << found_words[i] << std::endl;

            result = found_words[0];
        }

        return result;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 154007 "split"
	cpp_inline private explicit_return_type "std::vector<std::string>"
	nparams 1
	  param in name "board_str" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::istringstream iss(board_str);
        std::vector<std::string> result_list(std::istream_iterator<std::string>{iss},
                                         std::istream_iterator<std::string>());
        return result_list;
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 133399 "m_letters"
	const_attribute private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 132631 // m_wordlist (<directional composition>)
	relation 132631 *-->
	  a role_name "m_wordlist" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 132631 // m_wordlist (<directional composition>)
	  b parent class_ref 132631 // WtWordList
      end
    end

    class 132631 "WtWordList"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************************"
      class 136343 "EConvertChars"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 141335 "eToLower"
	  public type class_ref 136343 // EConvertChars
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 141463 "eToUpper"
	  public type class_ref 136343 // EConvertChars
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 141591 "eNone"
	  public type class_ref 136343 // EConvertChars
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 179223 "WtWordList"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
        load_lists();
    };
"
	
	
	
	
      end

      operation 179351 "WtWordList"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "input_list_name" explicit_type "std::string"
	  param in name "conv" type class_ref 136343 // EConvertChars
	    defaultvalue "eNone "
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} {
        load_lists();


        const std::vector<std::string>& input_list = get_wordlist_by_name( input_list_name );
        for( size_t i = 0; i < input_list.size(); i++ )
        {
            std::string input = input_list[i];
            if ( !input.empty() )
            {
                switch( conv )
                {
                    case eToLower: std::transform(input.begin(), input.end(), input.begin(), ::tolower); break;
                    case eToUpper: std::transform(input.begin(), input.end(), input.begin(), ::toupper); break;
                    default: break;
                }

                WtWord* w = new WtWord( input );
                m_words.push_back(w);
            }
        }
    };
"
	
	
	
	
      end

      operation 179479 "~WtWordList"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
        for( size_t w_idx = 0; w_idx < m_words.size(); w_idx++ )
            delete m_words[w_idx];
        m_words.clear();
    };
"
	
	
	
	
      end

      operation 179607 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_words.size();
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 179735 "load_from_list"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "input_list_name" explicit_type "std::string"
	  param in name "conv" type class_ref 136343 // EConvertChars
	    defaultvalue "eNone "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        const std::vector<std::string>& input_list = get_wordlist_by_name( input_list_name );

        for( size_t w_idx = 0; w_idx < m_words.size(); w_idx++ )
            delete m_words[w_idx];
        m_words.clear();

        for( size_t i = 0; i < input_list.size(); i++ )
        {
            std::string input = input_list[i];
            if ( !input.empty() )
            {
                switch( conv )
                {
                    case eToLower: std::transform(input.begin(), input.end(), input.begin(), ::tolower); break;
                    case eToUpper: std::transform(input.begin(), input.end(), input.begin(), ::toupper); break;
                    default: break;
                }

                WtWord* w = new WtWord( input );
                m_words.push_back(w);
            }
        }
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 179863 "get_contained_words"
	cpp_inline public explicit_return_type "std::vector<std::string>"
	nparams 1
	  param in name "sequence" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::vector<std::string> found_words;
        for( size_t idx = 0; idx<sequence.length(); idx++ )
        {
            for( size_t w_idx = 0; w_idx < m_words.size(); w_idx++ )
            {
//                std::cout << idx << \" update on \" << m_words[w_idx]->as_string() << std::endl;
                m_words[w_idx]->search_update( sequence[idx] );
            }
        }
        for( size_t w_idx = 0; w_idx < m_words.size(); w_idx++ )
        {
            if ( m_words[w_idx]->search_found() )
            {
                found_words.push_back( m_words[w_idx]->as_string() );
            }
            m_words[w_idx]->search_reset();
        }
        return found_words;
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 179991 "get_wordlist_by_name"
	cpp_inline public explicit_return_type "std::vector<std::string>"
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( name == \"short list\" )
            return m_list_short;
        if ( name == \"1k list\" )
            return m_list_medium;
        if ( name == \"5k list\" )
            return m_list_large;
        if ( name == \"20k list\" )
            return m_list_xlarge;
        else
            return m_list_short;
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 180119 "load_lists"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        load_list_from_file( \"short.txt\", WtL10n::get_language_code(), m_list_short );
        load_list_from_file( \"medium.txt\", WtL10n::get_language_code(), m_list_medium );
        load_list_from_file( \"large.txt\", WtL10n::get_language_code(), m_list_large );
        load_list_from_file( \"xlarge.txt\", WtL10n::get_language_code(), m_list_xlarge );
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 180247 "load_list_from_file"
	cpp_inline private explicit_return_type "void"
	nparams 3
	  param in name "list_name" explicit_type "std::string"
	  param in name "language" explicit_type "std::string"
	  param inout name "list" explicit_type "std::vector<std::string>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        std::string fname( \"wordlists/\" );
        fname.append(language).append(\"/\").append(list_name);
        std::cout << \"try to load wordlist at \\\"\" << fname << \"\\\"\" << std::endl;
        std::vector<uint8_t>& file_content = STORAGE.get_asset_file_buf( fname );
        // process....
        std::string str(file_content.begin(), file_content.end());
        std::stringstream ss(str);
        for (std::string each; std::getline(ss, each, '\\n'); list.push_back(each));
    };
"
	
	
	
	
	comment "
***********************************"
      end

      classrelation 137751 // m_words (<unidirectional association>)
	relation 137751 --->
	  stereotype "std::vector"
	  a role_name "m_words" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 137751 // m_words (<unidirectional association>)
	  b parent class_ref 136215 // WtWord
      end

      attribute 141719 "m_list_short"
	private explicit_type "std::string"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 141847 "m_list_medium"
	private explicit_type "std::string"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 141975 "m_list_large"
	private explicit_type "std::string"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 142103 "m_list_xlarge"
	private explicit_type "std::string"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 132759 "WtInput"
      visibility package 
      nformals 1
      formal name "InputPolicy" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 132759 // <generalisation>
	relation 132759 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 132759 // <generalisation>
	  b parent class_ref 132887 // typedef2
      end

      operation 155031 "instance"
	class_operation cpp_inline public return_type class_ref 132759 // WtInput
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static WtInput _instance;
        return _instance;
    };
"
	
	
	
	
	comment " singleton definition"
      end

      operation 155159 "~WtInput"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 155287 "WtInput"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        InputPolicy()
    {
        m_active_buttons.clear();
    };
"
	
	
	
	
      end

      operation 155415 "WtInput"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 132759 // WtInput
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 155543 "operator ="
	private return_type class_ref 132759 // WtInput
	nparams 1
	  param in name "" type class_ref 132759 // WtInput
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 155671 "listen"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "observer" type class_ref 130967 // WtInputObserver
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_input_listener.push_back( observer );
    };
"
	
	
	
	
	comment " api defintion


***********************"
      end

      operation 155799 "ignore"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "observer" type class_ref 130967 // WtInputObserver
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        for (size_t i=0;i<m_input_listener.size();i++)
        {
            if ( m_input_listener[i] == observer )
            {
                m_input_listener.erase( m_input_listener.begin()+i );
                break;
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 155927 "add_button"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "button" type class_ref 130327 // WtButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_active_buttons.push_back( button );
        //std::cout << \"new button(\"<<id<<\") @ (\"<<pos.x<<\",\"<<pos.y<<\") with (\"<<size.w<<\",\"<<size.h<<\")\"<<std::endl;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 156055 "remove_button"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "button" type class_ref 130327 // WtButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        for ( size_t i = 0; i < m_active_buttons.size(); i++ )
        {
            if ( m_active_buttons[i].id() == button.id() )
            {
                //std::cout << \"del button(\"<<id<<\")\"<<std::endl;
                m_active_buttons.erase( m_active_buttons.begin()+i );
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 156183 "read"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        WtInputEvent ev = InputPolicy::read_input();

        if ( ev.is_key_event )
        {
            wt_control ch = ev.key;
            switch (ch)
            {
                case wt_control_DROP:
                    for (size_t i = 0; i < m_input_listener.size(); i++)
                        m_input_listener[i]->notify_drop();
                    break;
                case wt_control_LEFT: 
                    for (size_t i = 0; i < m_input_listener.size(); i++)
                        m_input_listener[i]->notify_left();
                    break;
                case wt_control_RIGHT:
                    for (size_t i = 0; i < m_input_listener.size(); i++)
                        m_input_listener[i]->notify_right();
                    break;
                case wt_control_QUIT:
                    for (size_t i = 0; i < m_input_listener.size(); i++)
                        m_input_listener[i]->notify_quit();
                    break;
                case wt_control_PAUSE:
                    for (size_t i = 0; i < m_input_listener.size(); i++)
                        m_input_listener[i]->notify_pause();
                    break;
                default:
                    break;
            }
        }
        else
        {
            if ( !ev.is_motion_event )
            {
                // eval button
                for ( size_t i = 0; i < m_active_buttons.size(); i++ )
                {
                    if ( ( ev.pos.x >= m_active_buttons[i].position().x )
                      && ( ev.pos.x < (m_active_buttons[i].position().x + m_active_buttons[i].width()) )
                      && ( ev.pos.y >= m_active_buttons[i].position().y )
                      && ( ev.pos.y < (m_active_buttons[i].position().y + m_active_buttons[i].height()) ) )
                    {
                        for (size_t list_idx = 0; list_idx < m_input_listener.size(); list_idx++)
                        {
                            m_input_listener[list_idx]->notify_button_pressed( m_active_buttons[i].id() );
                        }

                        break;// no button stacking..
                    }
                }
            }
            else
            {
                for (size_t list_idx = 0; list_idx < m_input_listener.size(); list_idx++)
                {
                    m_input_listener[list_idx]->notify_motion( ev.pos, ev.d_pos, ev.is_drag_event );
                }
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 156311 "get_input_help"
	cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return InputPolicy::get_key_map();
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 132887 // m_input_listener (<unidirectional association>)
	relation 132887 --->
	  stereotype "std::vector"
	  a role_name "m_input_listener" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 132887 // m_input_listener (<unidirectional association>)
	  b parent class_ref 130967 // WtInputObserver
      end

      classrelation 133015 // m_active_buttons (<directional composition>)
	relation 133015 *-->
	  stereotype "std::vector"
	  a role_name "m_active_buttons" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 133015 // m_active_buttons (<directional composition>)
	  b parent class_ref 130327 // WtButton
      end
    end

    class 132887 "typedef2"
      visibility package stereotype "typedef" explicit_base_type "InputPolicy"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 133015 "WtL10n"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      class 133143 "LocaleMap"
	visibility package stereotype "typedef" explicit_base_type "std::map< std::string, std::vector<std::string> >"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 156439 "available_languages"
	class_operation cpp_inline public explicit_return_type "std::vector<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n::instance().get_languages();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 156567 "set_language"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "lang_code" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        WtL10n::instance().set_lang( lang_code );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 156695 "get_language_code"
	class_operation cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n::instance().available_languages()[WtL10n::instance().active_language_idx()];
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 156823 "get_next_language_code"
	class_operation cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        std::vector<std::string>& langs = WtL10n::instance().available_languages();
        return langs[(WtL10n::instance().active_language_idx() + 1) % langs.size()];
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 156951 "tr"
	class_operation cpp_inline public explicit_return_type "std::string"
	nparams 1
	  param in name "s" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return s;
    };
"
	
	
	
	
	comment "this function is only used to identify hard coded
localizable strings; wrap a string around and
the macro will find it
***********************"
      end

      operation 157079 "translate"
	class_operation cpp_inline public explicit_return_type "std::string"
	nparams 1
	  param in name "s" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::string result = s;
        if ( ! s.empty() )
        {
            LocaleMap& translations = WtL10n::instance().get_translations();
            LocaleMap::const_iterator it = translations.find(s);

            if ( it != translations.end() )
            {
                result = (*it).second[WtL10n::instance().active_language_idx()];
                if ( result.empty() )
                {
                    result = s;
                }
            }
            else
            {
                result = s;
            }

        }
        return result;
    };
"
	
	
	
	
	comment "this function does the translation
***********************"
      end

      operation 157207 "~WtL10n"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 157335 "instance"
	class_operation cpp_inline private return_type class_ref 133015 // WtL10n
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static WtL10n locale;
        return locale;
    };
"
	
	
	
	
      end

      operation 157463 "WtL10n"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        m_active_language_idx(0)
    {
        m_languages.push_back(WtL10n::tr(\"en\"));
        m_languages.push_back(WtL10n::tr(\"de\"));
        m_languages.push_back(WtL10n::tr(\"fr\"));

        read_translations( m_translations );
    };
"
	
	
	
	
      end

      operation 157591 "active_language_idx"
	cpp_inline private explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_active_language_idx;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 157719 "get_translations"
	cpp_inline private return_type class_ref 133143 // LocaleMap
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_translations;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 157847 "set_lang"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "lang_code" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        for( size_t l_idx = 0; l_idx < m_languages.size(); l_idx++ )
        {
            if ( m_languages[l_idx] == lang_code )
            {
                m_active_language_idx = l_idx;
                break;
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 157975 "get_languages"
	cpp_inline private explicit_return_type "std::vector<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_languages;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 158103 "read_xml"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "tr_tu" explicit_type "std::vector<std::string>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        //TODO wont work; see https://en.wikibooks.org/wiki/OpenGL_Programming/Android_GLUT_Wrapper#Accessing_assets
        std::ifstream file( \"l10n_texts.xml\" );

        if ( file )
        {
            std::stringstream buffer;
            buffer << file.rdbuf();
            file.close();

            // operations on the buffer...
            std::string xml_hdr;
            std::getline( buffer, xml_hdr );
            if ( xml_hdr == \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\" ?>\" )
            {
                std::string root;
                std::getline( buffer, root );
                if ( root == \"<translations>\" )
                {
                    std::string tu;
                    bool tu_started = false;

                    while( !buffer.eof() )
                    {
                        std::string line;
                        std::getline(buffer, line);
//                        std::cout << \"# \" << line << std::endl;
                        trim(line);

                        if ( line == \"<tu>\" )
                            tu_started = true;
                        else if ( line == \"</tu>\" )
                        {
                            tu.append(line);
                            tr_tu.push_back(tu);
                            tu = \"\";
                            tu_started = false;
                        }
                        else
                        {}

                        if ( tu_started )
                            tu.append(line);
                    }
                }
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 158231 "process_tu"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param in name "tu" explicit_type "std::string"
	  param inout name "locale" type class_ref 133143 // LocaleMap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        size_t src_start_pos = tu.find( \"<src>\" ) + std::string(\"<src>\").length();
        size_t src_end_pos = tu.find( \"</src>\" );

        std::string src = tu.substr( src_start_pos, src_end_pos - src_start_pos );
        //std::cout << \">> \" << src << std::endl;

        size_t l_start_pos = src_end_pos + std::string(\"</src>\").length();
        size_t l_end_pos = tu.find( \"</l>\", l_start_pos );
        while ( l_end_pos != std::string::npos )
        {
            std::string l = tu.substr( l_start_pos, l_end_pos - l_start_pos );

            std::string l_code = l.substr( l.find( \"\\\"\")+1, 2 );
            std::string l_text = l.substr( l.find( \">\" )+1 );
          //  std::cout << \">>>  (\" << l_code << \") \"  << l_text << std::endl;

            locale[src].push_back(l_text);

            l_start_pos = l_end_pos + std::string(\"</l>\").length();
            l_end_pos = tu.find( \"</l>\", l_start_pos );
        }
    };
"
	
	
	
	
	comment "<tu><src>you lost! :P</src><l code=\"en\">You lost!</l><l code=\"de\">Du hast verloren!</l><l code=\"fr\">Tu as perdu!</l>
***********************"
      end

      operation 158359 "read_translations"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "locale" type class_ref 133143 // LocaleMap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
#ifdef READ_TEXTS_FROM_XML
        std::vector<std::string> tr_tu;
        read_xml( tr_tu );

        for(size_t i=0;i<tr_tu.size();i++)
        {
           // std::cout << \"> \" << tr_tu[i] << std::endl;

            process_tu( tr_tu[i], locale );
        }
#endif /* READ_TEXTS_FROM_XML */

#ifdef READ_TEXTS_FROM_HEADER
        for(size_t i=0;i<wt_translations.size();i++)
        {
            locale[wt_translations[i].src] = wt_translations[i].texts;
        }
#endif /* READ_TEXTS_FROM_HEADER */        
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 133527 "m_active_language_idx"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 133655 "m_languages"
	private explicit_type "std::string"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 133143 // m_translations (<directional composition>)
	relation 133143 *-->
	  a role_name "m_translations" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 133143 // m_translations (<directional composition>)
	  b parent class_ref 133143 // LocaleMap
      end
    end

    class 133271 "WtTranslationTexts"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 133783 "src"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 133911 "texts"
	public explicit_type "std::string"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 133399 "WtMenuCtr"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 133271 // <generalisation>
	relation 133271 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 133271 // <generalisation>
	  b parent class_ref 131607 // WtMenuIf
      end

      operation 158487 "instance"
	class_operation cpp_inline public return_type class_ref 133399 // WtMenuCtr
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static WtMenuCtr _instance;
        return _instance;
    };
"
	
	
	
	
	comment " singleton definition"
      end

      operation 158615 "~WtMenuCtr"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 158743 "WtMenuCtr"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtMenuIf( 0x100, \"bg_menu_settings.bmp\" ),
        m_drag_start_pos(0,0),
        m_was_drag(false),
        m_drag_button_id(0)
    {
        add_button( WtButton( 1, WtCoord( 170, 193/*493*/ ), WtDim( 200, 200 ), \"start_btn.bmp\" ) );
        add_button( WtButton( 2, WtCoord( 105, 800 ), WtDim( 100, 100 ), \"score_btn.bmp\" ) );
        add_button( WtButton( 3, WtCoord( 332, 800 ), WtDim( 100, 100 ), \"settings_btn.bmp\" ) );

        //add_button( WtButton( 4, WtCoord( 105, 493 ), WtDim( 328, 200 ), \"list_item_active.bmp\" ) );
        
        std::vector<WtGameModeIf*>& available_modes = GAME_MODE_CTR.get_available_modes();
        std::vector< std::pair<uint16_t, std::string> > labeled_ids;
        
        for( size_t idx = 0; idx < available_modes.size(); idx++ )
        {
            labeled_ids.push_back( std::make_pair( (uint16_t)(4+idx), available_modes[idx]->get_title() ) );
        }

        add_horizontal_carousel( labeled_ids,
                                 WtCoord( 0, 493), WtDim( ACTIVE_WINDOW_WIDTH, 200 ),
                                 4 );

        m_settings.listen( m_pause_menu.get_help_listener() );

    };
"
	
	
	
	
      end

      operation 158871 "WtMenuCtr"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 133399 // WtMenuCtr
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 158999 "operator ="
	private return_type class_ref 133399 // WtMenuCtr
	nparams 1
	  param in name "" type class_ref 133399 // WtMenuCtr
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 159127 "get_pause_menu"
	cpp_inline public return_type class_ref 131607 // WtMenuIf
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return &m_pause_menu;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 159255 "listen"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 131095 // WtSettingsChangeObserver
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        WtMenuIf::listen( listener );
        m_settings.listen( listener );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 159383 "notify_button_pressed"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "uint16_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        switch( TO_BUTTON_ID( id ) )
        {
            case 1:
                leave();
                break;
            case 2:
                enter_child_menu( m_scores );
                break;
            case 3:
                enter_child_menu( m_settings );
                break;
            default: 
                /*ignore*/ 
                std::cout << \"unknown button: \" << TO_BUTTON_ID( id ) << std::endl;
                break;
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 159511 "notify_motion"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 3
	  param in name "pos" type class_ref 129815 // WtCoord
	  param in name "d_pos" type class_ref 129815 // WtCoord
	  param in name "is_drag" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        if ( is_drag )
        {
            if ( !m_was_drag )
            {
               // drag started 
               m_drag_start_pos = pos;
               if ( m_drag_start_pos.in_region( WtCoord(0,493), WtDim( ACTIVE_WINDOW_WIDTH, 200 ) )  )
               {
                   m_drag_button_id = 4;
                   std::cout << \"start btn drag = \" << m_drag_button_id << std::endl;
               }
            }


            if ( m_drag_button_id != 0 )
            {
                // move to modify_carousel routine...
                size_t mode_count = GAME_MODE_CTR.get_available_modes().size();
                for (size_t m = 0; m<mode_count; m++)
                {
                    WtButton* drag_btn = get_button(m_drag_button_id+m);
                    if ( drag_btn != NULL )
                    {
                        drag_btn->set_x( drag_btn->x() + d_pos.x );
                        if ( ( drag_btn->x() < 0 ) || ( drag_btn->x()+drag_btn->width() > ACTIVE_WINDOW_WIDTH ) )
                           drag_btn->set_image(\"list_item_inactive.bmp\"); 
                        else
                           drag_btn->set_image(\"list_item_active.bmp\"); 
                    }

//                    std::cout << \"continue btn drag: \"<< m_drag_button_id<< \"@\" << drag_btn->x() << std::endl;
                }


            }

            m_was_drag = true;
        }
        else
        {
            if ( m_was_drag )
            {
               // drag stopped
                
            }
            m_was_drag = false;
            m_drag_button_id = 0;
        }

     /*   std::cout << (is_drag ? \"drag\" : \"motion\") << \" at: \" << 
                        \"(\" << (int)pos.x << \",\" << (int)pos.y << \");\"
                        \"(\" << (int)d_pos.x << \",\" << (int)d_pos.y << \");\"
                    << std::endl;*/
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 133399 // m_drag_start_pos (<directional composition>)
	relation 133399 *-->
	  a role_name "m_drag_start_pos" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 133399 // m_drag_start_pos (<directional composition>)
	  b parent class_ref 129815 // WtCoord
      end

      attribute 134039 "m_was_drag"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 134167 "m_drag_button_id"
	private explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 133527 // m_settings (<directional composition>)
	relation 133527 *-->
	  a role_name "m_settings" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 133527 // m_settings (<directional composition>)
	  b parent class_ref 133527 // WtMenuSettings
      end

      classrelation 133655 // m_pause_menu (<directional composition>)
	relation 133655 *-->
	  a role_name "m_pause_menu" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 133655 // m_pause_menu (<directional composition>)
	  b parent class_ref 133655 // WtMenuPause
      end

      classrelation 133783 // m_scores (<directional composition>)
	relation 133783 *-->
	  a role_name "m_scores" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 133783 // m_scores (<directional composition>)
	  b parent class_ref 133783 // WtMenuHighscores
      end
    end

    class 133527 "WtMenuSettings"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 135191 // <generalisation>
	relation 135191 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135191 // <generalisation>
	  b parent class_ref 131607 // WtMenuIf
      end

      operation 165911 "WtMenuSettings"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtMenuIf( 0x300, \"bg_menu_settings.bmp\" ),
        m_current_diff(0)
    {
        size_t offset_x = (ACTIVE_WINDOW_WIDTH - 328) / 2;
        size_t offset_y = (ACTIVE_WINDOW_HEIGHT / 2) - (ACTIVE_WINDOW_HEIGHT / 4);

        add_button( WtButton( 1, WtCoord( offset_x, offset_y ), WtDim(328, 69), \"menu_btn.bmp\", WtL10n::tr(\"select game mode\") ) );
        add_button( WtButton( 2, WtCoord( 105, 800 ), WtDim(100, 100), \"back_btn.bmp\" ) );

        {
                std::vector< std::pair<uint16_t, std::string> > labeled_ids = {
                        std::make_pair( 3, WtL10n::available_languages()[0] ),
                        std::make_pair( 4, WtL10n::available_languages()[1] ),
                        std::make_pair( 5, WtL10n::available_languages()[2] ),
                };

                size_t selected_id = 0;
                for ( size_t idx = 0; idx < WtL10n::available_languages().size(); idx++ )
                {
                    if ( labeled_ids[idx].second == WtL10n::get_language_code() )
                    {
                        selected_id = labeled_ids[idx].first;
                        break;
                    }
                }

                add_radio_group_button( labeled_ids,
                                        WtCoord( offset_x, offset_y + 69 + 20 ),
                                        WtDim( 328, 69 ),
                                        selected_id );
        }

        {
                std::vector< std::pair<uint16_t, std::string> > labeled_ids = {
                        std::make_pair( 6, WtGameModeIf::get_available_difficulties()[0].second ),
                        std::make_pair( 7, WtGameModeIf::get_available_difficulties()[1].second ),
                        std::make_pair( 8, WtGameModeIf::get_available_difficulties()[2].second ),
                };

                size_t selected_id = 0;
                switch( STORAGE.get_settings().difficulty )
                {
                    default: break;
                    case wt_difficulty_EASY:   selected_id = 0; break;
                    case wt_difficulty_MEDIUM: selected_id = 1; break;
                    case wt_difficulty_HARD:   selected_id = 2; break;
                }
                m_current_diff = selected_id;

                add_radio_group_button( labeled_ids,
                                        WtCoord( offset_x, offset_y + (69 + 20)*2 ),
                                        WtDim( 328, 69 ),
                                        labeled_ids[selected_id].first );
        }

        {
                size_t selected_id = 9;
                m_themes = {
                        std::make_pair( 9, \"light\" ),
                        std::make_pair( 10, \"dark\" ),
                        std::make_pair( 11, \"mono\" ),
                };
                if ( STORAGE.get_settings().active_theme != \"default\" )
                {
                    for ( size_t l_idx = 0; l_idx < m_themes.size(); l_idx++ )
                    {
                        if ( m_themes[l_idx].second == STORAGE.get_settings().active_theme )
                        {
                            selected_id = m_themes[l_idx].first;
                            break;
                        }
                    }
                }
                add_radio_group_button( m_themes,
                                        WtCoord( offset_x, offset_y + (69 + 20)*3 ),
                                        WtDim( 328, 69 ),
                                        selected_id );
        }

    };
"
	
	
	
	
      end

      operation 166039 "~WtMenuSettings"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 166167 "WtMenuSettings"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 133527 // WtMenuSettings
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " no copy allowed"
      end

      operation 166295 "operator ="
	private return_type class_ref 133527 // WtMenuSettings
	nparams 1
	  param in name "" type class_ref 133527 // WtMenuSettings
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 166423 "listen"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 131095 // WtSettingsChangeObserver
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        WtMenuIf::listen( listener );
        m_select_mode.listen( listener );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 166551 "notify_button_pressed"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "uint16_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        size_t old_diff = m_current_diff;
        bool language_changed = false;
        bool theme_changed = false;
        size_t theme_idx = 0;

        std::cout << \"button pressed = \" << id << std::endl;

        switch( TO_BUTTON_ID( id ) )
        {
            case 3:
            case 4:
            case 5:
                {
                    size_t lang_idx = TO_BUTTON_ID(id)-3;
                    if ( WtL10n::get_language_code() != WtL10n::available_languages()[lang_idx] )
                    {
                        WtL10n::set_language( WtL10n::available_languages()[lang_idx] );
                        language_changed = true;

                        modify_radio_group_button( 3, 3, TO_BUTTON_ID(id) );
                    }
                }
                break;
            case 6:
            case 7:
            case 8:
                {
                    size_t diff_idx = TO_BUTTON_ID(id)-6;
                    if ( STORAGE.get_settings().difficulty != WtGameModeIf::get_available_difficulties()[diff_idx].first )
                    {
                        m_current_diff = diff_idx;
                        modify_radio_group_button( 6, 3, TO_BUTTON_ID(id) );
                    }
                }
                break;
            case 9:
            case 10:
            case 11:
                {
                    theme_idx = TO_BUTTON_ID(id)-9;
                    
                    if ( STORAGE.get_settings().active_theme != m_themes[theme_idx].second )
                        theme_changed = true;

                    modify_radio_group_button( 9, m_themes.size(), TO_BUTTON_ID(id) );
                }
                break;
                break;
            case 1:
                enter_child_menu( m_select_mode );
                break;
            case 2:
                leave();
                break;
            default: /*ignore*/ break;
        }

        for( size_t idx = 0; idx < get_listener().size(); idx++ )
        {
            if ( old_diff != m_current_diff )
                get_listener()[idx]->notify_difficulty_changed( WtGameModeIf::get_available_difficulties()[m_current_diff].first );
            if ( language_changed )
                get_listener()[idx]->notify_language_changed( WtL10n::get_language_code() );
            if ( theme_changed )
                get_listener()[idx]->notify_theme_changed( m_themes[theme_idx].second );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 135191 "m_current_diff"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 135319 // m_select_mode (<directional composition>)
	relation 135319 *-->
	  a role_name "m_select_mode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 135319 // m_select_mode (<directional composition>)
	  b parent class_ref 133911 // WtMenuSelectMode
      end

      attribute 135319 "m_themes"
	private explicit_type " std::pair<uint16_t, std::string> "
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 133655 "WtMenuPause"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 134935 // <generalisation>
	relation 134935 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 134935 // <generalisation>
	  b parent class_ref 131607 // WtMenuIf
      end

      operation 165143 "WtMenuPause"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtMenuIf( 0x200, \"bg_menu_pause.bmp\", false )
    {
        size_t offset_x = (ACTIVE_WINDOW_WIDTH) / 2;
        size_t offset_y = (ACTIVE_WINDOW_HEIGHT / 2);

        add_button( WtButton( 1, WtCoord(offset_x - 158, offset_y-100), WtDim(100, 100), \"back_btn.bmp\" ) );
        add_button( WtButton( 2, WtCoord(offset_x + 58, offset_y-100), WtDim(100, 100), \"redo_btn.bmp\" ) );
        add_button( WtButton( 3, WtCoord(offset_x + 58, offset_y+100), WtDim(100, 100), \"quit_btn.bmp\" ) );
        add_button( WtButton( 4, WtCoord(offset_x - 158, offset_y+100), WtDim(100, 100), \"help_btn.bmp\" ) );
    };
"
	
	
	
	
      end

      operation 165271 "~WtMenuPause"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 165399 "WtMenuPause"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 133655 // WtMenuPause
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " no copy allowed"
      end

      operation 165527 "operator ="
	private return_type class_ref 133655 // WtMenuPause
	nparams 1
	  param in name "" type class_ref 133655 // WtMenuPause
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 165655 "notify_button_pressed"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "uint16_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        switch( TO_BUTTON_ID( id ) )
        {
            case 1:
                leave();
                break;
            case 2:
                GAME_CTR.restart();
                leave();
                break;
            case 3:
                GAME_CTR.quit();
                leave();
                break;
            case 4:
                enter_child_menu( m_help );
                break;
            default: break;
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 165783 "get_help_listener"
	cpp_virtual cpp_inline public return_type class_ref 131095 // WtSettingsChangeObserver
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return &m_help;
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 135063 // m_help (<directional composition>)
	relation 135063 *-->
	  a role_name "m_help" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 135063 // m_help (<directional composition>)
	  b parent class_ref 134039 // WtMenuHelp
      end
    end

    class 133783 "WtMenuHighscores"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 134423 // <generalisation>
	relation 134423 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 134423 // <generalisation>
	  b parent class_ref 131607 // WtMenuIf
      end

      operation 161559 "WtMenuHighscores"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtMenuIf( 0x400, \"bg_menu_settings.bmp\" )
    {
        add_button( WtButton( 1, WtCoord( 105, 800 ), WtDim(100, 100), \"back_btn.bmp\" ) );
    };
"
	
	
	
	
      end

      operation 161687 "~WtMenuHighscores"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 161815 "WtMenuHighscores"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 133783 // WtMenuHighscores
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " no copy allowed"
      end

      operation 161943 "operator ="
	private return_type class_ref 133783 // WtMenuHighscores
	nparams 1
	  param in name "" type class_ref 133783 // WtMenuHighscores
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 162071 "notify_button_pressed"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "uint16_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        switch( TO_BUTTON_ID( id ) )
        {
            case 1: leave(); break;
            default: break;
        }
    };
"
	
	
	
	
	comment "
***********************"
      end
    end

    class 133911 "WtMenuSelectMode"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 133911 // <generalisation>
	relation 133911 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 133911 // <generalisation>
	  b parent class_ref 131607 // WtMenuIf
      end

      operation 159639 "WtMenuSelectMode"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtMenuIf( 0x200, \"bg_menu_settings.bmp\" )
    {
        size_t offset_x = (ACTIVE_WINDOW_WIDTH - 328) / 2;
        size_t offset_y = (ACTIVE_WINDOW_HEIGHT / 2) - (ACTIVE_WINDOW_HEIGHT / 4 );

        std::vector<WtGameModeIf*>& available_modes = GAME_MODE_CTR.get_available_modes();

        size_t idx = 0;
        std::vector<std::string> modes;

        for( idx = 0; idx < available_modes.size(); idx++ )
        {
            modes.push_back( available_modes[idx]->get_title() );
        }

        add_list( WtCoord( offset_x, offset_y ),
                  WtDim( 328, 69 ),
                  \"menu_btn.bmp\",
                  modes );

        add_button( WtButton( idx, WtCoord( 105, 800 ), WtDim(100, 100), \"back_btn.bmp\" ) );
    };
"
	
	
	
	
      end

      operation 159767 "~WtMenuSelectMode"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 159895 "WtMenuSelectMode"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 133911 // WtMenuSelectMode
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " no copy allowed"
      end

      operation 160023 "operator ="
	private return_type class_ref 133911 // WtMenuSelectMode
	nparams 1
	  param in name "" type class_ref 133911 // WtMenuSelectMode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 160151 "notify_button_pressed"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "uint16_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        uint8_t real_id = TO_BUTTON_ID( id );

        std::vector<WtGameModeIf*>& available_modes = GAME_MODE_CTR.get_available_modes();
        
        if ( real_id < available_modes.size() )
        {
            for( size_t idx = 0; idx < get_listener().size(); idx++ )
            {
                get_listener()[idx]->notify_game_mode_changed( available_modes[real_id] );
            }
        }

        leave();
    };
"
	
	
	
	
	comment "
***********************"
      end
    end

    class 134039 "WtMenuHelp"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 134039 // <generalisation>
	relation 134039 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 134039 // <generalisation>
	  b parent class_ref 131607 // WtMenuIf
      end

      classrelation 134167 // <generalisation>
	relation 134167 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 134167 // <generalisation>
	  b parent class_ref 131095 // WtSettingsChangeObserver
      end

      operation 160279 "WtMenuHelp"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtMenuIf( 0x500, \"bg_menu_pause.bmp\", false ),
        m_selected_mode( GAME_MODE_CTR.mode_from_string( STORAGE.get_settings().game_mode ) )
    {
        add_button( WtButton( 1, WtCoord( 105, 800 ), WtDim(100, 100), \"back_btn.bmp\" ) );
    };
"
	
	
	
	
      end

      operation 160407 "~WtMenuHelp"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 160535 "WtMenuHelp"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 134039 // WtMenuHelp
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " no copy allowed"
      end

      operation 160663 "operator ="
	private return_type class_ref 134039 // WtMenuHelp
	nparams 1
	  param in name "" type class_ref 134039 // WtMenuHelp
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 160791 "notify_button_pressed"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "uint16_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        switch( TO_BUTTON_ID( id ) )
        {
            case 1:
                leave();
                break;
                default: break;
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 160919 "notify_language_changed"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
	comment "
***********************"
      end

      operation 161047 "notify_difficulty_changed"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "" type class_ref 131351 // wt_difficulty
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
	comment "
***********************"
      end

      operation 161175 "notify_theme_changed"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
	comment "
***********************"
      end

      operation 161303 "notify_game_mode_changed"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "mode" type class_ref 131223 // WtGameModeIf
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_selected_mode = mode;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 161431 "menu_update"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( m_selected_mode != INVALID_GAME_MODE )
        {
            ACTIVE_WINDOW.draw_help_box( m_selected_mode->get_help() );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 134295 // m_selected_mode (<unidirectional association>)
	relation 134295 --->
	  a role_name "m_selected_mode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 134295 // m_selected_mode (<unidirectional association>)
	  b parent class_ref 131223 // WtGameModeIf
      end
    end

    class 134167 "WtRandom"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 168215 "get_random_from_sequence"
	class_operation cpp_inline public explicit_return_type "size_t"
	nparams 1
	  param inout name "seq" explicit_type "std::vector<size_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        char result = 0;
        uint8_t buf;
        if ( WtRandom::getrandom( &buf, 1 ) <= 1 )
        {
            result = seq[(buf % seq.size() )];
        }
        return result;
    };
"
	
	
	
	
	comment "
***************************************************************************"
      end

      operation 168343 "get_random_letter_of_weight_seq"
	class_operation cpp_inline public explicit_return_type "char"
	nparams 2
	  param in name "word" explicit_type "std::string"
	  param in name "dist" explicit_type "std::discrete_distribution<int>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        char result = '\\0';
        unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
        std::default_random_engine generator(seed);
        int random = dist( generator );

        result = word[(random % word.length())];

/*
        size_t max_weight = (word.length()+1) * (word.length()/2);

        ssize_t buf;
        if ( WtRandom::getrandom( (uint8_t*)&buf, sizeof(size_t) ) <= (ssize_t)sizeof(size_t) )
        {
            buf = (buf % max_weight);
            uint8_t i;
            for ( i = 0; i < word.length(); i++ )
            {
                buf = buf - (word.length() - i);
                if ( buf <= 0 )
                {
                    result = word.at(i);
                    break;
                }
            }
        }
*/
        return result;
    };
"
	
	
	
	
	comment "
***************************************************************************"
      end

      operation 168471 "get_random_letter_of_word"
	class_operation cpp_inline public explicit_return_type "char"
	nparams 1
	  param in name "word" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        char result = 0;
        uint8_t buf;
        if ( WtRandom::getrandom( &buf, 1 ) <= 1 )
        {
            result = word[(buf % word.length() )];
        }
        return result;
    };
"
	
	
	
	
	comment "
***************************************************************************"
      end

      operation 168599 "get_next_random_letter"
	class_operation cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
//      return get_weighted_random_letter();
        return get_purely_random_letter();
    };
"
	
	
	
	
	comment "
***************************************************************************"
      end

      operation 168727 "roll_dice"
	class_operation cpp_inline public explicit_return_type "uint8_t"
	nparams 1
	  param in name "dice" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        uint8_t result = 0;
        uint8_t buf;
        if ( WtRandom::getrandom( &buf, 1 ) == 1 )
        {
            result = 1+(buf % dice);
        }
        return result;
    };
"
	
	
	
	
	comment "
***************************************************************************"
      end

      operation 168855 "get_weighted_random_letter"
	class_operation cpp_inline private explicit_return_type "char"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        const char letters[LETTER_COUNT] = 
                     { 'e','t','a','o','i','n','s','r','h','d','l','u','c',
                       'm','f','y','w','g','p','b','v','k','x','q','j','z' };
        char result = 0;
        int16_t buf;
        if ( WtRandom::getrandom( (uint8_t*)&buf, 2 ) <= 2 )
        {
            buf = (buf % MAX_WEIGHT);
            uint8_t i;
            for ( i = 0; i < LETTER_COUNT; i++ )
            {
                buf = buf - (LETTER_COUNT - i);
                if ( buf <= 0 )
                {
                    result = letters[i];
                    break;
                }
            }
        }
        return result;
    };
"
	
	
	
	
	comment "
***************************************************************************"
      end

      operation 168983 "get_purely_random_letter"
	class_operation cpp_inline private explicit_return_type "char"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        char result = 0;
        uint8_t buf;
        if ( WtRandom::getrandom( &buf, 1 ) <= 1 )
        {
            result = (char)((uint8_t)'a' + (buf % ((uint8_t)'z' - (uint8_t)'a') ) );
        }
        return result;
    };
"
	
	
	
	
	comment "
***************************************************************************"
      end

      operation 169111 "getrandom"
	class_operation cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param inout name "buf" explicit_type "uint8_t"
	  param in name "read" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        struct timespec time;

        clock_gettime(CLOCK_MONOTONIC, &time);
        srand( time.tv_nsec );
        for ( size_t i=0; i<read; i++ )
            buf[i] = rand();
        return read;
    };
"
	
	
	
	
	comment "this wrapper may solve some issues on some systems...
***************************************************************************"
      end
    end

    class 134295 "WtDrawingPolicySdl"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 135447 // <generalisation>
	relation 135447 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 135447 // <generalisation>
	  b parent class_ref 129431 // WtDrawingPolicyIf
      end

      attribute 135831 "TEXT_FONT_SIZE"
	class_attribute const_attribute private explicit_type "uint8_t"
	init_value "=  12"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 135959 "GRID_FONT_SIZE"
	class_attribute const_attribute private explicit_type "uint8_t"
	init_value "=  37"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 136087 "GRID_OFFSET_X"
	class_attribute const_attribute private explicit_type "uint8_t"
	init_value "=  78"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 136215 "GRID_OFFSET_Y"
	class_attribute const_attribute private explicit_type "uint8_t"
	init_value "=  127-GRID_FONT_SIZE"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 134423 "SDL_TextureCache"
	visibility package stereotype "typedef" explicit_base_type "std::map<std::string, SDL_Texture*>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 169239 "WtDrawingPolicySdl"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        m_window( 0 ),
        m_renderer( 0 ),
        m_theme(\"default\")
    {
        if (SDL_Init(SDL_INIT_VIDEO)) {
            std::cerr << \"Failed to initialize SDL: \" << SDL_GetError() << std::endl;
            exit(-1);
        }
        if (SDL_CreateWindowAndRenderer(SDL_WIDTH, SDL_HEIGHT, SDL_WINDOW_SHOWN | SDL_WINDOW_INPUT_FOCUS, &m_window, &m_renderer)) {
            std::cerr << \"Failed to create window and renderer: \" << SDL_GetError() << std::endl;
            exit(-1);
        }

        SDL_RenderSetLogicalSize(m_renderer, SDL_WIDTH, SDL_HEIGHT);
        SDL_SetRenderDrawColor(m_renderer, 0, 0, 0, 255);
        SDL_SetRenderDrawBlendMode(m_renderer, SDL_BLENDMODE_BLEND);
        /*
        TTF_Init();
        m_font = TTF_OpenFont(\"assets/DejaVuSansMono.ttf\", 30);
        */
        set_bg(\"bg.bmp\");

        m_grid_font = new WtSdlFont( \"grid\", GRID_FONT_SIZE, GRID_FONT_SIZE, \"grid_font.bmp\", m_theme, m_renderer );
        m_grid_font_inverse = new WtSdlFont( \"grid_inverse\", GRID_FONT_SIZE, GRID_FONT_SIZE, \"grid_font_inverse.bmp\", m_theme, m_renderer );
        m_text_font = new WtSdlFont( \"text\", TEXT_FONT_SIZE, TEXT_FONT_SIZE*2, \"text_font.bmp\", m_theme, m_renderer );

    };
"
	
	
	
	
	comment " policy use only"
      end

      operation 169367 "~WtDrawingPolicySdl"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
        delete m_grid_font;
        delete m_text_font;

        clear_texture_cache();

        SDL_DestroyRenderer(m_renderer);
        SDL_DestroyWindow(m_window);
        SDL_Quit();
    };
"
	
	
	
	
      end

      operation 169495 "clr"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        // clear canvas and init with background image
        SDL_RenderClear(m_renderer);

        // draw bg
        draw_image( WtCoord( 0, 0 ),
                    WtDim( SDL_WIDTH, SDL_HEIGHT ),
                    m_bg_img_path );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 169623 "set_theme"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        // todo base class themeable
        m_grid_font->set_theme( name, m_renderer );
        m_text_font->set_theme( name, m_renderer );
        m_theme = name;
        // TODO check if available and if not keep old
        
        clear_texture_cache();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 169751 "draw_at_grid"
	cpp_inline public explicit_return_type "void"
	nparams 5
	  param in name "row" explicit_type "uint8_t"
	  param in name "column" explicit_type "uint8_t"
	  param in name "horizontal" explicit_type "bool"
	  param in name "text" explicit_type "std::string"
	  param in name "font" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        for ( size_t i = 0; i < text.size(); i++ )
        {
            if ( horizontal )
                put_cell_custom( (column+i)%WtBoard::col_count,
                                 row,
                                 text[i], 
                                 ( font == \"grid_inverse\" ? m_grid_font_inverse : m_grid_font ) );
            else
                put_cell_custom( column,
                                 (row-i)%WtBoard::row_count, 
                                 text[(text.length()-1)-i], 
                                 ( font == \"grid_inverse\" ? m_grid_font_inverse : m_grid_font ) );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 169879 "draw_board"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "board" type class_ref 129687 // WtBoard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        for( uint8_t i=0 ; i < WtBoard::row_count; i++ )
            for( uint8_t j=0; j < WtBoard::col_count; j++ )
            {
                char cell = board.get_cell( i, j );
                if ( cell != '\\0' )
                    put_cell( j, ((WtBoard::row_count-i)), cell );
            }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 170007 "draw_active_letter"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "active" type class_ref 128791 // WtLetter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        put_cell( active.current_column(), 
                  WtBoard::row_count - active.current_row(), 
                  active.current_value() );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 170135 "update"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        SDL_RenderPresent(m_renderer);
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 170263 "set_bg"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "bg_img" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_bg_img_path = bg_img;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 170391 "draw_text"
	cpp_inline protected explicit_return_type "void"
	nparams 2
	  param in name "pos" type class_ref 129815 // WtCoord
	  param in name "text" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        puts_fb( pos.x, pos.y, text.c_str(), m_text_font );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 170519 "get_font_size"
	cpp_inline protected return_type class_ref 129559 // WtDim
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtDim( m_text_font->width(), m_text_font->height() );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 170647 "draw_image"
	cpp_inline protected explicit_return_type "void"
	nparams 3
	  param in name "pos" type class_ref 129815 // WtCoord
	  param in name "size" type class_ref 129559 // WtDim
	  param in name "fname" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, const ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SDL_Texture*  button_img = get_texture( fname );
        SDL_Rect rect;
        rect.x = pos.x;
        rect.y = pos.y;
        rect.w = size.w;
        rect.h = size.h;
        SDL_RenderCopy(m_renderer, button_img, NULL, &rect);
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 170775 "WtDrawingPolicySdl"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 134295 // WtDrawingPolicySdl
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 170903 "operator ="
	private return_type class_ref 134295 // WtDrawingPolicySdl
	nparams 1
	  param in name "" type class_ref 134295 // WtDrawingPolicySdl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 171031 "puts_fb"
	cpp_inline private explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "size_t"
	  param in name "y" explicit_type "size_t"
	  param in name "str" explicit_type "char"
	  param inout name "font" type class_ref 134551 // WtSdlFont
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        if ( ( NULL != str ) && ( NULL != font ) )
        {
            // loop through all characters in the text string
            size_t l = strlen(str);
            size_t x_i = 0;
            WtCoord pos( x, y );
            for (size_t i = 0; i < l; i++) {
                pos.x = x+x_i*font->width();
                if (str[i] == '\\n')
                {
                    x_i = 0;
                    pos.x = x;
                    pos.y += font->height()+font->height()/2;
                }
                else
                {
                    font->write( pos, str[i], m_renderer );
                    x_i++;
                }
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 171159 "put_cell_custom"
	cpp_inline private explicit_return_type "void"
	nparams 4
	  param in name "col" explicit_type "size_t"
	  param in name "row" explicit_type "size_t"
	  param in name "ch" explicit_type "char"
	  param inout name "font" type class_ref 134551 // WtSdlFont
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        size_t x = (col*font->width())+col+GRID_OFFSET_X;
        size_t y = ((row*font->height())+row)+GRID_OFFSET_Y;

        font->write( WtCoord(x, y), ch, m_renderer );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 171287 "put_cell"
	cpp_inline private explicit_return_type "void"
	nparams 3
	  param in name "col" explicit_type "size_t"
	  param in name "row" explicit_type "size_t"
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        put_cell_custom( col, row, ch, m_grid_font );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 171415 "get_texture"
	cpp_inline private explicit_return_type "SDL_Texture"
	nparams 1
	  param in name "fname" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        SDL_Texture* tex = NULL;
        SDL_TextureCache::const_iterator it = m_texture_cache.find(fname);
        if ( it != m_texture_cache.end() )
        {
            // load from cache
            tex = (*it).second;
        }
        else
        {
            // load from file
            // insert into cache
            if ( fname.empty() )
            {
                tex = SDL_CreateTexture( m_renderer,
                                         SDL_PIXELFORMAT_RGBA8888, 
                                         SDL_TEXTUREACCESS_TARGET, 
                                         1, 1 );
                SDL_SetRenderTarget( m_renderer, tex );
                SDL_SetRenderDrawBlendMode( m_renderer, SDL_BLENDMODE_NONE );
                SDL_SetRenderDrawColor( m_renderer, 255, 0, 255, 0 );
                SDL_RenderFillRect( m_renderer, NULL );
                SDL_SetRenderTarget( m_renderer, NULL );

                m_texture_cache[fname] = tex;
            }
            else
            {
                std::cout << \"load from file.. \" << fname << std::endl;
                m_texture_cache[fname] = WtSdlUtils::loadAssetToTexture( m_renderer, fname, m_theme );

                tex = m_texture_cache[fname];
            }
        }
        return tex;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 171543 "clear_texture_cache"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        SDL_TextureCache::iterator it;
        for ( it = m_texture_cache.begin(); it != m_texture_cache.end(); it++ )
        {
            if ( NULL != it->second ) {
                SDL_DestroyTexture( it->second );
                it->second = NULL;
            }
        }
        m_texture_cache.clear();
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 136343 "m_window"
	private explicit_type "SDL_Window"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 136471 "m_renderer"
	private explicit_type "SDL_Renderer"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 136599 "m_bg_img_path"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "TTF_Font*     m_font;
"
      end

      attribute 136727 "m_theme"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 135575 // m_grid_font (<unidirectional association>)
	relation 135575 --->
	  a role_name "m_grid_font" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 135575 // m_grid_font (<unidirectional association>)
	  b parent class_ref 134551 // WtSdlFont
      end

      classrelation 135703 // m_grid_font_inverse (<unidirectional association>)
	relation 135703 --->
	  a role_name "m_grid_font_inverse" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 135703 // m_grid_font_inverse (<unidirectional association>)
	  b parent class_ref 134551 // WtSdlFont
      end

      classrelation 135831 // m_text_font (<unidirectional association>)
	relation 135831 --->
	  a role_name "m_text_font" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 135831 // m_text_font (<unidirectional association>)
	  b parent class_ref 134551 // WtSdlFont
      end

      classrelation 135959 // m_texture_cache (<directional composition>)
	relation 135959 *-->
	  a role_name "m_texture_cache" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 135959 // m_texture_cache (<directional composition>)
	  b parent class_ref 134423 // SDL_TextureCache
      end
    end

    class 134551 "WtSdlFont"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 171671 "WtSdlFont"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        m_name(\"\"),
        m_font_w(0),
        m_font_h(0),
        m_font_data()
    {
    };
"
	
	
	
	
      end

      operation 171799 "WtSdlFont"
	cpp_inline public explicit_return_type ""
	nparams 6
	  param in name "name" explicit_type "std::string"
	  param in name "w" explicit_type "size_t"
	  param in name "h" explicit_type "size_t"
	  param in name "filename" explicit_type "std::string"
	  param in name "theme" explicit_type "std::string"
	  param inout name "renderer" explicit_type "SDL_Renderer"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} * ${p5}${v5}${)}${volatile}${throw}${abstract} :
        m_name( name ),
        m_font_w( w ),
        m_font_h( h ),
        m_fname( filename )
    {
        load_font_data( filename, theme, renderer );
    };
"
	
	
	
	
      end

      operation 171927 "~WtSdlFont"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
        for(size_t i = 0; i < m_font_data.size(); i++)
            SDL_DestroyTexture(m_font_data[i]);
    };
"
	
	
	
	
      end

      operation 172055 "load_font_data"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "filename" explicit_type "std::string"
	  param in name "theme" explicit_type "std::string"
	  param inout name "renderer" explicit_type "SDL_Renderer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        std::cout << \"load font data = \"<<filename<<std::endl;
        if ( m_font_data.size() > 0 )
        {
            for(size_t i = 0; i < m_font_data.size(); i++)
                SDL_DestroyTexture( m_font_data[i] );
            m_font_data.clear();
        }

        SDL_Texture* font_complete = WtSdlUtils::loadAssetToTexture( renderer, filename, theme );
        // fonts are organized by ascii code...
        for(char i = ' '; i < '~'; i++ )
        {
            m_font_data.push_back( get_letter_texture( font_complete, i, renderer ) );
        }
        SDL_DestroyTexture(font_complete);
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 172183 "set_theme"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param inout name "renderer" explicit_type "SDL_Renderer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        load_font_data( m_fname, name, renderer );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 172311 "width"
	cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_font_w;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 172439 "height"
	cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_font_w;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 172567 "write"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "pos" type class_ref 129815 // WtCoord
	  param in name "ch" explicit_type "char"
	  param inout name "renderer" explicit_type "SDL_Renderer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SDL_Rect small;
        small.x = pos.x;
        small.y = pos.y;
        small.w = m_font_w;
        small.h = m_font_h;

        SDL_RenderCopy(renderer, m_font_data[(ch - 0x20)], NULL, &small );        
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 172695 "GetAreaTexture"
	cpp_inline private explicit_return_type "SDL_Texture"
	nparams 3
	  param in name "rect" explicit_type "SDL_Rect"
	  param inout name "renderer" explicit_type "SDL_Renderer"
	  param inout name "source" explicit_type "SDL_Texture"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SDL_Texture* result = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_RGBA8888, SDL_TEXTUREACCESS_TARGET, rect.w, rect.h);
        SDL_SetTextureBlendMode(result, SDL_BLENDMODE_BLEND);
        SDL_SetRenderTarget(renderer, result);
        SDL_SetRenderDrawColor(renderer, 128, 128, 128, 0);
//TODO font color        SDL_SetTextureColorMod(result, 0, 255, 255 );
        SDL_RenderClear(renderer);
        SDL_RenderCopy(renderer, source, &rect, NULL);
        // the folowing line should reset the target to default(the screen)
        SDL_SetRenderTarget(renderer, NULL);

        return result;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 172823 "get_letter_texture"
	cpp_inline private explicit_return_type "SDL_Texture"
	nparams 3
	  param inout name "t_letters" explicit_type "SDL_Texture"
	  param in name "letter" explicit_type "char"
	  param inout name "renderer" explicit_type "SDL_Renderer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SDL_Rect letter_rect;
        letter_rect.x = (letter - 0x20) * m_font_w;
        letter_rect.y = 0;
        letter_rect.w = m_font_w;
        letter_rect.h = m_font_h;
        return GetAreaTexture( letter_rect, renderer, t_letters );
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 136855 "m_name"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 136983 "m_font_w"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 137111 "m_font_h"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 137239 "m_fname"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 137367 "m_font_data"
	private explicit_type "SDL_Texture*"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 134679 "WtInputPolicySdl"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 136087 // <generalisation>
	relation 136087 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 136087 // <generalisation>
	  b parent class_ref 129943 // WtInputPolicyIf
      end

      operation 172951 "WtInputPolicySdl"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        m_press_detected( false )
    {
    };
"
	
	
	
	
      end

      operation 173079 "~WtInputPolicySdl"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 173207 "read_input"
	cpp_inline protected return_type class_ref 130071 // WtInputEvent
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        WtInputEvent event;

        SDL_Event sdl_event;
        if (SDL_PollEvent(&sdl_event))
        {
            switch (sdl_event.type)
            {
                case SDL_QUIT:
                    event.is_key_event = true;
                    event.key = wt_control_QUIT;
                    break;
                case SDL_KEYDOWN:
                    event.is_key_event = true;
                    if ('a'==sdl_event.key.keysym.sym) event.key = wt_control_LEFT;
                    if ('d'==sdl_event.key.keysym.sym) event.key = wt_control_RIGHT;
                    if ('s'==sdl_event.key.keysym.sym) event.key = wt_control_DROP;
                    if ('p'==sdl_event.key.keysym.sym) event.key = wt_control_PAUSE;
                    if ('q'==sdl_event.key.keysym.sym) event.key = wt_control_QUIT;
                    if (SDLK_AC_BACK == sdl_event.key.keysym.sym) event.key = wt_control_QUIT;
                    break;
                case SDL_FINGERDOWN:
                    m_press_detected = true;
                    break;
                case SDL_FINGERUP:
                    m_press_detected = false;

                    event.is_key_event = false;
                    event.pos.x = sdl_event.tfinger.x;
                    event.pos.y = sdl_event.tfinger.y;
                    break;
                case SDL_MOUSEBUTTONUP:
                    m_press_detected = false;

                    event.is_key_event = false;
                    event.pos.x = sdl_event.button.x;
                    event.pos.y = sdl_event.button.y;
                    break;
                case SDL_MOUSEMOTION:
                    event.is_key_event = false;
                    event.is_motion_event = true;
                    event.is_drag_event = m_press_detected;
                    event.pos.x = sdl_event.motion.x;
                    event.pos.y = sdl_event.motion.y;
                    event.d_pos.x = sdl_event.motion.xrel;
                    event.d_pos.y = sdl_event.motion.yrel;
                    break;
                case SDL_FINGERMOTION:
                    event.is_key_event = false;
                    event.is_motion_event = true;
                    event.is_drag_event = m_press_detected;
                    event.pos.x = sdl_event.tfinger.x;
                    event.pos.y = sdl_event.tfinger.y;
                    event.d_pos.x = sdl_event.tfinger.dx;
                    event.d_pos.y = sdl_event.tfinger.dy;
                    break;
                case SDL_MOUSEBUTTONDOWN:
                    m_press_detected = true;
                    break;
                default: 
                    SDL_PumpEvents();
                    SDL_FlushEvent( SDL_FINGERDOWN );
                    SDL_FlushEvent( SDL_FINGERUP );
                    SDL_FlushEvent( SDL_FINGERMOTION );
                    break;
            }
        }
        return event;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 173335 "get_key_map"
	cpp_inline protected explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return std::string(\"a - LEFT\\nd - RIGHT\\ns - DROP\\np - PAUSE\\nq - QUIT\\n\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 173463 "WtInputPolicySdl"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 134679 // WtInputPolicySdl
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 173591 "operator ="
	private return_type class_ref 134679 // WtInputPolicySdl
	nparams 1
	  param in name "" type class_ref 134679 // WtInputPolicySdl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      attribute 137495 "m_press_detected"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 134807 "WtSdlUtils"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 173719 "loadAssetToTexture"
	class_operation cpp_inline public explicit_return_type "SDL_Texture"
	nparams 3
	  param inout name "renderer" explicit_type "SDL_Renderer"
	  param in name "fname" explicit_type "std::string"
	  param in name "theme" explicit_type "std::string"
	    defaultvalue "\"default\" "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SDL_Texture* result_texture = NULL;
        std::string path = std::string(SDL_ASSETS).append(theme).append(\"/\").append(fname);
        SDL_Surface* surface = SDL_LoadBMP(path.c_str());
        if (surface != 0)
        {
            result_texture = SDL_CreateTextureFromSurface(renderer, surface);
            SDL_FreeSurface(surface);
        }
        else
        {
            std::cout<<\"could not load \"<<path<<std::endl;
            exit(-1);
        }
        return result_texture;
    };
"
	
	
	
	
	comment "
***********************"
      end
    end

    class 134935 "WtStorageCtr"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      class 135063 "_FileHeader"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 137623 "magic"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 135191 "_FileData"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 136215 // settings (<directional composition>)
	  relation 136215 *-->
	    a role_name "settings" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 136215 // settings (<directional composition>)
	    b parent class_ref 135319 // WtSettings
	end

	classrelation 136343 // highscores (<directional composition>)
	  relation 136343 *-->
	    a role_name "highscores" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 136343 // highscores (<directional composition>)
	    b parent class_ref 131479 // WtHighscores
	end
      end

      class 135447 "_PersistentFileStructure"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 136471 // header (<directional composition>)
	  relation 136471 *-->
	    a role_name "header" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 136471 // header (<directional composition>)
	    b parent class_ref 135063 // _FileHeader
	end

	classrelation 136599 // data (<directional composition>)
	  relation 136599 *-->
	    a role_name "data" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 136599 // data (<directional composition>)
	    b parent class_ref 135191 // _FileData
	end
      end

      class 135575 "SimpleFileCache"
	visibility package stereotype "typedef" explicit_base_type "std::map< std::string, std::vector<uint8_t> >"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      attribute 137751 "m_header_magic"
	class_attribute const_attribute private explicit_type "uint32_t"
	init_value "=  0x0001ADDE"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " least significant word is fixed magic and most sig. word
 may represent file structure
"
      end

      attribute 137879 "m_fname"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  \"wordtris.dat\""
	cpp_constexpr cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 174359 "instance"
	class_operation cpp_inline public return_type class_ref 134935 // WtStorageCtr
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static WtStorageCtr _instance;
        return _instance;
    };
"
	
	
	
	
	comment " singleton definition"
      end

      operation 174487 "~WtStorageCtr"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 174615 "WtStorageCtr"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
        m_storage_copy.header.magic = m_header_magic;
        m_storage_copy.data.settings = WtSettings();
        m_storage_copy.data.highscores.clear();

        char cwd_buf[512];
        const char* cwd;
#ifndef __ANDROID__
        std::cout << \"cwd = \"<<getcwd(cwd_buf, 512)<<std::endl;
        cwd = cwd_buf;
        std::cout << \"cwd = \" << std::string(cwd) << std::endl;
#else
        m_assetManager = getAssetManager();
        cwd = SDL_AndroidGetInternalStoragePath();
        std::cout << \"a cwd = \" << cwd << std::endl; 
        __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, \"%s\", cwd );
#endif
        m_cwd = std::string( cwd );
    };
"
	
	
	
	
      end

      operation 174743 "WtStorageCtr"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 134935 // WtStorageCtr
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 174871 "operator ="
	private return_type class_ref 134935 // WtStorageCtr
	nparams 1
	  param in name "" type class_ref 134935 // WtStorageCtr
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 174999 "store_settings"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "settings" type class_ref 135319 // WtSettings
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_storage_copy.data.settings = settings;

        write_to_file();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 175127 "store_highscores"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "scores" type class_ref 131479 // WtHighscores
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_storage_copy.data.highscores = scores;

        if ( ! write_to_file() )
        {
            std::cout << \"write failed\" << std::endl;
        }
        else
            std::cout << \"write success\" << std::endl;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 175255 "load"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        bool read_successful = read_from_file();


        std::cout << \"read was \" << (read_successful ? \"successful\" : \"not successful\") << std::endl;

        if ( !read_successful )
        {
            //load default
        }

        std::cout << \"highscores.size() == \" << m_storage_copy.data.highscores.size() << std::endl;
        std::cout << \"settings.language == \" << m_storage_copy.data.settings.language << std::endl;
        std::cout << \"settings.game mode == \" << m_storage_copy.data.settings.game_mode << std::endl;
        std::cout << \"settings.diff == \" << m_storage_copy.data.settings.difficulty << std::endl;
        std::cout << \"settings.active_theme == \" << m_storage_copy.data.settings.active_theme << std::endl;
        // distribute
        //
        return read_successful;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 175383 "get_settings"
	cpp_inline public return_type class_ref 135319 // WtSettings
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_storage_copy.data.settings;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 175511 "get_scores"
	cpp_inline public return_type class_ref 131479 // WtHighscores
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_storage_copy.data.highscores;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 175639 "get_asset_file_buf"
	cpp_inline public explicit_return_type "std::vector<uint8_t>"
	nparams 1
	  param in name "fname" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        SimpleFileCache::iterator it = m_asset_cache.find(fname);
        if ( it != m_asset_cache.end() )
        {
            // load from cache
            return (*it).second;
        }
        else
        {
            std::cout << \"read from assets folder: \" << fname << std::endl;
            internal_load_from_assets( fname, m_asset_cache[fname] );
            return m_asset_cache[fname];
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 175767 "write_to_file"
	cpp_inline private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        bool success = false;

        std::string fname = m_cwd;
        fname.append( \"/\" );
        fname.append( m_fname );

#ifdef __ANDROID__
        __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, \"write to: %s\", fname.c_str() );
#endif
        std::ofstream output_file( fname, std::ios::binary );
        if ( output_file.is_open() )
        {
            m_storage_copy.header.magic = m_header_magic;

            output_file.write( (char*)&m_storage_copy.header, sizeof(m_storage_copy.header));

            m_storage_copy.data.settings.write( output_file );
            for(size_t idx = 0; idx < m_storage_copy.data.highscores.size(); idx++ )
            {
                m_storage_copy.data.highscores[idx].write( output_file );
            }

            output_file.close();

            success = true;
        }

        return success;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 175895 "read_from_file"
	cpp_inline private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        bool success = false;

        std::string fname = m_cwd;
        fname.append( \"/\" );
        fname.append( m_fname );

#ifdef __ANDROID__
        __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, \"read from: %s\", fname.c_str() );
#endif
        std::ifstream input_file( fname, std::ios::binary );
        if ( input_file.is_open() )
        {
            input_file.read( (char*)&m_storage_copy.header, sizeof(m_storage_copy.header) );

            //if ( (! input_file.eof()) && (!input_file.fail()) ) in case latter wont work
            if ( input_file.gcount() == sizeof(m_storage_copy.header) )
            {
                // check binary compatibility
                if ( m_storage_copy.header.magic == m_header_magic )
                {
                    std::cout << \"read: header matches\\n\";

                    m_storage_copy.data.settings.read( input_file );

                    m_storage_copy.data.highscores.clear();
                    while( !input_file.eof() )
                    {
                        WtScoreEntry tmp;
                        if ( tmp.read( input_file ) )
                            m_storage_copy.data.highscores.push_back( tmp );
                    }

                    // check read size
                    // todo..
                    {
                        success = true;
                    }
                }
            }
        }

        return success;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 176023 "internal_load_from_assets"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param in name "fname" explicit_type "std::string"
	  param inout name "buffer" explicit_type "std::vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        // Open your file
        AAsset* file = AAssetManager_open(m_assetManager, fname.c_str(), AASSET_MODE_BUFFER);

        // Get the file length
        size_t fileLength = AAsset_getLength(file);

        // Allocate memory to read your file
        buffer.resize(fileLength+1);

        // Read your file
        AAsset_read(file, buffer.data(), fileLength);
        // For safety you can add a 0 terminating character at the end of your file ...
        buffer[fileLength] = '\\0';
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 176151 "getAssetManager"
	cpp_inline private explicit_return_type "AAssetManager"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        JNIEnv* env = (JNIEnv*)SDL_AndroidGetJNIEnv();

        jobject activity = (jobject)SDL_AndroidGetActivity();

        jclass activity_class = env->GetObjectClass(activity);

        jmethodID activity_class_getAssets = env->GetMethodID(activity_class, \"getAssets\", \"()Landroid/content/res/AssetManager;\");
        jobject asset_manager = env->CallObjectMethod(activity, activity_class_getAssets); // activity.getAssets();
        _global_asset_manager = env->NewGlobalRef(asset_manager);

        return AAssetManager_fromJava(env, _global_asset_manager);
    };
"
	
	
	
	
      end

      classrelation 136727 // m_storage_copy (<directional composition>)
	relation 136727 *-->
	  a role_name "m_storage_copy" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 136727 // m_storage_copy (<directional composition>)
	  b parent class_ref 135447 // _PersistentFileStructure
      end

      attribute 138007 "m_cwd"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 136855 // m_asset_cache (<directional composition>)
	relation 136855 *-->
	  a role_name "m_asset_cache" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 136855 // m_asset_cache (<directional composition>)
	  b parent class_ref 135575 // SimpleFileCache
      end

      attribute 138135 "m_assetManager"
	private explicit_type "AAssetManager"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 138263 "_global_asset_manager"
	private explicit_type "jobject"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 135319 "WtSettings"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      operation 177687 "WtSettings"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        language( \"en\" ),
        game_mode( \"\" ),
        difficulty( wt_difficulty_EASY ),
        active_theme( \"default\" )
    {
    };
"
	
	
	
	
      end

      operation 177815 "~WtSettings"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      attribute 140439 "language"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 140567 "game_mode"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 137367 // difficulty (<directional composition>)
	relation 137367 *-->
	  a role_name "difficulty" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 137367 // difficulty (<directional composition>)
	  b parent class_ref 131351 // wt_difficulty
      end

      attribute 140695 "active_theme"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 177943 "write"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "of" explicit_type "std::ofstream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        const char* str = language.c_str();
        of.write( str, strlen(str)+1 );// incl. NULL

        str = game_mode.c_str();
        of.write( str, strlen(str)+1 );// incl. NULL

        uint8_t diff = difficulty;
        of.write( (char*)&diff, 1 );

        str = active_theme.c_str();
        of.write( str, strlen(str)+1 );// incl. NULL
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 178071 "read"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "inf" explicit_type "std::ifstream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        char input[0xFF];
        inf.getline( input, 0xFF, '\\0' );
        language = std::string(input);

        inf.getline( input, 0xFF, '\\0' );
        game_mode = std::string(input);

        uint8_t diff;
        inf.read( (char*)&diff, 1 );
        difficulty = (wt_difficulty)diff;

        inf.getline( input, 0xFF, '\\0' );
        active_theme= std::string(input);
    };
"
	
	
	
	
	comment "
***********************"
      end
    end

    class 135703 "wt_mode_difficulty_tag"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 138391 "wt_difficulty_EASY"
	public type class_ref 135703 // wt_mode_difficulty_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 138519 "wt_difficulty_MEDIUM"
	public type class_ref 135703 // wt_mode_difficulty_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 138647 "wt_difficulty_HARD"
	public type class_ref 135703 // wt_mode_difficulty_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 135831 "wt_controls_tag"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 138775 "wt_control_DROP"
	public type class_ref 135831 // wt_controls_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 138903 "wt_control_LEFT"
	public type class_ref 135831 // wt_controls_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 139031 "wt_control_RIGHT"
	public type class_ref 135831 // wt_controls_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 139159 "wt_control_QUIT"
	public type class_ref 135831 // wt_controls_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 139287 "wt_control_PAUSE"
	public type class_ref 135831 // wt_controls_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 139415 "wt_control_INVALID"
	public type class_ref 135831 // wt_controls_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 135959 "wt_control"
      visibility package stereotype "typedef" base_type class_ref 135831 // wt_controls_tag
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 136087 "WtScoreEntry"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      attribute 140823 "player"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 140951 "game_mode"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 141079 "score"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 178199 "write"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "of" explicit_type "std::ofstream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        const char* str = player.c_str();
        of.write( str, strlen(str)+1 ); // incl. NULL

        str = game_mode.c_str();
        of.write( str, strlen(str)+1 );// incl. NULL

        of.write( (char*)&score, sizeof(score) );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 178327 "read"
	cpp_inline public explicit_return_type "bool"
	nparams 1
	  param inout name "inf" explicit_type "std::ifstream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        char input[0xFF];

        if (inf.eof()) return false;

        inf.getline( input, 0xFF, '\\0' );
        player = std::string( input );

        if (inf.eof()) return false;

        inf.getline( input, 0xFF, '\\0' );
        game_mode = std::string( input );

        if (inf.eof()) return false;

        inf.read( (char*)&score, sizeof(score) );

        return true;
    };
"
	
	
	
	
	comment "
***********************"
      end
    end

    class 136215 "WtWord"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************************"
      operation 178455 "WtWord"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "w" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} :
        m_word( w ),
        m_dea( w )
    {
      //  std::cout << \"=====\" <<std::endl << \"WtWord = \" << w << std::endl;
       // m_dea.print();
    };
"
	
	
	
	
      end

      operation 178583 "~WtWord"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 178711 "search_update"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "symbol" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_dea.process_symbol( symbol );
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 178839 "search_found"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_dea.is_current_state_accepting();
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 178967 "search_reset"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        m_dea.init();
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 179095 "as_string"
	cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_word;
    };
"
	
	
	
	
	comment "
***********************************"
      end

      attribute 141207 "m_word"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 137623 // m_dea (<directional composition>)
	relation 137623 *-->
	  a role_name "m_dea" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 137623 // m_dea (<directional composition>)
	  b parent class_ref 128663 // TDea
      end
    end

    classdiagram 128151 "menu"
      classdiagramsettings member_max_width 0 end
      size C
    end

    classdiagram 128279 "gamectr"
      classdiagramsettings member_max_width 0 end
      size C
    end

    classdiagram 128407 "input"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 128535 "drawing"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 128663 "storage"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 128791 "l10n"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 128919 "wordlist"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 129047 "gamemode"
      classdiagramsettings draw_all_relations yes member_max_width 0 end
      size C
    end

    classdiagram 129175 "random"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 129303 "sdl input"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 129431 "sdl drawing"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 129559 "animation"
      classdiagramsettings member_max_width 0 end
      size A4
    end
  end

  deploymentview 128023 "src"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 128023 "dea"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 128023 // dea_char_type_t
	class_ref 128151 // dea_special_types_t
	class_ref 128279 // dea_input_symbol_t
	class_ref 128407 // TDeaTransition
	class_ref 128535 // TDeaState
	class_ref 128663 // TDea
      end
    end

    artifact 128151 "wt_active_letter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 128791 // WtLetter
      end
    end

    artifact 128279 "wt_animations"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 128919 // WtAnimationStep
	class_ref 129047 // WtGridAnimation
      end
    end

    artifact 128407 "wt_backend_policy_if"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 129431 // WtDrawingPolicyIf
	class_ref 129943 // WtInputPolicyIf
      end
    end

    artifact 128535 "wt_board"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 129687 // WtBoard
      end
    end

    artifact 128663 "wt_button"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 130327 // WtButton
      end
    end

    artifact 128791 "wt_drawing"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 130455 // WtDrawing
      end
    end

    artifact 128919 "wt_game_ctr"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 130839 // WtGameCtr
      end
    end

    artifact 129047 "wt_game_mode_abc"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 131735 // WtGameModeAbc
      end
    end

    artifact 129175 "wt_game_mode_ctr"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 131991 // WtGameModeCtr
      end
    end

    artifact 129303 "wt_game_mode_guessing"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 132247 // WtGameModeGuessing
      end
    end

    artifact 129431 "wt_game_mode_if"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 131863 // WtGameModeState
	class_ref 131223 // WtGameModeIf
	class_ref 132119 // WtGameModeDemo
      end
    end

    artifact 129559 "wt_game_mode_tetris"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 132375 // WtGameModeTetris
      end
    end

    artifact 129687 "wt_game_mode_wordtris"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 132503 // WtGameModeWordtris
      end
    end

    artifact 129815 "wt_input"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 130967 // WtInputObserver
	class_ref 132759 // WtInput
      end
    end

    artifact 129943 "wt_l10n"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 133015 // WtL10n
      end
    end

    artifact 130071 "wt_l10n_translations"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 133271 // WtTranslationTexts
      end
    end

    artifact 130199 "wt_menu_ctr"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 133399 // WtMenuCtr
      end
    end

    artifact 130327 "wt_menu_game_mode_select"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 133911 // WtMenuSelectMode
      end
    end

    artifact 130455 "wt_menu_help"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 134039 // WtMenuHelp
      end
    end

    artifact 130583 "wt_menu_highscores"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 133783 // WtMenuHighscores
      end
    end

    artifact 130711 "wt_menu_if"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 131607 // WtMenuIf
      end
    end

    artifact 130839 "wt_menu_pause"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 133655 // WtMenuPause
      end
    end

    artifact 130967 "wt_menu_settings"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 133527 // WtMenuSettings
      end
    end

    artifact 131095 "wt_player"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 130711 // WtPlayer
      end
    end

    artifact 131223 "wt_random"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 134167 // WtRandom
      end
    end

    artifact 131351 "wt_sdl_drawing"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 134295 // WtDrawingPolicySdl
      end
    end

    artifact 131479 "wt_sdl_font"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 134551 // WtSdlFont
      end
    end

    artifact 131607 "wt_sdl_input"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 134679 // WtInputPolicySdl
      end
    end

    artifact 131735 "wt_sdl_utils"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 134807 // WtSdlUtils
      end
    end

    artifact 131863 "wt_settings_observer_if"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 131095 // WtSettingsChangeObserver
      end
    end

    artifact 131991 "wt_storage"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 134935 // WtStorageCtr
      end
    end

    artifact 132119 "wt_types"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 135703 // wt_mode_difficulty_tag
	class_ref 131351 // wt_difficulty
	class_ref 135831 // wt_controls_tag
	class_ref 135959 // wt_control
	class_ref 129559 // WtDim
	class_ref 129815 // WtCoord
	class_ref 130071 // WtInputEvent
	class_ref 135319 // WtSettings
	class_ref 136087 // WtScoreEntry
	class_ref 131479 // WtHighscores
      end
    end

    artifact 132247 "wt_wordlist"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 136215 // WtWord
	class_ref 132631 // WtWordList
      end
    end

    artifact 132375 "main"
      stereotype "source"
      cpp_src "//
//
//***************************************************************************

int main( int, char** )
{
    if ( ! STORAGE.load() )
    {
        // defaults should be used...
    }

    GAME_CTR.set_pause_menu( MENU_CTR.get_pause_menu() );

    MENU_CTR.listen( &GAME_CTR );

    while( 1 )
    {
        MENU_CTR.show();

        GAME_CTR.run();
    }

    return 0;
}
"
      associated_elems
      end
    end
  end
end
