format 221
"src" // src
  revision 2
  modified_by 23 "ckranz"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "/home/ckranz/zeugs/wordtris/src/"
  cpp_src_dir "/home/ckranz/zeugs/wordtris/src/"
  classview 134551 "src"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 145047 "dea_char_type_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 149911 "CHAR"
	public type class_ref 145047 // dea_char_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 150039 "SPECIAL"
	public type class_ref 145047 // dea_char_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 150167 "INVALID"
	public type class_ref 145047 // dea_char_type_t
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 145175 "dea_special_types_t"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " these are reg ex specific chars not dea specific
dea specials group n transitions to a single
"
      attribute 150295 "ANY_SYMBOL"
	public type class_ref 145175 // dea_special_types_t
	init_value " '.'"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 150423 "ANY_WHITESPACE"
	public type class_ref 145175 // dea_special_types_t
	init_value " 'w'"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 150551 "ANY_DIGIT"
	public type class_ref 145175 // dea_special_types_t
	init_value " 'd'
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 145303 "dea_input_symbol_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 192151 "dea_input_symbol_t"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "c" explicit_type "char"
	  param in name "t" type class_ref 145047 // dea_char_type_t
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} :
        symbol( c ),
        type( t )
    {
    };
"
	
	
	
	
      end

      attribute 150679 "symbol"
	public explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 149143 // type (<directional composition>)
	relation 149143 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 149143 // type (<directional composition>)
	  b parent class_ref 145047 // dea_char_type_t
      end
    end

    class 145431 "TDeaTransition"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
****************************************************************************"
      operation 192279 "TDeaTransition"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "trg" explicit_type "size_t"
	  param in name "input_symbol" type class_ref 145303 // dea_input_symbol_t
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} :
        m_input_symbol( input_symbol ),
        m_next_state( trg )
    {
    };
"
	
	
	
	
      end

      operation 192407 "~TDeaTransition"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 192535 "print"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( CHAR == m_input_symbol.type )
            printf(\"              |--> \\\"%c\\\" ==> %zd\\n\", m_input_symbol.symbol, m_next_state );
        else
            printf(\"              |--> [%c] ==> %zd\\n\", m_input_symbol.symbol, m_next_state );
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 192663 "process_symbol"
	cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "symbol" explicit_type "char"
	  param in name "verbose" explicit_type "byte"
	    defaultvalue "0 "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        bool matching = false;
        if ( 0 != verbose ) 
            printf(\"%c ?= %c \", m_input_symbol.symbol, symbol );

        switch ( m_input_symbol.type )
        {
            case SPECIAL:
                matching = process_special( symbol );
                if ( !matching )
                {
                    if ( 0 != verbose ) 
                        printf(\"\\t FAIL\");
                }
                if ( 0 != verbose ) 
                    printf(\"\\n\");
                break;
            case CHAR:
                if ( symbol == m_input_symbol.symbol )
                {
                    matching = true;
                }
                break;
            default: 
                break;
        }

        return matching;
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 192791 "get_next_state"
	cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_next_state;
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 192919 "process_special"
	cpp_inline private explicit_return_type "bool"
	nparams 1
	  param in name "s" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        bool res = false;

        switch( m_input_symbol.symbol )
        {
            case ANY_SYMBOL:        
                res = true;
                break;
            case ANY_WHITESPACE:
                switch ( s )
                {
                    case _SP:
                    case _TAB:
                    case _LF:
                    case _CR:
                        res = true;
                        break;
                    default: break;
                }
                break;
            case ANY_DIGIT:
                if ( ( s >= '0' ) && ( s <= '9' ) )
                {
                    res = true;
                }
                break;
            default: break;
        }

        return res;
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      classrelation 149271 // m_input_symbol (<directional composition>)
	relation 149271 *-->
	  a role_name "m_input_symbol" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 149271 // m_input_symbol (<directional composition>)
	  b parent class_ref 145303 // dea_input_symbol_t
      end

      attribute 150807 "m_next_state"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 145559 "TDeaState"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
****************************************************************************"
      operation 193047 "TDeaState"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "is_accepting" explicit_type "bool"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} :
        m_is_accepting( is_accepting )
    {
    };
"
	
	
	
	
      end

      operation 193175 "~TDeaState"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 193303 "is_accepting"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_is_accepting;
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 193431 "transition_count"
	cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_transitions.size();
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 193559 "print"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "idx" explicit_type "size_t"
	  param in name "is_current" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        printf(\"     |--> [%zd @ %p] is_accepting == %d\", idx, (void*)this, m_is_accepting );
        if ( false != is_current ) printf(\" {*}\\n\");
        else printf(\"\\n\");

        for( size_t t_idx=0; t_idx < m_transitions.size(); t_idx++ )
        {
            m_transitions[t_idx].print();
        }
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 193687 "new_transition"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "trg" explicit_type "size_t"
	  param in name "input_symbol" type class_ref 145303 // dea_input_symbol_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        m_transitions.push_back( TDeaTransition( trg, input_symbol ) );
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 193815 "process_symbol"
	cpp_inline public explicit_return_type "size_t"
	nparams 3
	  param in name "self_idx" explicit_type "size_t"
	  param in name "symbol" explicit_type "char"
	  param in name "verbose" explicit_type "byte"
	    defaultvalue "0 "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        size_t result = self_idx;

        for (size_t t_idx = 0; t_idx < m_transitions.size(); t_idx++ )
        {
            bool found = m_transitions[t_idx].process_symbol( symbol, verbose );
            if ( found )
            {
                result = m_transitions[t_idx].get_next_state();
                break;
            }

            if ( 0 != verbose ) 
                printf(\"\\n\");
        }

        return result;
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      attribute 150935 "m_is_accepting"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 149399 // m_transitions (<directional composition>)
	relation 149399 *-->
	  stereotype "std::vector"
	  a role_name "m_transitions" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 149399 // m_transitions (<directional composition>)
	  b parent class_ref 145431 // TDeaTransition
      end
    end

    class 145687 "TDea"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
****************************************************************************"
      operation 193943 "TDea"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
        m_states.push_back( TDeaState( false ) );
        m_current_state = 0;
    };
"
	
	
	
	
      end

      operation 194071 "TDea"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "state_count" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} {
        m_states.resize( state_count, TDeaState( false ) );
        m_current_state = 0;
    };
"
	
	
	
	
      end

      operation 194199 "TDea"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "contains_word" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} {
        new_contains( contains_word );
        m_current_state = 0;
    };
"
	
	
	
	
      end

      operation 194327 "~TDea"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 194455 "init"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( m_states.size() > 0 )
            m_current_state = 0;
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 194583 "print"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        printf(\"dea %p\\n\", (void*)this);
        printf(\" |--> states => %zd @ %p\\n\", m_states.size(), (void*)&m_states );
        for ( size_t s_idx=0; s_idx < m_states.size() ; s_idx++ )
        {
            m_states[s_idx].print( s_idx, ( s_idx == m_current_state ) );
        }
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 194711 "process_symbol"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "symbol" explicit_type "char"
	  param in name "verbose" explicit_type "byte"
	    defaultvalue "0 "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
       m_current_state = m_states[m_current_state].process_symbol( m_current_state, symbol, verbose );
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 194839 "verify_input"
	cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "input" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        bool result = false;

        size_t input_len = input.length();
        printf(\"input(%zd) = %s\\n\", input_len, input.c_str() );
        for ( size_t input_idx = 0; input_idx < input_len; input_idx++ )
        {
            process_symbol( input[input_idx], 1 );
        }

        result = m_states[m_current_state].is_accepting();

        return result;
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 194967 "is_current_state_accepting"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_states[m_current_state].is_accepting();
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      operation 195095 "new_contains"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "w" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( w.length() > 0 )
        {
            m_states.clear();
            m_states.resize( w.length(), TDeaState( false ) );
            m_states.push_back( TDeaState( true ) );

            m_states[0].new_transition( 1, dea_input_symbol_t( w[0], CHAR ) );

            for (size_t i=1; i<w.length(); i++ )
            {
                m_states[i].new_transition( i+1, dea_input_symbol_t( w[i], CHAR ) );
                m_states[i].new_transition( 1,   dea_input_symbol_t( w[0], CHAR ) );
                m_states[i].new_transition( 0,   dea_input_symbol_t( ANY_SYMBOL, SPECIAL ) );
            }

            init();
        }
    };
"
	
	
	
	
	comment "
************************************************************************"
      end

      classrelation 149527 // m_states (<directional composition>)
	relation 149527 *-->
	  stereotype "std::vector"
	  a role_name "m_states" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 149527 // m_states (<directional composition>)
	  b parent class_ref 145559 // TDeaState
      end

      attribute 151063 "m_current_state"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 145815 "WtLetter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 195223 "WtLetter"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        m_col( 5 ),
        m_row( WtBoard::row_count - 1 ),
        m_value( '\\0' )
    {};
"
	
	
	
	
      end

      operation 195351 "~WtLetter"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 195479 "WtLetter"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 145815 // WtLetter
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " no copy allowed"
      end

      operation 195607 "operator ="
	private return_type class_ref 145815 // WtLetter
	nparams 1
	  param in name "" type class_ref 145815 // WtLetter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 195735 "init"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "init_letter" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_col = 5;
        m_row = (WtBoard::row_count - 1);
        m_value = init_letter;
    };
"
	
	
	
	
	comment " api defintion


***********************"
      end

      operation 195863 "get_next"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "next_letter" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_value = next_letter;
        m_col = 5;
        m_row = (WtBoard::row_count - 1);
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 195991 "move_left"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( m_col > 0 )
            m_col --;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 196119 "move_right"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( m_col < ( WtBoard::col_count - 1 ) )
            m_col ++;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 196247 "single_drop"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( m_row > 0 )
            m_row --;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 196375 "drop_at"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "r" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( r < WtBoard::row_count )
            m_row = r;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 196503 "current_column"
	const cpp_inline public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_col; };
"
	
	
	
	
	comment "
***********************"
      end

      operation 196631 "current_row"
	const cpp_inline public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_row; };
"
	
	
	
	
      end

      operation 196759 "current_value"
	const cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_value; };
"
	
	
	
	
      end

      attribute 151191 "m_col"
	private explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 151319 "m_row"
	private explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 151447 "m_value"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 145943 "WtAnimationStep"
      visibility package 
      nformals 1
      formal name "animation_content" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      operation 196887 "WtAnimationStep"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "c" explicit_type "animation_content"
	  param in name "duration" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} :
        content( c ),
        step_duration( duration )
    {};
"
	
	
	
	
      end

      operation 197015 "~WtAnimationStep"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      attribute 151575 "content"
	public explicit_type "animation_content"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 151703 "step_duration"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 146071 "WtGridAnimation"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      class 146199 "GridText"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 197143 "GridText"
	  cpp_inline public explicit_return_type ""
	  nparams 5
	    param in name "r" explicit_type "uint8_t"
	    param in name "c" explicit_type "uint8_t"
	    param in name "horiz" explicit_type "bool"
	    param in name "t" explicit_type "std::string"
	    param in name "f" explicit_type "std::string"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${volatile}${throw}${abstract} :
            text( t ),
            font( f ),
            row ( r ),
            col ( c ),
            horizontal( horiz )
            {};
"
	  
	  
	  
	  
	end

	attribute 151831 "text"
	  public explicit_type "std::string"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 151959 "font"
	  public explicit_type "std::string"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 152087 "row"
	  public explicit_type "uint8_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 152215 "col"
	  public explicit_type "uint8_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 152343 "horizontal"
	  public explicit_type "bool"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 146327 "GridAnimationStep"
	visibility package stereotype "typedef" base_type class_ref 146199 // GridText
	cpp_decl "${comment}typedef WtAnimationStep<${type}> ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 149655 // <dependency>
	  relation 149655 -_->
	    a public
	      cpp default "#include in source"
	      classrelation_ref 149655 // <dependency>
	    b parent class_ref 146199 // GridText
	end
      end

      operation 197271 "no_animation"
	class_operation cpp_inline public return_type class_ref 146071 // WtGridAnimation
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static const WtGridAnimation empty;
        return empty;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 197399 "WtGridAnimation"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
     };
"
	
	
	
	
      end

      operation 197527 "~WtGridAnimation"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 197655 "push_back"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "step" type class_ref 146327 // GridAnimationStep
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_animation_steps.push_back( step );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 197783 "operator []"
	const cpp_inline public return_type class_ref 146327 // GridAnimationStep
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return m_animation_steps[idx];
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 197911 "empty"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_animation_steps.empty();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 198039 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_animation_steps.size();
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 149783 // m_animation_steps (<directional composition>)
	relation 149783 *-->
	  stereotype "std::vector"
	  a role_name "m_animation_steps" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 149783 // m_animation_steps (<directional composition>)
	  b parent class_ref 146327 // GridAnimationStep
      end
    end

    class 146455 "WtDrawingPolicyIf"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 198167 "clr"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 198295 "set_theme"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 198423 "get_font_size"
	abstract cpp_virtual public return_type class_ref 146583 // WtDim
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 198551 "draw_board"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "board" type class_ref 146711 // WtBoard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 198679 "draw_active_letter"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "active" type class_ref 145815 // WtLetter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 198807 "set_bg"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "bg_img" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 198935 "draw_text"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "pos" type class_ref 146839 // WtCoord
	  param in name "text" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 199063 "draw_image"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 3
	  param in name "pos" type class_ref 146839 // WtCoord
	  param in name "size" type class_ref 146583 // WtDim
	  param in name "image" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, const ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 199191 "update"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end
    end

    class 146583 "WtDim"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      operation 244759 "WtDim"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        w(0),
        h(0) {};
"
	
	
	
	
      end

      operation 244887 "WtDim"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "iW" explicit_type "ssize_t"
	  param in name "iH" explicit_type "ssize_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} :
        w(iW),
        h(iH) {};
"
	
	
	
	
      end

      attribute 162583 "w"
	public explicit_type "ssize_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 162711 "h"
	public explicit_type "ssize_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 146711 "WtBoard"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 152471 "row_count"
	class_attribute const_attribute public explicit_type "uint8_t"
	init_value "=  ROW_COUNT"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 152599 "col_count"
	class_attribute const_attribute public explicit_type "uint8_t"
	init_value "=  COL_COUNT"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 147223 "RowSequence"
	visibility package stereotype "typedef" explicit_base_type "char"
	cpp_decl "${comment}typedef ${type} ${name}[WtBoard::col_count];
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 199575 "WtBoard"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {

    };
"
	
	
	
	
      end

      operation 199703 "~WtBoard"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 199831 "WtBoard"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 146711 // WtBoard
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 199959 "operator ="
	private return_type class_ref 146711 // WtBoard
	nparams 1
	  param in name "" type class_ref 146711 // WtBoard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      attribute 152727 "empty_cell"
	class_attribute const_attribute public explicit_type "char"
	init_value "=  '\\0'"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " api defintion
"
      end

      operation 200087 "init"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        for( uint8_t r = 0; r<ROW_COUNT; r++ )
            for( uint8_t c = 0; c<COL_COUNT; c++ )
                set_cell( r, c, empty_cell );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 200215 "cell_occupied"
	cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "r" explicit_type "uint8_t"
	  param in name "c" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return ( get_cell( r, c ) != empty_cell );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 200343 "set_cell"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "r" explicit_type "uint8_t"
	  param in name "c" explicit_type "uint8_t"
	  param in name "val" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        m_board[r][c] = val;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 200471 "get_cell"
	const cpp_inline public explicit_return_type "char"
	nparams 2
	  param in name "r" explicit_type "uint8_t"
	  param in name "c" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        if ( ( r >= ROW_COUNT ) || ( c >= COL_COUNT ) )
            return ' ';

        return m_board[r][c];
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 200599 "get_row_sequence"
	const cpp_inline public return_type class_ref 147223 // RowSequence
	nparams 1
	  param in name "r" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( r >= ROW_COUNT )
            return m_board[0];

        return m_board[r];
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 200727 "get_row_string"
	const cpp_inline public explicit_return_type "std::string"
	nparams 1
	  param in name "r" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( r >= ROW_COUNT )
            return \"\";

        std::string row(\"\");

        for( uint8_t c_idx = 0; c_idx < WtBoard::col_count; c_idx++ )
        {
            row.push_back( ( m_board[r][c_idx] == WtBoard::empty_cell ? 
                                    ' ' :
                                    m_board[r][c_idx] ) );
        }

        return row;

//        return std::string( get_row_sequence( r ) );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 200855 "get_col_string"
	const cpp_inline public explicit_return_type "std::string"
	nparams 1
	  param in name "c" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( c >= COL_COUNT )
            return \"\";

        std::string col(\"\");

        for( uint8_t r_idx = 0; r_idx < WtBoard::row_count; r_idx++ )
        {
            //col.push_back( m_board[r_idx][c] );
            col.insert( col.begin(), ( m_board[r_idx][c] == WtBoard::empty_cell ? 
                                            ' ' : m_board[r_idx][c] ) );
        }

        return col;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 200983 "collapse_above"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "r" explicit_type "uint8_t"
	  param in name "c" explicit_type "uint8_t"
	  param in name "carry" explicit_type "char"
	    defaultvalue "WtBoard::empty_cell "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        /* drop remaining stones afterwards */
        for( uint8_t row=r; row < WtBoard::row_count-1; row++ )
        {
            set_cell( row, c,
                      get_cell( row+1, c ) );
        }
        set_cell( WtBoard::row_count-1, c, carry );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 201111 "collapse_below"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "r" explicit_type "uint8_t"
	  param in name "c" explicit_type "uint8_t"
	  param in name "carry" explicit_type "char"
	    defaultvalue "WtBoard::empty_cell "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        /* drop remaining stones afterwards */
        for( uint8_t row=r; row > 0; row-- )
        {
            set_cell( row, c,
                      get_cell( row-1, c ) );
        }
        set_cell( 0, c, carry );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 201239 "collapse_above"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "r" explicit_type "uint8_t"
	  param in name "carry" explicit_type "char"
	    defaultvalue "WtBoard::empty_cell "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        /* drop remaining stones afterwards */
        for( uint8_t row=r; row < WtBoard::row_count-1; row++ )
        {
            for( uint8_t c=0; c < WtBoard::col_count; c++ )
            {
                set_cell( row, c,
                          get_cell( row+1, c ) );
            }
        }
        for( uint8_t c=0; c < WtBoard::col_count; c++ )
        {
           set_cell( WtBoard::row_count-1, c, carry );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 152855 "m_board"
	private explicit_type "char"
	multiplicity "[ROW_COUNT][COL_COUNT]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 146839 "WtCoord"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      operation 245015 "WtCoord"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        x(0),
        y(0) {};
"
	
	
	
	
      end

      operation 245143 "WtCoord"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "iX" explicit_type "ssize_t"
	  param in name "iY" explicit_type "ssize_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} :
        x(iX),
        y(iY) {};
"
	
	
	
	
      end

      operation 245271 "WtCoord"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "c" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract} :
        x(c.x),
        y(c.y) {};
"
	
	
	
	
      end

      operation 245399 "operator ="
	cpp_inline public return_type class_ref 146839 // WtCoord
	nparams 1
	  param in name "c" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        x = c.x;
        y = c.y;
        return (*this);
    };
"
	
	
	
	
      end

      operation 245527 "operator =="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return ( x == rhs.x ) && ( y == rhs.y );
    };
"
	
	
	
	
      end

      operation 245655 "operator !="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return ( x != rhs.x ) && ( y != rhs.y );
    };
"
	
	
	
	
      end

      operation 245783 "operator +"
	cpp_inline public return_type class_ref 146839 // WtCoord
	nparams 1
	  param in name "rhs" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        x = x + rhs.x;
        y = y + rhs.y;
        return (*this);
    };
"
	
	
	
	
      end

      operation 245911 "in_region"
	const cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "start_pos" type class_ref 146839 // WtCoord
	  param in name "size" type class_ref 146583 // WtDim
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return (  ( x >= start_pos.x ) && ( x < start_pos.x+size.w )
               && ( y >= start_pos.y ) && ( y < start_pos.y+size.h ) );
    };
"
	
	
	
	
      end

      operation 246039 "moveX"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "dim" type class_ref 146583 // WtDim
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        x = x + dim.w;
    };
"
	
	
	
	
      end

      attribute 162839 "x"
	public explicit_type "ssize_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 162967 "y"
	public explicit_type "ssize_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 146967 "WtInputPolicyIf"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 199319 "read_input"
	abstract cpp_virtual public return_type class_ref 147095 // WtInputEvent
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 199447 "get_key_map"
	abstract cpp_virtual public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end
    end

    class 147095 "WtInputEvent"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      operation 246167 "WtInputEvent"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        is_key_event( true ),
        is_motion_event( false ),
        is_press_event( false ),
        call_again( false ),
        key( wt_control_INVALID ),
        pos(),
        d_pos()
    {};
"
	
	
	
	
      end

      attribute 163095 "is_key_event"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 163223 "is_motion_event"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 163351 "is_press_event"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 163479 "call_again"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 165399 // key (<directional composition>)
	relation 165399 *-->
	  a role_name "key" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 165399 // key (<directional composition>)
	  b parent class_ref 149143 // wt_control
      end

      classrelation 165527 // pos (<directional composition>)
	relation 165527 *-->
	  a role_name "pos" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 165527 // pos (<directional composition>)
	  b parent class_ref 146839 // WtCoord
      end

      classrelation 165655 // d_pos (<directional composition>)
	relation 165655 *-->
	  a role_name "d_pos" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 165655 // d_pos (<directional composition>)
	  b parent class_ref 146839 // WtCoord
      end
    end

    class 147351 "WtButton"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      class 147479 "OnTapDelegate"
	visibility package stereotype "template_typedef"
	cpp_decl "${comment}${template}using ${name} = ${inherit};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 149911 // <generalisation>
	  relation 149911 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 149911 // <generalisation>
	    b parent class_ref 147607 // typedef1
	end
      end

      class 147607 "typedef1"
	visibility package stereotype "typedef" explicit_base_type "std::function<void(void)>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 201367 "WtButton"
	cpp_inline public explicit_return_type ""
	nparams 5
	  param in name "pos" type class_ref 146839 // WtCoord
	  param in name "size" type class_ref 146583 // WtDim
	  param in name "button_image" explicit_type "std::string"
	  param in name "on_tap" type class_ref 147479 // OnTapDelegate
	  param in name "label" explicit_type "std::string"
	    defaultvalue "\"\" "
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${volatile}${throw}${abstract} :

        m_clickable( [](WtCoord&) {},
                     std::bind ( &WtButton::on_release, this, std::placeholders::_1 ),
                     [](WtCoord&, WtCoord&) {} ),

        m_pos( pos ),
        m_size( size ),
        m_img( button_image ),
        m_label( label ),
        m_on_tap( on_tap )
    {
    };
"
	
	
	
	
      end

      operation 201495 "~WtButton"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 201623 "operator WtClickableIf&"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return get_observable();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 201751 "get_observable"
	cpp_inline public return_type class_ref 147735 // WtClickableIf
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_clickable;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 201879 "label"
	cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n::translate(m_label);
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 202007 "image"
	cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_img;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 202135 "set_image"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "img" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_img = img;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 202263 "width"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_size.w;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 202391 "height"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_size.h;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 202519 "size"
	const cpp_inline public return_type class_ref 146583 // WtDim
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_size;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 202647 "position"
	const cpp_inline public return_type class_ref 146839 // WtCoord
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_pos;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 202775 "set_position"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "new_pos" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_pos = new_pos;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 202903 "x"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_pos.x;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 203031 "set_x"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "ssize_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_pos.x = x;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 203159 "y"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_pos.y;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 203287 "on_release"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "pos" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
//        std::cout << \"release detected: \" << pos << \" -> \" << m_pos << \":\" << m_size << \" -> \" << m_label << std::endl;
        if ( pos.in_region( m_pos, m_size ) )
        {
            if ( m_on_tap ) m_on_tap();
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 150039 // m_clickable (<directional composition>)
	relation 150039 *-->
	  a role_name "m_clickable" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 150039 // m_clickable (<directional composition>)
	  b parent class_ref 147735 // WtClickableIf
      end

      classrelation 150167 // m_pos (<directional composition>)
	relation 150167 *-->
	  a role_name "m_pos" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 150167 // m_pos (<directional composition>)
	  b parent class_ref 146839 // WtCoord
      end

      classrelation 150295 // m_size (<directional composition>)
	relation 150295 *-->
	  a role_name "m_size" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 150295 // m_size (<directional composition>)
	  b parent class_ref 146583 // WtDim
      end

      attribute 152983 "m_img"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 153111 "m_label"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 150423 // m_on_tap (<directional composition>)
	relation 150423 *-->
	  a role_name "m_on_tap" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 150423 // m_on_tap (<directional composition>)
	  b parent class_ref 147479 // OnTapDelegate
      end
    end

    class 147735 "WtClickableIf"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      class 147863 "PressDetectedDelegate"
	visibility package stereotype "template_typedef"
	cpp_decl "${comment}${template}using ${name} = ${inherit};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 150551 // <generalisation>
	  relation 150551 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 150551 // <generalisation>
	    b parent class_ref 147991 // typedef2
	end
      end

      class 147991 "typedef2"
	visibility package stereotype "typedef" explicit_base_type "std::function<void(WtCoord&)>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      class 148119 "ReleaseDetectedDelegate"
	visibility package stereotype "template_typedef"
	cpp_decl "${comment}${template}using ${name} = ${inherit};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 150679 // <generalisation>
	  relation 150679 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 150679 // <generalisation>
	    b parent class_ref 147991 // typedef2
	end
      end

      class 148247 "MotionDetectedDelegate"
	visibility package stereotype "template_typedef"
	cpp_decl "${comment}${template}using ${name} = ${inherit};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 150807 // <generalisation>
	  relation 150807 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 150807 // <generalisation>
	    b parent class_ref 148375 // typedef3
	end
      end

      class 148375 "typedef3"
	visibility package stereotype "typedef" explicit_base_type "std::function<void(WtCoord&, WtCoord&)>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 203415 "WtClickableIf"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "press" type class_ref 147863 // PressDetectedDelegate
	  param in name "release" type class_ref 148119 // ReleaseDetectedDelegate
	  param in name "motion" type class_ref 148247 // MotionDetectedDelegate
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} :
        m_press( press ),
        m_release( release ),
        m_motion( motion ),
        m_id( -1 )
    {
    };
"
	
	
	
	
      end

      operation 203543 "~WtClickableIf"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 203671 "set_id"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "ssize_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_id = id;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 203799 "id"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_id;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 203927 "trigger_press"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "pos" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( m_press ) m_press ( pos );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 204055 "trigger_release"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "pos" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( m_release ) m_release ( pos );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 204183 "trigger_motion"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "pos" type class_ref 146839 // WtCoord
	  param inout name "d_pos" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        if ( m_motion ) m_motion ( pos, d_pos );
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 150935 // m_press (<directional composition>)
	relation 150935 *-->
	  a role_name "m_press" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 150935 // m_press (<directional composition>)
	  b parent class_ref 147863 // PressDetectedDelegate
      end

      classrelation 151063 // m_release (<directional composition>)
	relation 151063 *-->
	  a role_name "m_release" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 151063 // m_release (<directional composition>)
	  b parent class_ref 148119 // ReleaseDetectedDelegate
      end

      classrelation 151191 // m_motion (<directional composition>)
	relation 151191 *-->
	  a role_name "m_motion" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 151191 // m_motion (<directional composition>)
	  b parent class_ref 148247 // MotionDetectedDelegate
      end

      attribute 153239 "m_id"
	protected explicit_type "ssize_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 148503 "WtDrawing"
      visibility package 
      nformals 1
      formal name "DrawingPolicy" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 151319 // <generalisation>
	relation 151319 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 151319 // <generalisation>
	  b parent class_ref 148631 // typedef4
      end

      operation 204311 "instance"
	class_operation cpp_inline public return_type class_ref 148503 // WtDrawing
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static WtDrawing _instance;
        return _instance;
    };
"
	
	
	
	
	comment " singleton definition"
      end

      operation 204439 "~WtDrawing"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 204567 "WtDrawing"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        DrawingPolicy()
    {
    };
"
	
	
	
	
      end

      operation 204695 "WtDrawing"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 148503 // WtDrawing
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 204823 "operator ="
	private return_type class_ref 148503 // WtDrawing
	nparams 1
	  param in name "" type class_ref 148503 // WtDrawing
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 204951 "init"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
	comment " api defintion


***********************"
      end

      operation 205079 "draw_player_stat"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "player" type class_ref 148759 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::string player_stat = \"Score: \";
        player_stat.append( std::to_string( player.get_points() ) );

        DrawingPolicy::draw_image( WtCoord( 79, 32 ),
                                   WtDim( 256, 65 ),
                                   \"label_bg.bmp\" );
        DrawingPolicy::draw_text( WtCoord( 90, 50 ),
                                  player_stat );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 205207 "draw_hint"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "hint" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        const size_t line_length = 30;
        size_t line_count = (hint.length() / line_length) + ( hint.length() % line_length > 0 ? 1 : 0 );
        for(size_t l_idx = 0; l_idx < line_count; l_idx++ )
        {
            std::string line = hint.substr( l_idx*line_length, line_length );
            DrawingPolicy::draw_text( WtCoord( 79, 890+(l_idx * DrawingPolicy::get_font_size().h *2) ),
                                      line );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 205335 "draw_help_box"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "help" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        const size_t line_length = 30;
        size_t line_count = (help.length() / line_length) + ( help.length() % line_length > 0 ? 1 : 0 );
        for(size_t l_idx = 0; l_idx < line_count; l_idx++ )
        {
            std::string line = help.substr( l_idx*line_length, line_length );
            DrawingPolicy::draw_text( WtCoord( (ACTIVE_WINDOW_WIDTH / 2)-((line.length()*DrawingPolicy::get_font_size().w)/2), 
                                               (ACTIVE_WINDOW_HEIGHT / 4)+(l_idx * DrawingPolicy::get_font_size().h *2) ),
                                      line );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 205463 "draw_message"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "msg" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        //todo replace with proper message box
        WtDim sz( 328, 69 );
        WtCoord pos( (ACTIVE_WINDOW_WIDTH - 328) / 2,
                     (ACTIVE_WINDOW_HEIGHT / 2) - (69 / 2) );
        DrawingPolicy::draw_image( pos,
                                   sz,
                                   \"menu_btn.bmp\" );
        WtDim font_sz = DrawingPolicy::get_font_size();

        size_t text_center_w = ( msg.length() / 2 ) * font_sz.w;
        size_t button_center_x = ( sz.w / 2 + pos.x );
        size_t button_center_y = ( sz.h / 2 + pos.y );

        DrawingPolicy::draw_text( WtCoord( button_center_x - text_center_w, 
                                           button_center_y - font_sz.h ),
                                  msg );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 205591 "draw_button"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "button" type class_ref 147351 // WtButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        DrawingPolicy::draw_image( WtCoord( button.x(), button.y() ),
                                   WtDim( button.width(), button.height() ),
                                   button.image() );

        if ( ! button.label().empty() )
        {
            WtDim font_sz = DrawingPolicy::get_font_size();

            size_t text_center_w = ( button.label().length() / 2 ) * font_sz.w;
            size_t button_center_x = ( button.width() / 2 + button.x() );
            size_t button_center_y = ( button.height() / 2 + button.y() );

            DrawingPolicy::draw_text( WtCoord( button_center_x - text_center_w,
                                               button_center_y - font_sz.h ),
                                      button.label() );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end
    end

    class 148631 "typedef4"
      visibility package stereotype "typedef" explicit_base_type "DrawingPolicy"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 148759 "WtPlayer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 232855 "WtPlayer"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        m_points( 0 ),
        m_words( 0 ),
        m_level( 1 )
    {};
"
	
	
	
	
      end

      operation 232983 "~WtPlayer"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 233111 "WtPlayer"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 148759 // WtPlayer
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " no copy allowed"
      end

      operation 233239 "operator ="
	private return_type class_ref 148759 // WtPlayer
	nparams 1
	  param in name "" type class_ref 148759 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 233367 "word_solved"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "length" explicit_type "size_t"
	    defaultvalue "1 "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_words ++;
        m_points += length * (m_level * PTS_P_WORD);
        m_level = 1 + (uint8_t)((m_words - 1) / 10);       
    };
"
	
	
	
	
	comment " api defintion


***********************"
      end

      operation 233495 "row_cleared"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "new_points" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_words ++;
        m_points += new_points * m_level;
        m_level = 1 + (uint8_t)((m_words - 1) / 10);       
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 233623 "letter_dropped"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "row_diff" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( row_diff > 0 )
            m_points += ( 21 + (3 * m_level) - row_diff );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 233751 "reset"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        m_points = 0;
        m_words = 0;
        m_level = 1;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 233879 "set_level_offset"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "level" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_level = level;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 234007 "get_points"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_points; };
"
	
	
	
	
	comment "
***********************"
      end

      operation 234135 "get_solved_word_count"
	const cpp_inline public explicit_return_type "uint16_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_words;  };
"
	
	
	
	
      end

      operation 234263 "get_current_level"
	const cpp_inline public explicit_return_type "uint8_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return m_level;  };
"
	
	
	
	
      end

      attribute 157975 "m_points"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 158103 "m_words"
	private explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 158231 "m_level"
	private explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 148887 "WtGameCtr"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 151447 // <generalisation>
	relation 151447 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 151447 // <generalisation>
	  b parent class_ref 149015 // WtSettingsChangeObserver
      end

      attribute 153367 "background_image"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  \"bg.bmp\""
	cpp_constexpr cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 205719 "instance"
	class_operation cpp_inline public return_type class_ref 148887 // WtGameCtr
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static WtGameCtr _instance;
        return _instance;
    };
"
	
	
	
	
	comment " singleton definition"
      end

      operation 205847 "~WtGameCtr"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 205975 "WtGameCtr"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        m_player(),
        m_active(),
        m_board(),
        m_active_mode( GAME_MODE_CTR.default_mode() ),
        m_game_over( false ),
        m_shall_quit( false ),
        m_shall_restart( false ),
        m_pause( false ),
        m_pause_menu( NULL ),
        m_grid_touch_control( WtCoord( 0, 100 ),
                              WtDim( ACTIVE_WINDOW_WIDTH, ACTIVE_WINDOW_HEIGHT-100 ),
                              std::bind ( &WtGameCtr::notify_left, this ),
                              std::bind ( &WtGameCtr::notify_right, this ),
                              std::bind ( &WtGameCtr::notify_drop, this ) ),
        m_pause_btn( WtCoord( 393, 32 ),
                     WtDim( 64, 64 ),
                     \"pause_btn.bmp\",
                     std::bind ( &WtGameCtr::notify_pause, this ) )
    {
        WtSettings settings = STORAGE.get_settings();
        set_mode( GAME_MODE_CTR.mode_from_string( settings.game_mode ) );
        WtL10n::set_language( settings.language );
        if ( INVALID_GAME_MODE != m_active_mode )
           m_active_mode->set_difficulty( settings.difficulty );

        ACTIVE_WINDOW.init();
        ACTIVE_WINDOW.set_theme( settings.active_theme );

        ACTIVE_INPUT.register_key_press_delegate( std::bind( &WtGameCtr::on_key_press, this, std::placeholders::_1 ) );
    };
"
	
	
	
	
      end

      operation 206103 "WtGameCtr"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 148887 // WtGameCtr
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 206231 "operator ="
	private return_type class_ref 148887 // WtGameCtr
	nparams 1
	  param in name "" type class_ref 148887 // WtGameCtr
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 206359 "draw"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ACTIVE_WINDOW.draw_board( m_board );
        ACTIVE_WINDOW.draw_player_stat( m_player );
        ACTIVE_WINDOW.draw_active_letter( m_active );
        ACTIVE_WINDOW.draw_hint( m_active_mode->get_hint() );
        ACTIVE_WINDOW.draw_button( m_pause_btn );
    };
"
	
	
	
	
	comment " api defintion


***********************"
      end

      operation 206487 "update_window"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        /*
         * redraw board 
         */

        ACTIVE_WINDOW.clr();
        draw();
        ACTIVE_WINDOW.update();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 206615 "play_animation"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "animation" type class_ref 146071 // WtGridAnimation
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        for ( size_t a_idx = 0; a_idx < animation.size(); a_idx++ )
        {
            ACTIVE_WINDOW.clr();
            draw();

            ACTIVE_WINDOW.draw_at_grid( animation[a_idx].content.row,
                                        animation[a_idx].content.col,
                                        animation[a_idx].content.horizontal,
                                        animation[a_idx].content.text,
                                        animation[a_idx].content.font );

            ACTIVE_WINDOW.update();

            usleep( animation[a_idx].step_duration );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 206743 "update_game"
	cpp_inline private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        bool game_over = false;
        if ( m_active_mode->stone_blocked( m_board,
                                           m_active.current_row() - 1,
                                           m_active.current_column() ) )
        {
            /* commit ACTIVE to board */
            m_active_mode->insert_stone_at( m_board, 
                                            m_active.current_row(), 
                                            m_active.current_column(), 
                                            m_active.current_value() );

            WtGameModeState eval_result = m_active_mode->eval_board( m_board,
                                                                     m_player );

            if ( !eval_result.animation.empty() )
            {
                play_animation( eval_result.animation );
            }

            if ( !eval_result.game_over )
            {
                /* generate next stone */
                m_active.get_next( m_active_mode->next_letter() );

                game_over = m_active_mode->stone_blocked( m_board,
                                                          m_active.current_row(),
                                                          m_active.current_column() );
            }
            else
            {
                game_over = true;
            }
        }
        else
        {
            m_active.single_drop();
        }
        return game_over;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 206871 "on_key_press"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "key" type class_ref 149143 // wt_control
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        switch( key )
        {
            default:
            case wt_control_INVALID:
                break;


            case wt_control_DROP:
                notify_drop();
                break;
            case wt_control_LEFT:
                notify_left();
                break;
            case wt_control_RIGHT:
                notify_right();
                break;
            case wt_control_QUIT:
                exit(0);
                break;
            case wt_control_PAUSE:
                notify_pause();
                break;
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 206999 "notify_drop"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        uint8_t new_row = m_active.current_row() - 1;
        while ( ! m_active_mode->stone_blocked( m_board,
                                                new_row,
                                                m_active.current_column() ) )
        {
            new_row --;
        }
        new_row++;

        m_player.letter_dropped( m_active.current_row() - new_row );
        m_active.drop_at( new_row );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 207127 "notify_left"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( ! m_active_mode->stone_blocked( m_board,
                                             m_active.current_row(),
                                             m_active.current_column() - 1 ) )
        {
            m_active.move_left();
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 207255 "notify_right"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( ! m_active_mode->stone_blocked( m_board,
                                             m_active.current_row(),
                                             m_active.current_column() + 1 ) )
        {
            m_active.move_right(); 
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 207383 "notify_pause"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        m_pause = !m_pause;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 207511 "set_buttons"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ACTIVE_INPUT.add_active_region( m_grid_touch_control );
        ACTIVE_INPUT.add_active_region( m_pause_btn );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 207639 "unset_buttons"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ACTIVE_INPUT.remove_active_region( m_grid_touch_control );
        ACTIVE_INPUT.remove_active_region( m_pause_btn );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 207767 "notify_language_changed"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "lang_code" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::cout << \"new lanuage selected = \"<< lang_code << std::endl;

        WtSettings settings = STORAGE.get_settings();
        settings.language = lang_code;
        STORAGE.store_settings( settings );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 207895 "notify_game_mode_changed"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "mode" type class_ref 149271 // WtGameModeIf
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( NULL != mode )
        {
            set_mode( mode );

            WtSettings settings = STORAGE.get_settings();
            settings.game_mode = mode->get_id_string();
            STORAGE.store_settings( settings );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 208023 "notify_difficulty_changed"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "diffi" type class_ref 149399 // wt_difficulty
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( INVALID_GAME_MODE != m_active_mode )
        {
            std::cout << \"new diff selected = \"<< diffi << std::endl;
            m_active_mode->set_difficulty( diffi );

            WtSettings settings = STORAGE.get_settings();
            settings.difficulty = diffi;
            STORAGE.store_settings( settings );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 208151 "notify_theme_changed"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ACTIVE_WINDOW.set_theme( name );

        std::cout << \"new theme selected = \"<< name << std::endl;
        WtSettings settings = STORAGE.get_settings();
        settings.active_theme = name;
        STORAGE.store_settings( settings );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 208279 "update_highscores"
	cpp_inline private return_type class_ref 149527 // WtHighscores
	nparams 3
	  param inout name "player" type class_ref 148759 // WtPlayer
	  param inout name "mode" type class_ref 149271 // WtGameModeIf
	  param inout name "scores" type class_ref 149527 // WtHighscores
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        // eval if player stat is within first 3 of game mode
        // if true add player at correct position

        return scores;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 208407 "set_mode"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "mode" type class_ref 149271 // WtGameModeIf
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( ( INVALID_GAME_MODE != mode ) && ( INVALID_GAME_MODE != m_active_mode ) )
        {
            mode->set_difficulty( m_active_mode->get_difficulty() );
        }
        m_active_mode = mode;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 208535 "set_pause_menu"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "menu" type class_ref 149655 // WtMenuIf
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_pause_menu = menu;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 208663 "quit"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        m_shall_quit = true;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 208791 "restart"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        m_shall_quit = true;
        m_shall_restart = true;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 208919 "run"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ACTIVE_WINDOW.set_bg( WtGameCtr::background_image );
        set_buttons();

        do
        {
            m_shall_restart = false;
            m_game_over = false;
            m_shall_quit = false;

            m_player.reset();
            m_board.init();

            if ( INVALID_GAME_MODE == m_active_mode )
            {
                std::cout << \"invalid game mode\\n\";
                m_game_over = true;
            }
            else
            {
                m_active_mode->init_game( m_board, m_player );
                m_active.init( m_active_mode->next_letter() );
            }

            uint8_t countdown = 48 - (m_player.get_current_level()*4);
            while ( !m_game_over && !m_shall_quit )
            {
                ACTIVE_INPUT.read();

                if ( !m_pause )
                {
                    if ( countdown == 0 )
                    {
                        m_game_over = update_game();

                        countdown = 48 - (m_player.get_current_level()*4);
                    }         

                    update_window();
                    countdown--;
                }
                else
                {
                    if ( NULL != m_pause_menu )
                    {
                        m_pause = false;
                        unset_buttons();
                        m_pause_menu->show();
                        ACTIVE_WINDOW.set_bg( WtGameCtr::background_image );
                        set_buttons();
                    }
                }

                usleep(12500);
            }
        }
        while ( m_shall_restart );

        STORAGE.store_highscores( update_highscores( m_player, m_active_mode, STORAGE.get_scores() ) );

        if ( m_game_over )
        {
            ACTIVE_WINDOW.set_bg( \"bg_menu_pause.bmp\" );
            ACTIVE_WINDOW.clr();
            ACTIVE_WINDOW.draw_player_stat( m_player );
//            ACTIVE_WINDOW.draw_board( m_board );
//            ACTIVE_WINDOW.draw_active_letter( m_active );
//            ACTIVE_WINDOW.draw_hint( m_active_mode->get_hint() );
 //           ACTIVE_WINDOW.draw_button( m_pause_btn );

            ACTIVE_WINDOW.draw_message(WtL10n_tr(\"you lost! :P\"));
            ACTIVE_WINDOW.update();
            sleep(5);
        }
        unset_buttons();
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 151575 // m_player (<directional composition>)
	relation 151575 *-->
	  a role_name "m_player" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 151575 // m_player (<directional composition>)
	  b parent class_ref 148759 // WtPlayer
      end

      classrelation 151703 // m_active (<directional composition>)
	relation 151703 *-->
	  a role_name "m_active" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 151703 // m_active (<directional composition>)
	  b parent class_ref 145815 // WtLetter
      end

      classrelation 151831 // m_board (<directional composition>)
	relation 151831 *-->
	  a role_name "m_board" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 151831 // m_board (<directional composition>)
	  b parent class_ref 146711 // WtBoard
      end

      classrelation 151959 // m_active_mode (<unidirectional association>)
	relation 151959 --->
	  a role_name "m_active_mode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 151959 // m_active_mode (<unidirectional association>)
	  b parent class_ref 149271 // WtGameModeIf
      end

      attribute 153495 "m_game_over"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 153623 "m_shall_quit"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 153751 "m_shall_restart"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 153879 "m_pause"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 152087 // m_pause_menu (<unidirectional association>)
	relation 152087 --->
	  a role_name "m_pause_menu" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 152087 // m_pause_menu (<unidirectional association>)
	  b parent class_ref 149655 // WtMenuIf
      end

      classrelation 152215 // m_grid_touch_control (<directional composition>)
	relation 152215 *-->
	  a role_name "m_grid_touch_control" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 152215 // m_grid_touch_control (<directional composition>)
	  b parent class_ref 149783 // WtGridTouchOverlay
      end

      classrelation 152343 // m_pause_btn (<directional composition>)
	relation 152343 *-->
	  a role_name "m_pause_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 152343 // m_pause_btn (<directional composition>)
	  b parent class_ref 147351 // WtButton
      end
    end

    class 149015 "WtSettingsChangeObserver"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 240023 "notify_language_changed"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "lang_code" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 240151 "notify_difficulty_changed"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "diffi" type class_ref 149399 // wt_difficulty
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 240279 "notify_game_mode_changed"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "mode" type class_ref 149271 // WtGameModeIf
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 240407 "notify_theme_changed"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end
    end

    class 149143 "wt_control"
      visibility package stereotype "typedef" base_type class_ref 155543 // wt_controls_tag
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 149271 "WtGameModeIf"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      operation 213527 "WtGameModeIf"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "id_string" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} :
        m_current_diff( wt_difficulty_EASY ),
        m_id_string( id_string )
        {};
"
	
	
	
	
      end

      operation 213655 "get_available_difficulties"
	class_operation cpp_inline public explicit_return_type "std::vector<std::pair<wt_difficulty, const char*> >"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        std::vector<std::pair<wt_difficulty, const char*> > result =
                         { std::make_pair( wt_difficulty_EASY,   WtL10n_tr(\"easy\") ), 
                           std::make_pair( wt_difficulty_MEDIUM, WtL10n_tr(\"normal\") ),
                           std::make_pair( wt_difficulty_HARD,   WtL10n_tr(\"hard\") ) };
        return result;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 213783 "get_id_string"
	cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        //shall not be translated
        return m_id_string;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 213911 "init_game"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "" type class_ref 146711 // WtBoard
	  param inout name "" type class_ref 148759 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
	comment "
***********************"
      end

      operation 214039 "get_title"
	abstract cpp_virtual public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "
***********************"
      end

      operation 214167 "eval_board"
	abstract cpp_virtual public return_type class_ref 150039 // WtGameModeState
	nparams 2
	  param inout name "board" type class_ref 146711 // WtBoard
	  param inout name "player" type class_ref 148759 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "
***********************"
      end

      operation 214295 "next_letter"
	abstract cpp_virtual public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "
***********************"
      end

      operation 214423 "get_hint"
	abstract cpp_virtual public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "
***********************"
      end

      operation 214551 "get_help"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n_tr(\"no help provided\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 214679 "set_difficulty"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "new_difficulty" type class_ref 149399 // wt_difficulty
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_current_diff = new_difficulty;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 214807 "get_difficulty"
	cpp_virtual cpp_inline public return_type class_ref 149399 // wt_difficulty
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_current_diff;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 214935 "stone_blocked"
	cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 3
	  param inout name "board" type class_ref 146711 // WtBoard
	  param in name "row" explicit_type "uint8_t"
	  param in name "col" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return board.cell_occupied( row, col );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 215063 "insert_stone_at"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "board" type class_ref 146711 // WtBoard
	  param in name "row" explicit_type "uint8_t"
	  param in name "col" explicit_type "uint8_t"
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        board.set_cell( row, col, value );
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 154007 // m_current_diff (<directional composition>)
	relation 154007 *-->
	  a role_name "m_current_diff" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 154007 // m_current_diff (<directional composition>)
	  b parent class_ref 149399 // wt_difficulty
      end

      attribute 154775 "m_id_string"
	const_attribute private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 149399 "wt_difficulty"
      visibility package stereotype "typedef" base_type class_ref 155415 // wt_mode_difficulty_tag
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 149527 "WtHighscores"
      visibility package stereotype "typedef" base_type class_ref 155671 // WtScoreEntry
      cpp_decl "${comment}typedef std::vector<${type}> ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 165911 // <dependency>
	relation 165911 -_->
	  a public
	    cpp default "#include in source"
	    classrelation_ref 165911 // <dependency>
	  b parent class_ref 155671 // WtScoreEntry
      end
    end

    class 149655 "WtMenuIf"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 228119 "WtMenuIf"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        m_menu_id(0xFF00),
        m_shall_leave( false ),
        m_bg( \"bg_menu.bmp\" ),
        m_fade( true )
    {
    };
"
	
	
	
	
      end

      operation 228247 "WtMenuIf"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "menu_id" explicit_type "uint16_t"
	  param in name "bg_img" explicit_type "std::string"
	    defaultvalue "\"bg_menu.bmp\""
	  param in name "fade" explicit_type "bool"
	    defaultvalue "true "
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw}${abstract} :
        m_menu_id( menu_id ),
        m_shall_leave( false ),
        m_bg( bg_img ),
        m_fade( fade )
    {
    };
"
	
	
	
	
      end

      operation 228375 "~WtMenuIf"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 228503 "listen"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 149015 // WtSettingsChangeObserver
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_change_listener.push_back( listener );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 228631 "show"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        open_menu();

        while( !m_shall_leave )
        {
            ACTIVE_INPUT.read();

            ACTIVE_WINDOW.clr();

            show_self();

            menu_update();

            ACTIVE_WINDOW.update();
        }

        close_menu();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 228759 "menu_left"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {

    };
"
	
	
	
	
	comment "signal
***********************"
      end

      operation 228887 "menu_update"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {

    };
"
	
	
	
	
	comment "signal
***********************"
      end

      operation 229015 "leave"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        m_shall_leave = true;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 229143 "get_id"
	const cpp_inline protected explicit_return_type "uint16_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_menu_id;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 229271 "add_button"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "button" type class_ref 147351 // WtButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_buttons.push_back( &button );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 229399 "add_tristate_button"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "button" type class_ref 153495 // WtTriStateButton
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_tristate_buttons.push_back( &button );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 229527 "add_horizontal_carousel"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "carousel" type class_ref 151447 // WtHorizontalCarousel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_carousels.push_back( &carousel );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 229655 "open_menu"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        m_shall_leave = false;
        ACTIVE_WINDOW.set_bg( get_bg_img() );

        fade_in();

        for(size_t idx=0;idx<m_buttons.size();idx++)
        {
            ACTIVE_INPUT.add_active_region( *(m_buttons[idx]) );
        }
        for(size_t idx=0;idx<m_tristate_buttons.size();idx++)
        {
            ACTIVE_INPUT.add_active_region( *(m_tristate_buttons[idx]) );
        }
        for(size_t idx=0;idx<m_carousels.size();idx++)
        {
            ACTIVE_INPUT.add_active_region( *(m_carousels[idx]) );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 229783 "close_menu"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        for (size_t idx=0;idx<m_buttons.size();idx++)
        {
            ACTIVE_INPUT.remove_active_region( *(m_buttons[idx]) );
        }
        for (size_t idx=0;idx<m_tristate_buttons.size();idx++)
        {
            ACTIVE_INPUT.remove_active_region( *(m_tristate_buttons[idx]) );
        }
        for(size_t idx=0;idx<m_carousels.size();idx++)
        {
            ACTIVE_INPUT.remove_active_region( *(m_carousels[idx]) );
        }

        fade_out();

        menu_left();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 229911 "enter_child_menu"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "sub_menu" type class_ref 149655 // WtMenuIf
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        close_menu();

        sub_menu.show();

        open_menu();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 230039 "get_listener"
	cpp_inline protected explicit_return_type "std::vector<WtSettingsChangeObserver*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_change_listener;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 230167 "get_bg_img"
	cpp_inline private explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_bg;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 230295 "fade_in"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        bool done = !m_fade;
        
        std::vector<WtButton> button_fading;

        for (size_t idx=0;idx<m_buttons.size();idx++)
        {
            button_fading.push_back( *m_buttons[idx] );
        }

        for(size_t idx=0;idx<button_fading.size();idx++)
        {
            button_fading[idx].set_x( button_fading[idx].x()-800 );
        }
        
        while( !done )
        {
            ACTIVE_WINDOW.clr();

            for(size_t idx=0;idx<button_fading.size();idx++)
            {
                ACTIVE_WINDOW.draw_button( button_fading[idx] );
            }

            ACTIVE_WINDOW.update();

            usleep(12500);

            done = true;
            for(size_t idx=0;idx<button_fading.size();idx++)
            {
                ssize_t dest_x = m_buttons[idx]->x();

                button_fading[idx].set_x( button_fading[idx].x() + 80);
                if ( button_fading[idx].x() != dest_x )
                    done = false;
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 230423 "fade_out"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        bool done = !m_fade;
        std::vector<WtButton> button_fading;

        for (size_t idx=0;idx<m_buttons.size();idx++)
        {
            button_fading.push_back( *m_buttons[idx] );
        }

        while( !done )
        {
            ACTIVE_WINDOW.clr();

            for(size_t idx=0;idx<button_fading.size();idx++)
            {
                ACTIVE_WINDOW.draw_button( button_fading[idx] );
            }

            ACTIVE_WINDOW.update();

            usleep(12500);

            done = true;
            for(size_t idx=0;idx<button_fading.size();idx++)
            {
                ssize_t dest_x = m_buttons[idx]->x() - 800;

                button_fading[idx].set_x( button_fading[idx].x() - 80);
                if ( button_fading[idx].x() != dest_x )
                    done = false;
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 230551 "show_self"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        for(size_t idx=0;idx<m_buttons.size();idx++)
        {
            ACTIVE_WINDOW.draw_button( *(m_buttons[idx]) );
        }
        for(size_t idx=0;idx<m_tristate_buttons.size();idx++)
        {
            ACTIVE_WINDOW.draw_image( m_tristate_buttons[idx]->position(),
                                      m_tristate_buttons[idx]->size(),
                                      m_tristate_buttons[idx]->background_image() );
            ACTIVE_WINDOW.draw_button( m_tristate_buttons[idx]->item<0>() );
            ACTIVE_WINDOW.draw_button( m_tristate_buttons[idx]->item<1>() );
            ACTIVE_WINDOW.draw_button( m_tristate_buttons[idx]->item<2>() );
        }
        for(size_t idx=0;idx<m_carousels.size();idx++)
        {
            for( size_t c_idx = 0; c_idx < m_carousels[idx]->size(); c_idx++ )
            {
                ACTIVE_WINDOW.draw_button( (*(m_carousels[idx]))[c_idx] );
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 156695 "m_menu_id"
	const_attribute private explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 156823 "m_shall_leave"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 156951 "m_bg"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 160919 // m_buttons (<unidirectional association>)
	relation 160919 --->
	  stereotype "std::vector"
	  a role_name "m_buttons" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 160919 // m_buttons (<unidirectional association>)
	  b parent class_ref 147351 // WtButton
      end

      classrelation 161047 // m_tristate_buttons (<unidirectional association>)
	relation 161047 --->
	  stereotype "std::vector"
	  a role_name "m_tristate_buttons" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 161047 // m_tristate_buttons (<unidirectional association>)
	  b parent class_ref 153495 // WtTriStateButton
      end

      classrelation 161175 // m_carousels (<unidirectional association>)
	relation 161175 --->
	  stereotype "std::vector"
	  a role_name "m_carousels" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 161175 // m_carousels (<unidirectional association>)
	  b parent class_ref 151447 // WtHorizontalCarousel
      end

      classrelation 161303 // m_change_listener (<unidirectional association>)
	relation 161303 --->
	  stereotype "std::vector"
	  a role_name "m_change_listener" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 161303 // m_change_listener (<unidirectional association>)
	  b parent class_ref 149015 // WtSettingsChangeObserver
      end

      attribute 157079 "m_fade"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 149783 "WtGridTouchOverlay"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      class 150935 "OnLeftDetected"
	visibility package stereotype "template_typedef"
	cpp_decl "${comment}${template}using ${name} = ${inherit};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 154647 // <generalisation>
	  relation 154647 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 154647 // <generalisation>
	    b parent class_ref 151063 // typedef5
	end
      end

      class 151063 "typedef5"
	visibility package stereotype "typedef" explicit_base_type "std::function<void(void)>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      class 151191 "OnRightDetected"
	visibility package stereotype "template_typedef"
	cpp_decl "${comment}${template}using ${name} = ${inherit};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 154775 // <generalisation>
	  relation 154775 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 154775 // <generalisation>
	    b parent class_ref 151063 // typedef5
	end
      end

      class 151319 "OnDropDetected"
	visibility package stereotype "template_typedef"
	cpp_decl "${comment}${template}using ${name} = ${inherit};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 154903 // <generalisation>
	  relation 154903 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 154903 // <generalisation>
	    b parent class_ref 151063 // typedef5
	end
      end

      operation 219415 "WtGridTouchOverlay"
	cpp_inline public explicit_return_type ""
	nparams 5
	  param in name "pos" type class_ref 146839 // WtCoord
	  param in name "size" type class_ref 146583 // WtDim
	  param in name "on_left" type class_ref 150935 // OnLeftDetected
	  param in name "on_right" type class_ref 151191 // OnRightDetected
	  param in name "on_drop" type class_ref 151319 // OnDropDetected
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${volatile}${throw}${abstract} :

        m_clickable( std::bind ( &WtGridTouchOverlay::on_press, this, std::placeholders::_1 ),
                     std::bind ( &WtGridTouchOverlay::on_release, this, std::placeholders::_1 ),
                     std::bind ( &WtGridTouchOverlay::on_motion, this, std::placeholders::_1, std::placeholders::_2 ) ),

        m_pos( pos ),
        m_size( size ),
        m_pos_left( pos ),
        m_pos_right( size.w / 2, pos.y ),
        m_pos_drop( pos.x, pos.y + (size.h / 2) + (size.h / 4) ),
        m_size_left( size.w / 2, (size.h / 2) + (size.h / 4) ),
        m_size_right( size.w / 2, (size.h / 2) + (size.h / 4) ),
        m_size_drop( size.w, size.h - ((size.h / 2) + (size.h / 4)) ),
        m_press_start_pos( -1, -1 ),
        m_active_motion_pos( -1, -1 ),
        m_on_left( on_left ),
        m_on_right( on_right ),
        m_on_drop( on_drop )
    {
    };
"
	
	
	
	
      end

      operation 219543 "~WtGridTouchOverlay"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 219671 "operator WtClickableIf&"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return get_observable();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 219799 "get_observable"
	cpp_inline public return_type class_ref 147735 // WtClickableIf
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_clickable;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 219927 "on_press"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "pos" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::cout << \"on press at \" << pos << std::endl;
        if ( pos.in_region( m_pos, m_size ) )
        {
            m_press_start_pos = pos;
            m_active_motion_pos = pos;
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 220055 "on_release"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "pos" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
//        std::cout << \"release detected: (\" << pos.x << \",\" << pos.y << \") -> (\" << m_pos.x << \",\" << m_pos.y << \"):(\" << m_size.w << \",\" << m_size.h << \") -> \" << m_label << std::endl;
        if ( m_press_start_pos == WtCoord( -1, -1 ) )
        {
            if ( pos.in_region( m_pos_left, m_size_left ) )
            {
                if ( m_on_left ) m_on_left();
            }
            if ( pos.in_region( m_pos_right, m_size_right ) )
            {
                if ( m_on_right ) m_on_right();
            }
            if ( pos.in_region( m_pos_drop, m_size_drop ) )
            {
                if ( m_on_drop ) m_on_drop();
            }
        }
        m_press_start_pos = WtCoord( -1, -1 );
        m_active_motion_pos = m_press_start_pos;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 220183 "on_motion"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "" type class_ref 146839 // WtCoord
	  param inout name "d_pos" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        if ( m_press_start_pos != WtCoord( -1, -1 ) )
        {
            m_active_motion_pos = m_active_motion_pos + d_pos;

            if ( m_active_motion_pos.in_region( m_pos_drop, m_size_drop ) )
            {
                if ( m_on_drop ) m_on_drop();
            }
            else
            {
                if ( (m_active_motion_pos.x+30) < m_press_start_pos.x )
                {
                    m_press_start_pos = m_active_motion_pos;
                    if ( m_on_left ) m_on_left();
                }
                if ( (m_active_motion_pos.x-30) > m_press_start_pos.x )
                {
                    m_press_start_pos = m_active_motion_pos;
                    if ( m_on_right ) m_on_right();
                }
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 155031 // m_clickable (<directional composition>)
	relation 155031 *-->
	  a role_name "m_clickable" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 155031 // m_clickable (<directional composition>)
	  b parent class_ref 147735 // WtClickableIf
      end

      classrelation 155159 // m_pos (<directional composition>)
	relation 155159 *-->
	  a role_name "m_pos" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 155159 // m_pos (<directional composition>)
	  b parent class_ref 146839 // WtCoord
      end

      classrelation 155287 // m_size (<directional composition>)
	relation 155287 *-->
	  a role_name "m_size" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 155287 // m_size (<directional composition>)
	  b parent class_ref 146583 // WtDim
      end

      classrelation 155415 // m_pos_left (<directional composition>)
	relation 155415 *-->
	  a role_name "m_pos_left" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 155415 // m_pos_left (<directional composition>)
	  b parent class_ref 146839 // WtCoord
      end

      classrelation 155543 // m_pos_right (<directional composition>)
	relation 155543 *-->
	  a role_name "m_pos_right" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 155543 // m_pos_right (<directional composition>)
	  b parent class_ref 146839 // WtCoord
      end

      classrelation 155671 // m_pos_drop (<directional composition>)
	relation 155671 *-->
	  a role_name "m_pos_drop" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 155671 // m_pos_drop (<directional composition>)
	  b parent class_ref 146839 // WtCoord
      end

      classrelation 155799 // m_size_left (<directional composition>)
	relation 155799 *-->
	  a role_name "m_size_left" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 155799 // m_size_left (<directional composition>)
	  b parent class_ref 146583 // WtDim
      end

      classrelation 155927 // m_size_right (<directional composition>)
	relation 155927 *-->
	  a role_name "m_size_right" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 155927 // m_size_right (<directional composition>)
	  b parent class_ref 146583 // WtDim
      end

      classrelation 156055 // m_size_drop (<directional composition>)
	relation 156055 *-->
	  a role_name "m_size_drop" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 156055 // m_size_drop (<directional composition>)
	  b parent class_ref 146583 // WtDim
      end

      classrelation 156183 // m_press_start_pos (<directional composition>)
	relation 156183 *-->
	  a role_name "m_press_start_pos" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 156183 // m_press_start_pos (<directional composition>)
	  b parent class_ref 146839 // WtCoord
      end

      classrelation 156311 // m_active_motion_pos (<directional composition>)
	relation 156311 *-->
	  a role_name "m_active_motion_pos" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 156311 // m_active_motion_pos (<directional composition>)
	  b parent class_ref 146839 // WtCoord
      end

      classrelation 156439 // m_on_left (<directional composition>)
	relation 156439 *-->
	  a role_name "m_on_left" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 156439 // m_on_left (<directional composition>)
	  b parent class_ref 150935 // OnLeftDetected
      end

      classrelation 156567 // m_on_right (<directional composition>)
	relation 156567 *-->
	  a role_name "m_on_right" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 156567 // m_on_right (<directional composition>)
	  b parent class_ref 151191 // OnRightDetected
      end

      classrelation 156695 // m_on_drop (<directional composition>)
	relation 156695 *-->
	  a role_name "m_on_drop" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 156695 // m_on_drop (<directional composition>)
	  b parent class_ref 151319 // OnDropDetected
      end
    end

    class 149911 "WtGameModeAbc"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 152471 // <generalisation>
	relation 152471 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 152471 // <generalisation>
	  b parent class_ref 149271 // WtGameModeIf
      end

      operation 209047 "WtGameModeAbc"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
      WtGameModeIf( \"ABC?E\" ),
      m_working_letters(\"\"),
      m_active_row(0) 
    {
    };
"
	
	
	
	
      end

      operation 209175 "~WtGameModeAbc"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 209303 "init_game"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "board" type class_ref 146711 // WtBoard
	  param inout name "player" type class_ref 148759 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        (void)player; // currently unused

        m_active_row = 0;
        setup_sequences();
        show_sequence( board );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 209431 "get_title"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n_tr(\"ABC?E\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 209559 "eval_board"
	cpp_virtual cpp_inline public return_type class_ref 150039 // WtGameModeState
	nparams 2
	  param inout name "board" type class_ref 146711 // WtBoard
	  param inout name "player" type class_ref 148759 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        WtGameModeState gs( false,
                            WtGridAnimation::no_animation() );
        if ( m_working_letters.empty() )
        {
            bool correct = true;
            for( uint8_t c=0; c < WtBoard::col_count; c++ )
            {
                if ( m_current_sequence_control[c] != board.get_cell( m_active_row, c ) )
                {
                    correct = false;
                    break;
                }
            }

            if ( correct )
            {                
                player.word_solved();
                
                board.collapse_above( m_active_row );
            }
            else
            {
                m_active_row++;
            }

            setup_sequences();
            show_sequence( board );
        }
        return gs;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 209687 "next_letter"
	cpp_virtual cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        char next = '#';
        if ( ! m_working_letters.empty() )
        {
            next = WtRandom::get_random_letter_of_word( m_working_letters );
            remove_letter( m_working_letters, next );
        }
        // else shall not happen -> game loop take care if eval_board checks for empty
        // and reloads whatever may next

        return next; 
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 209815 "get_hint"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n::translate( WtL10n_tr(\"Complete the sequence!\") );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 209943 "get_help"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { 
        return WtL10n::translate( WtL10n_tr(\"Try to place the falling letters at the correct position of the given sequence.\") );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 210071 "setup_sequences"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        generate_sequence(m_current_sequence_control);
        m_working_letters = prepare_sequence( m_current_sequence_control, 
                                              get_difficulty(), 
                                              m_current_sequence );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 210199 "show_sequence"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "board" type class_ref 146711 // WtBoard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        for( uint8_t c=0; c < WtBoard::col_count; c++ )
        {
            board.set_cell( m_active_row, c, m_current_sequence[c] );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 210327 "remove_letter"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "word" explicit_type "std::string"
	  param in name "letter" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        size_t first_idx = word.find_first_of( letter );
        if ( first_idx != std::string::npos )
        {
            word.erase( first_idx, 1 );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 210455 "prepare_sequence"
	cpp_inline private explicit_return_type "std::string"
	nparams 3
	  param inout name "in_seq" type class_ref 147223 // RowSequence
	  param in name "diff" type class_ref 149399 // wt_difficulty
	  param inout name "out_seq" type class_ref 147223 // RowSequence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        std::string removed;
        std::vector<size_t> indices = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
        uint8_t lettersToRemove = 0;
        switch( diff )
        {
            case wt_difficulty_EASY:   lettersToRemove = 2; break;
            case wt_difficulty_MEDIUM: lettersToRemove = 4; break;
            case wt_difficulty_HARD:   lettersToRemove = 8; break;
            default: break;
        }

        for( size_t idx = 0; idx < WtBoard::col_count; idx++ )
        {
            out_seq[idx] = in_seq[idx];
        }

        for( uint8_t removedCount = 0; removedCount < lettersToRemove; removedCount++ )
        {
            size_t r_idx = WtRandom::get_random_from_sequence( indices );

            removed.push_back( out_seq[r_idx] );
            out_seq[r_idx] = WtBoard::empty_cell;

            indices.erase( find(indices.begin(), indices.end(), r_idx ) );
        }
        return removed;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 210583 "generate_sequence"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "seq" type class_ref 147223 // RowSequence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        uint8_t starting_idx = WtRandom::roll_dice(26-WtBoard::col_count);
        for( size_t idx = 0; idx < WtBoard::col_count; idx++ )
        {
            seq[idx] = ( 'A'+(idx+starting_idx) );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 152599 // m_current_sequence (<directional composition>)
	relation 152599 *-->
	  a role_name "m_current_sequence" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 152599 // m_current_sequence (<directional composition>)
	  b parent class_ref 147223 // RowSequence
      end

      classrelation 152727 // m_current_sequence_control (<directional composition>)
	relation 152727 *-->
	  a role_name "m_current_sequence_control" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 152727 // m_current_sequence_control (<directional composition>)
	  b parent class_ref 147223 // RowSequence
      end

      attribute 154007 "m_working_letters"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 154135 "m_active_row"
	private explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 150039 "WtGameModeState"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      operation 213399 "WtGameModeState"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "go" explicit_type "bool"
	  param in name "a" type class_ref 146071 // WtGridAnimation
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw}${abstract} :
        game_over( go ),
        animation( a ) {};
"
	
	
	
	
      end

      attribute 154647 "game_over"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 153879 // animation (<directional composition>)
	relation 153879 *-->
	  a role_name "animation" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 153879 // animation (<directional composition>)
	  b parent class_ref 146071 // WtGridAnimation
      end
    end

    class 150167 "WtGameModeCtr"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 210711 "instance"
	class_operation cpp_inline public return_type class_ref 150167 // WtGameModeCtr
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static WtGameModeCtr _instance;
        return _instance;
    };
"
	
	
	
	
      end

      operation 210839 "~WtGameModeCtr"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 210967 "default_mode"
	cpp_inline public return_type class_ref 149271 // WtGameModeIf
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return &m_demoMode;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 211095 "mode_from_string"
	cpp_inline public return_type class_ref 149271 // WtGameModeIf
	nparams 1
	  param in name "mode_id" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        WtGameModeIf* result = default_mode();
        if ( ! mode_id.empty() )
        {
            for( size_t idx = 0; idx < m_available_modes.size(); idx++ )
            {
                if ( m_available_modes[idx]->get_id_string() == mode_id )
                {
                    result = m_available_modes[idx];
                    break;
                }
            }
        }
        return result;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 211223 "get_available_modes"
	cpp_inline public explicit_return_type "std::vector<WtGameModeIf*>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_available_modes;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 211351 "get_available_mode_titles"
	cpp_inline public explicit_return_type "std::vector<std::string>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        std::vector<std::string> result;
        for ( size_t idx = 0; idx < m_available_modes.size(); idx++ )
            result.push_back( m_available_modes[idx]->get_title() );
        return result;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 211479 "WtGameModeCtr"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
        m_available_modes.push_back( &m_demoMode );
        m_available_modes.push_back( &m_guessMode );
        m_available_modes.push_back( &m_tetrisMode );
        m_available_modes.push_back( &m_abcMode );
        m_available_modes.push_back( &m_wordtrisMode );
    };
"
	
	
	
	
      end

      operation 211607 "WtGameModeCtr"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 150167 // WtGameModeCtr
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 211735 "operator ="
	private return_type class_ref 150167 // WtGameModeCtr
	nparams 1
	  param in name "" type class_ref 150167 // WtGameModeCtr
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      classrelation 152855 // m_demoMode (<directional composition>)
	relation 152855 *-->
	  a role_name "m_demoMode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 152855 // m_demoMode (<directional composition>)
	  b parent class_ref 150295 // WtGameModeDemo
      end

      classrelation 152983 // m_guessMode (<directional composition>)
	relation 152983 *-->
	  a role_name "m_guessMode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 152983 // m_guessMode (<directional composition>)
	  b parent class_ref 150423 // WtGameModeGuessing
      end

      classrelation 153111 // m_tetrisMode (<directional composition>)
	relation 153111 *-->
	  a role_name "m_tetrisMode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 153111 // m_tetrisMode (<directional composition>)
	  b parent class_ref 150551 // WtGameModeTetris
      end

      classrelation 153239 // m_abcMode (<directional composition>)
	relation 153239 *-->
	  a role_name "m_abcMode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 153239 // m_abcMode (<directional composition>)
	  b parent class_ref 149911 // WtGameModeAbc
      end

      classrelation 153367 // m_wordtrisMode (<directional composition>)
	relation 153367 *-->
	  a role_name "m_wordtrisMode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 153367 // m_wordtrisMode (<directional composition>)
	  b parent class_ref 150679 // WtGameModeWordtris
      end

      classrelation 153495 // m_available_modes (<unidirectional association>)
	relation 153495 --->
	  stereotype "std::vector"
	  a role_name "m_available_modes" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 153495 // m_available_modes (<unidirectional association>)
	  b parent class_ref 149271 // WtGameModeIf
      end
    end

    class 150295 "WtGameModeDemo"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "demo implementation of game mode if
***************************************"
      classrelation 154135 // <generalisation>
	relation 154135 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 154135 // <generalisation>
	  b parent class_ref 149271 // WtGameModeIf
      end

      operation 215191 "WtGameModeDemo"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtGameModeIf( \"Demo\" ),
        m_active_wordbase( \"12340()()()()#@abcdEFGK\" )
    {
    };
"
	
	
	
	
      end

      operation 215319 "~WtGameModeDemo"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 215447 "init_game"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "board" type class_ref 146711 // WtBoard
	  param inout name "player" type class_ref 148759 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        for( size_t r_idx = 0; r_idx < WtBoard::row_count/2+1; r_idx++ )
            for( size_t c_idx = 0; c_idx < WtBoard::col_count; c_idx++ )
            {
                uint8_t dice = WtRandom::roll_dice(6);
                if ( dice > 5 )
                    board.set_cell( r_idx, c_idx, WtRandom::get_random_letter_of_word( m_active_wordbase ) );
            }

        player.set_level_offset(9);
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 215575 "get_title"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return \"Demo\";
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 215703 "eval_board"
	cpp_virtual cpp_inline public return_type class_ref 150039 // WtGameModeState
	nparams 2
	  param inout name "" type class_ref 146711 // WtBoard
	  param inout name "" type class_ref 148759 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        WtGameModeState gs( false,
                             WtGridAnimation::no_animation() );
        return gs;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 215831 "next_letter"
	cpp_virtual cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtRandom::get_random_letter_of_word( m_active_wordbase ); 
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 215959 "get_hint"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        std::string s_hint( \"dEmO MoDe\" );
        return s_hint;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 216087 "WtGameModeDemo"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 150295 // WtGameModeDemo
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 216215 "operator ="
	private return_type class_ref 150295 // WtGameModeDemo
	nparams 1
	  param in name "" type class_ref 150295 // WtGameModeDemo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      attribute 154903 "m_active_wordbase"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 150423 "WtGameModeGuessing"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 153623 // <generalisation>
	relation 153623 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 153623 // <generalisation>
	  b parent class_ref 149271 // WtGameModeIf
      end

      operation 211863 "WtGameModeGuessing"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtGameModeIf( \"Guess it\" ),
        m_active_word( \"BlAcK\" ),
        m_wordlist()
    {
        m_active_word_guessed   = m_active_word;
        m_active_word_scrambled = scramble( m_active_word );
    };
"
	
	
	
	
      end

      operation 211991 "~WtGameModeGuessing"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 212119 "get_title"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n_tr(\"Guess it!\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 212247 "init_game"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "" type class_ref 146711 // WtBoard
	  param inout name "" type class_ref 148759 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        m_active_word           = \"BlAcK\";
        m_active_word_guessed   = m_active_word;
        m_active_word_scrambled = scramble( m_active_word );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 212375 "eval_board"
	cpp_virtual cpp_inline public return_type class_ref 150039 // WtGameModeState
	nparams 2
	  param inout name "board" type class_ref 146711 // WtBoard
	  param inout name "player" type class_ref 148759 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        WtGameModeState gs( false,
                            WtGridAnimation::no_animation() );

        if ( m_active_word_guessed.empty() )
        {
            bool found_word = false;

            // search rows for word
            //TODO: use DEA instead of string construction
            for ( uint8_t r_idx = 0; r_idx < WtBoard::row_count; r_idx++ )
            {
                std::string row = std::string(\"\");
                for ( uint8_t c_idx = 0; c_idx < WtBoard::col_count; c_idx++ )
                {
                    char cell = board.get_cell( r_idx, c_idx );
                    if ( cell != WtBoard::empty_cell )
                        row.push_back( cell );
                    else
                        row.push_back( ' ' );
                }
              
                size_t found_idx = row.find( m_active_word );
                if ( found_idx != std::string::npos )
                {
                    for ( size_t c_idx = found_idx; c_idx < (m_active_word.length()+found_idx); c_idx++ )
                        board.set_cell( r_idx, (uint8_t)(c_idx), WtBoard::empty_cell );
                    //TODO gravity bitch!
                    found_word = true;
                    break;
                }
            }

            if ( found_word )
            {
                player.word_solved();
                get_next_word();
            }
            else
            {
                get_next_word();
            }
        }

        return gs;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 212503 "next_letter"
	cpp_virtual cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        char next = '#';
        if ( ! m_active_word_guessed.empty() )
        {
            next = WtRandom::get_random_letter_of_word( m_active_word_guessed );
            remove_letter( m_active_word_guessed, next );
        }
        // else shall not happen -> game loop take care if eval_board checks for empty
        // and reloads whatever may next

        return next; 
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 212631 "get_hint"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return std::string( WtL10n_tr(\"Guess the word: \") ).append(m_active_word_scrambled);
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 212759 "WtGameModeGuessing"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 150423 // WtGameModeGuessing
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 212887 "operator ="
	private return_type class_ref 150423 // WtGameModeGuessing
	nparams 1
	  param in name "" type class_ref 150423 // WtGameModeGuessing
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 213015 "get_next_word"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        size_t idx = 0;
        uint8_t buf;
        const std::vector<std::string>& guess_list = m_wordlist.get_wordlist_by_name(\"short list\");
        if ( WtRandom::getrandom( &buf, 1 ) <= 1 )
        {
            idx = (buf % guess_list.size());
        }
        m_active_word = guess_list[idx];
        m_active_word_guessed = m_active_word;
        m_active_word_scrambled = scramble( m_active_word );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 213143 "remove_letter"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "word" explicit_type "std::string"
	  param in name "letter" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        size_t first_idx = word.find_first_of( letter );
        if ( first_idx != std::string::npos )
        {
            word.erase( first_idx, 1 );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 213271 "scramble"
	cpp_virtual cpp_inline private explicit_return_type "std::string"
	nparams 1
	  param in name "word" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::string word_copy = word;
        std::string result = std::string(\"\");

        while ( ! word_copy.empty() )
        {
            char next = WtRandom::get_random_letter_of_word( word_copy );
            result.push_back( next );
            remove_letter( word_copy, next );
        }

        return result;
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 154263 "m_active_word"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 154391 "m_active_word_guessed"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 154519 "m_active_word_scrambled"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 153751 // m_wordlist (<directional composition>)
	relation 153751 *-->
	  a role_name "m_wordlist" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 153751 // m_wordlist (<directional composition>)
	  b parent class_ref 150807 // WtWordList
      end
    end

    class 150551 "WtGameModeTetris"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 154263 // <generalisation>
	relation 154263 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 154263 // <generalisation>
	  b parent class_ref 149271 // WtGameModeIf
      end

      operation 216343 "WtGameModeTetris"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtGameModeIf( \"Fill Rows\" ),
        m_active_wordbase( \"()+&\" )
    {
    };
"
	
	
	
	
      end

      operation 216471 "~WtGameModeTetris"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 216599 "get_title"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n_tr(\"Fill Rows\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 216727 "eval_board"
	cpp_virtual cpp_inline public return_type class_ref 150039 // WtGameModeState
	nparams 2
	  param inout name "board" type class_ref 146711 // WtBoard
	  param inout name "player" type class_ref 148759 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        WtGameModeState gs( false,
                            WtGridAnimation::no_animation() );
        // search rows for word
        for ( uint8_t r_idx = 0; r_idx < WtBoard::row_count; r_idx++ )
        {
            bool row_full = true;
            size_t active_word = 0;
            std::string words[WtBoard::col_count];

            words[active_word].push_back( board.get_cell( r_idx, 0 ) );
            for ( uint8_t c_idx = 1; c_idx < WtBoard::col_count; c_idx++ )
            {
                char next = board.get_cell( r_idx, c_idx );
                if ( next != '\\0' )
                {
                    if ( words[active_word][0] != next )
                    {
                        active_word++;
                    }
                    words[active_word].push_back( next );
                }
                else
                {
                    row_full = false;
                }
            }

            if ( row_full )
            {
                uint32_t points = 0;
                for ( uint8_t w_idx = 0; w_idx < WtBoard::col_count; w_idx ++ )
                {
                    points += (words[w_idx].length() * words[w_idx].length()) * 20;
                }
                player.row_cleared( points );
                /* drop remaining stones afterwards */
                board.collapse_above( r_idx );
            }
        }

        return gs;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 216855 "next_letter"
	cpp_virtual cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtRandom::get_random_letter_of_word( m_active_wordbase ); 
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 216983 "get_hint"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n_tr(\"build rows.\\nthe more equal symbols, more points.\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 217111 "WtGameModeTetris"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 150551 // WtGameModeTetris
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 217239 "operator ="
	private return_type class_ref 150551 // WtGameModeTetris
	nparams 1
	  param in name "" type class_ref 150551 // WtGameModeTetris
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      attribute 155031 "m_active_wordbase"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 150679 "WtGameModeWordtris"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 154391 // <generalisation>
	relation 154391 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 154391 // <generalisation>
	  b parent class_ref 149271 // WtGameModeIf
      end

      attribute 155159 "min_word_length"
	class_attribute const_attribute private explicit_type "size_t"
	init_value "=  3"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 217367 "WtGameModeWordtris"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtGameModeIf( \"WordtrisClassic\" ),
        m_letters( \"ETAOINSRHDLUCMFYWGPBVKXQJZ\" ),
        m_wordlist()
    {
        m_wordlist.load_from_list( \"20k list\", WtWordList::eToUpper );
        std::cout << \"words = \" << m_wordlist.size() << std::endl;
    };
"
	
	
	
	
      end

      operation 217495 "~WtGameModeWordtris"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 217623 "get_title"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n_tr(\"Classic Mode\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 217751 "init_game"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "board" type class_ref 146711 // WtBoard
	  param inout name "player" type class_ref 148759 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        (void)player; //currently not used

        for( size_t r_idx = 0; r_idx < WtBoard::row_count/2; r_idx++ )
            for( size_t c_idx = 0; c_idx < WtBoard::col_count; c_idx++ )
            {
                board.set_cell( r_idx, c_idx, ' ' );
            }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 217879 "eval_board"
	cpp_virtual cpp_inline public return_type class_ref 150039 // WtGameModeState
	nparams 2
	  param inout name "board" type class_ref 146711 // WtBoard
	  param inout name "player" type class_ref 148759 // WtPlayer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        WtGridAnimation blink;
        WtGameModeState gs( false,
                            WtGridAnimation::no_animation() );
        bool something_found = false;

        do
        {
            something_found = false;
            for ( uint8_t r_idx = 0; r_idx < WtBoard::row_count; r_idx++ )
            {
                std::string row_str = board.get_row_string( r_idx );
                std::vector<std::string> sequences = split( std::string(row_str) );
                for( size_t s_idx = 0; s_idx < sequences.size(); s_idx++ )
                {
                    if ( sequences[s_idx].length() >= min_word_length )
                    {
                        std::string word = contains_word( sequences[s_idx] );
                        if ( !word.empty() ) 
                        {
                            {
                                WtGridAnimation::GridAnimationStep step( WtGridAnimation::GridText( WtBoard::row_count-r_idx,
                                                                                                    row_str.find( word ),
                                                                                                    true,
                                                                                                    word, 
                                                                                                    \"grid_inverse\" ),
                                                                           200000 );
                                blink.push_back( step );
                                step.content.font = \"grid\";
                                blink.push_back( step );
                                step.content.font = \"grid_inverse\";
                                blink.push_back( step );
                            }
                            gs.animation = blink;
                            player.word_solved( word.length() );
                            erase_from_row( r_idx, row_str, word, board );
                            something_found = true;
                            
                            break;
                        }
                    }
                }
            }


            for ( uint8_t c_idx = 0; c_idx < WtBoard::col_count; c_idx++ )
            {
                std::string col_str = board.get_col_string( c_idx );
                std::string trimmed = col_str;
                trim( trimmed );

                if ( trimmed.length() >= min_word_length )
                {
                    std::string word = contains_word( trimmed );
                    if ( !word.empty() ) 
                    {
                        {
                            WtGridAnimation::GridAnimationStep step( WtGridAnimation::GridText( WtBoard::row_count-col_str.find( word ),
                                                                                                c_idx,
                                                                                                false,
                                                                                                word, 
                                                                                                \"grid_inverse\" ),
                                                                       200000 );
                            blink.push_back( step );
                            step.content.font = \"grid\";
                            blink.push_back( step );
                            step.content.font = \"grid_inverse\";
                            blink.push_back( step );
                        }
                        gs.animation = blink;
                        player.word_solved( word.length() );
                        erase_from_col( c_idx, col_str, word, board );
                        something_found = true;

                        break;
                    }
                }
            }
        }
        while( something_found );

        return gs;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 218007 "next_letter"
	cpp_virtual cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
                                                   // E  T A O I N S R H D L U C M F Y W G P B V K X Q J Z,?,*
        std::discrete_distribution<int> distribution {12,9,8,8,7,7,6,6,6,4,4,3,3,2,2,2,2,2,2,1,1,1,1,1,1,1,5,5 };
        return WtRandom::get_random_letter_of_weight_seq( std::string(m_letters).append(\"?*\"),
                                                          distribution ); 
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 218135 "get_hint"
	cpp_virtual cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n_tr(\"try to build 3+ letter words!\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 218263 "stone_blocked"
	cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 3
	  param inout name "board" type class_ref 146711 // WtBoard
	  param in name "row" explicit_type "uint8_t"
	  param in name "col" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return ( board.cell_occupied( row, col ) || row < (WtBoard::row_count/2-1) );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 218391 "insert_stone_at"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "board" type class_ref 146711 // WtBoard
	  param in name "row" explicit_type "uint8_t"
	  param in name "col" explicit_type "uint8_t"
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        if ( value == '*' )
        {
            // a bomb has been dropped!
            if ( 
                 ( ( board.get_cell( row-1, col ) != WtBoard::empty_cell )
                   &&
                   ( board.get_cell( row-1, col ) != ' ' )
                 )
               )
            {
                if ( row <= (WtBoard::row_count/2+1) )
                {
                    for ( uint8_t idx = row-1; idx > 0; idx-- )
                    {
                        char next = board.get_cell( idx-1, col );
                        if ( ( next == ' ' ) && ( idx == row-1 ) )
                            next = WtBoard::empty_cell;

                        board.set_cell( idx, col, next );

                        if ( ( next == ' ' ) || ( next == WtBoard::empty_cell ) )
                            break;
                    }
                    board.set_cell( 0, col, ' ' );
                }
                else
                {
                    board.set_cell( row-1, col, WtBoard::empty_cell );
                }
            }
        }
        else
        {
            if ( value == '?' )
            {
                value = WtRandom::get_random_letter_of_word( m_letters );
            }

            // if we stack up, we push the other rows downward until they reach
            // the end of the board and then we stack up
            if ( 
                 ( ( board.get_cell( row-1, col ) != WtBoard::empty_cell )
                   &&
                   ( board.get_cell( row-1, col ) != ' ' )
                 )
                 &&
                 ( board.get_cell( 0, col ) == ' ' )
               )
            {
                for ( uint8_t idx = 0; idx < row-1; idx++ )
                {
                    board.set_cell( idx, col, board.get_cell( idx+1, col ) );
                }
                board.set_cell( row - 1, col, value );
            }
            else
            {
                board.set_cell( row, col, value );
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 218519 "WtGameModeWordtris"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 150679 // WtGameModeWordtris
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 218647 "operator ="
	private return_type class_ref 150679 // WtGameModeWordtris
	nparams 1
	  param in name "" type class_ref 150679 // WtGameModeWordtris
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 218775 "column_gravity"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param in name "c_idx" explicit_type "uint8_t"
	  param inout name "board" type class_ref 146711 // WtBoard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        std::string col_str = board.get_col_string( c_idx );
        if ( col_str.find_first_not_of( \" \" ) != std::string::npos )
        {
            std::string lower = col_str.substr( WtBoard::row_count/2 );
            std::string upper = col_str.substr( 0, WtBoard::row_count/2 );
/*
            std::cout << \"col_str before = \\\"\" << col_str << \"\\\"\"<< std::endl;
            std::cout << \"upper before = \\\"\"<< upper << \"\\\"\"<< std::endl;
            std::cout << \"lower before = \\\"\"<< lower << \"\\\"\"<< std::endl;
*/
            upper.erase(std::remove(upper.begin(), upper.end(), ' '), upper.end());
            lower.erase(std::remove(lower.begin(), lower.end(), ' '), lower.end());
/*
            std::cout << \"upper after = \\\"\"<< upper << \"\\\"\"<< std::endl;
            std::cout << \"lower after = \\\"\"<< lower << \"\\\"\"<< std::endl;
  */         
            std::string new_col_str;
            if ( ! upper.empty() )
            {
                std::string upper_col_str(WtBoard::row_count/2-upper.length(), ' ' );
                upper_col_str.append( upper );
                std::string lower_col_str(WtBoard::row_count/2-lower.length(), ' ' );
                lower.append( lower_col_str );
                new_col_str = upper_col_str;           
                new_col_str.append( lower );
            }
            else
            {
                std::string upper_col_str(WtBoard::row_count/2-1, ' ' );
                std::string lower_col_str(WtBoard::row_count/2+1-lower.length(), ' ' );
                lower.append( lower_col_str );
                new_col_str = upper_col_str;           
                new_col_str.append( lower );
            }

            //std::cout << \"new_col_str after = \\\"\" << new_col_str << \"\\\"\"<< std::endl;

            for ( uint8_t r_idx = 0; r_idx < WtBoard::row_count; r_idx++ )
            {
                char cell = new_col_str[ (WtBoard::row_count-1) - r_idx ];
                if ( cell == ' ' )
                {
                    if ( r_idx < WtBoard::row_count / 2 )
                    {
                        cell = ' ';
                    }
                    else
                    {
                        cell = WtBoard::empty_cell;
                    }
                }

                board.set_cell( r_idx, c_idx, cell );
            }

          //  std::cout << \"col_str after = \\\"\" << board.get_col_string( c_idx ) << \"\\\"\"<< std::endl;
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 218903 "erase_from_row"
	cpp_inline private explicit_return_type "void"
	nparams 4
	  param in name "r_idx" explicit_type "uint8_t"
	  param in name "row_str" explicit_type "std::string"
	  param in name "word" explicit_type "std::string"
	  param inout name "board" type class_ref 146711 // WtBoard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        //1. locate beginning
        size_t pos = row_str.find( word );
        std::cout << \"erase '\" << word << \"' from '\" << row_str << \"'\" <<std::endl;
        if ( pos != std::string::npos )
        {
            char replace_char = WtBoard::empty_cell;
            if ( r_idx < WtBoard::row_count/2 )
                replace_char = ' ';
            
            //2. replace acc.
            for( size_t c_idx = pos; c_idx < (pos + word.length()); c_idx++ )
            {
                board.set_cell( r_idx, (uint8_t)c_idx, replace_char );

                //3. push up or pull down if necessary
                column_gravity( c_idx, board );            
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 219031 "erase_from_col"
	cpp_inline private explicit_return_type "void"
	nparams 4
	  param in name "c_idx" explicit_type "uint8_t"
	  param in name "col_str" explicit_type "std::string"
	  param in name "word" explicit_type "std::string"
	  param inout name "board" type class_ref 146711 // WtBoard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        //1. locate beginning
        size_t pos = col_str.find( word );
        if ( pos != std::string::npos )
        {
          //  std::cout << \"colstr = \\\"\" << col_str << \"\\\"; word found at = \"<<pos<<\"w len = \"<<word.length()<<std::endl;
            pos = (WtBoard::row_count - pos) - 1;
            // iterate over rows
            for( size_t w_idx = 0; w_idx < word.length(); w_idx++ )
            {
                uint8_t r_idx = pos - w_idx;

                //2. if row <= row_count/2 replace with ' '
                //   else replace with empty_cell
                char replace_char = WtBoard::empty_cell;
                if ( r_idx < WtBoard::row_count/2 )
                    replace_char = ' ';

                board.set_cell( r_idx, c_idx, replace_char );
            }

            //3. push up or pull down if necessary
            column_gravity( c_idx, board );            
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 219159 "contains_word"
	cpp_inline private explicit_return_type "std::string"
	nparams 1
	  param in name "sequence" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::string result = \"\";

        // use dea with preprocessed contains logic to eval word

        // preprocessor of word list need to create a dea for each word
        // and the contains logic needs to take a list argment 
        // and process as logical OR dea which means parallel symbol
        // processing
        // dea list preprocessor sorts string list by length
        // and gets the max length as parameter for more efficient
        // searching
        // something like this:
        // WtWordList::search_for_word( sequence );
        // length is taken by sequence.length() within search
        // also language selection
        std::vector<std::string> found_words = m_wordlist.get_contained_words( sequence );

        if ( found_words.size() > 0 )
        {
            struct compare {
                bool operator()(const std::string& first, const std::string& second) {
                    return first.size() > second.size();
                }
            } c;

            std::sort(found_words.begin(), found_words.end(), c);

            for( size_t i = 0; i < found_words.size(); i++ )
                std::cout << \"(\" << i << \") \" << found_words[i] << std::endl;

            result = found_words[0];
        }

        return result;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 219287 "split"
	cpp_inline private explicit_return_type "std::vector<std::string>"
	nparams 1
	  param in name "board_str" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::istringstream iss(board_str);
        std::vector<std::string> result_list(std::istream_iterator<std::string>{iss},
                                         std::istream_iterator<std::string>());
        return result_list;
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 155287 "m_letters"
	const_attribute private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 154519 // m_wordlist (<directional composition>)
	relation 154519 *-->
	  a role_name "m_wordlist" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 154519 // m_wordlist (<directional composition>)
	  b parent class_ref 150807 // WtWordList
      end
    end

    class 150807 "WtWordList"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************************"
      class 155927 "EConvertChars"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 164503 "eToLower"
	  public type class_ref 155927 // EConvertChars
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 164631 "eToUpper"
	  public type class_ref 155927 // EConvertChars
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 164759 "eNone"
	  public type class_ref 155927 // EConvertChars
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 247831 "WtWordList"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
        load_lists();
    };
"
	
	
	
	
      end

      operation 247959 "WtWordList"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "input_list_name" explicit_type "std::string"
	  param in name "conv" type class_ref 155927 // EConvertChars
	    defaultvalue "eNone "
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} {
        load_lists();


        const std::vector<std::string>& input_list = get_wordlist_by_name( input_list_name );
        for( size_t i = 0; i < input_list.size(); i++ )
        {
            std::string input = input_list[i];
            if ( !input.empty() )
            {
                switch( conv )
                {
                    case eToLower: std::transform(input.begin(), input.end(), input.begin(), ::tolower); break;
                    case eToUpper: std::transform(input.begin(), input.end(), input.begin(), ::toupper); break;
                    default: break;
                }

                WtWord* w = new WtWord( input );
                m_words.push_back(w);
            }
        }
    };
"
	
	
	
	
      end

      operation 248087 "~WtWordList"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
        for( size_t w_idx = 0; w_idx < m_words.size(); w_idx++ )
            delete m_words[w_idx];
        m_words.clear();
    };
"
	
	
	
	
      end

      operation 248215 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_words.size();
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 248343 "load_from_list"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "input_list_name" explicit_type "std::string"
	  param in name "conv" type class_ref 155927 // EConvertChars
	    defaultvalue "eNone "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        const std::vector<std::string>& input_list = get_wordlist_by_name( input_list_name );

        for( size_t w_idx = 0; w_idx < m_words.size(); w_idx++ )
            delete m_words[w_idx];
        m_words.clear();

        for( size_t i = 0; i < input_list.size(); i++ )
        {
            std::string input = input_list[i];
            if ( !input.empty() )
            {
                switch( conv )
                {
                    case eToLower: std::transform(input.begin(), input.end(), input.begin(), ::tolower); break;
                    case eToUpper: std::transform(input.begin(), input.end(), input.begin(), ::toupper); break;
                    default: break;
                }

                WtWord* w = new WtWord( input );
                m_words.push_back(w);
            }
        }
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 248471 "get_contained_words"
	cpp_inline public explicit_return_type "std::vector<std::string>"
	nparams 1
	  param in name "sequence" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::vector<std::string> found_words;
        for( size_t idx = 0; idx<sequence.length(); idx++ )
        {
            for( size_t w_idx = 0; w_idx < m_words.size(); w_idx++ )
            {
//                std::cout << idx << \" update on \" << m_words[w_idx]->as_string() << std::endl;
                m_words[w_idx]->search_update( sequence[idx] );
            }
        }
        for( size_t w_idx = 0; w_idx < m_words.size(); w_idx++ )
        {
            if ( m_words[w_idx]->search_found() )
            {
                found_words.push_back( m_words[w_idx]->as_string() );
            }
            m_words[w_idx]->search_reset();
        }
        return found_words;
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 248599 "get_wordlist_by_name"
	cpp_inline public explicit_return_type "std::vector<std::string>"
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( name == \"short list\" )
            return m_list_short;
        if ( name == \"1k list\" )
            return m_list_medium;
        if ( name == \"5k list\" )
            return m_list_large;
        if ( name == \"20k list\" )
            return m_list_xlarge;
        else
            return m_list_short;
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 248727 "load_lists"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        load_list_from_file( \"short.txt\", WtL10n::get_language_code(), m_list_short );
        load_list_from_file( \"medium.txt\", WtL10n::get_language_code(), m_list_medium );
        load_list_from_file( \"large.txt\", WtL10n::get_language_code(), m_list_large );
        load_list_from_file( \"xlarge.txt\", WtL10n::get_language_code(), m_list_xlarge );
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 248855 "load_list_from_file"
	cpp_inline private explicit_return_type "void"
	nparams 3
	  param in name "list_name" explicit_type "std::string"
	  param in name "language" explicit_type "std::string"
	  param inout name "list" explicit_type "std::vector<std::string>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        std::string fname( \"wordlists/\" );
        fname.append(language).append(\"/\").append(list_name);
        std::cout << \"try to load wordlist at \\\"\" << fname << \"\\\"\" << std::endl;
        std::vector<uint8_t>& file_content = STORAGE.get_asset_file_buf( fname );
        // process....
        std::string str(file_content.begin(), file_content.end());
        std::stringstream ss(str);
        for (std::string each; std::getline(ss, each, '\\n'); list.push_back(each));
    };
"
	
	
	
	
	comment "
***********************************"
      end

      classrelation 166167 // m_words (<unidirectional association>)
	relation 166167 --->
	  stereotype "std::vector"
	  a role_name "m_words" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 166167 // m_words (<unidirectional association>)
	  b parent class_ref 155799 // WtWord
      end

      attribute 164887 "m_list_short"
	private explicit_type "std::string"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 165015 "m_list_medium"
	private explicit_type "std::string"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 165143 "m_list_large"
	private explicit_type "std::string"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 165271 "m_list_xlarge"
	private explicit_type "std::string"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 151447 "WtHorizontalCarousel"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 155415 "m_inactive_img"
	const_attribute private explicit_type "char"
	init_value "=  \"list_item_inactive.bmp\""
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 155543 "m_selected_img"
	const_attribute private explicit_type "char"
	init_value "=  \"list_item_active.bmp\""
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 156823 // m_item_img_size (<directional composition>)
	relation 156823 *-->
	  a role_name "m_item_img_size" init_value "=  WtDim( 328, 200 )" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	    classrelation_ref 156823 // m_item_img_size (<directional composition>)
	  b parent class_ref 146583 // WtDim
      end

      class 151575 "OnGameSelected"
	visibility package stereotype "template_typedef"
	cpp_decl "${comment}${template}using ${name} = ${inherit};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 156951 // <generalisation>
	  relation 156951 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 156951 // <generalisation>
	    b parent class_ref 151703 // typedef6
	end
      end

      class 151703 "typedef6"
	visibility package stereotype "typedef" explicit_base_type "std::function<void(size_t)>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 220311 "WtHorizontalCarousel"
	cpp_inline public explicit_return_type ""
	nparams 5
	  param in name "pos" type class_ref 146839 // WtCoord
	  param in name "size" type class_ref 146583 // WtDim
	  param in name "labels" explicit_type "std::vector<std::string>"
	  param in name "selected" explicit_type "size_t"
	  param in name "on_game_selected" type class_ref 151575 // OnGameSelected
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${volatile}${throw}${abstract} :

        m_clickable( std::bind ( &WtHorizontalCarousel::on_press, this, std::placeholders::_1 ),
                     std::bind ( &WtHorizontalCarousel::on_release, this, std::placeholders::_1 ),
                     std::bind ( &WtHorizontalCarousel::on_motion, this, std::placeholders::_1, std::placeholders::_2 ) ),

        m_pos( pos ),
        m_size( size ),
        m_labels( labels ),
        m_selected( selected ),
        m_first_pos( (size.w - m_item_img_size.w) / 2, 0 ),
        m_press_start_pos( -1, -1 ),
        m_on_game_selected( on_game_selected )
    {
    };
"
	
	
	
	
      end

      operation 220439 "~WtHorizontalCarousel"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 220567 "operator WtClickableIf&"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return get_observable();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 220695 "get_observable"
	cpp_inline public return_type class_ref 147735 // WtClickableIf
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_clickable;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 220823 "operator []"
	cpp_inline public return_type class_ref 147351 // WtButton
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return WtButton( get_pos_of_item( idx ),
                         m_item_img_size,
                         ( idx == m_selected ? m_selected_img : m_inactive_img ),
                         [](){},
                         m_labels[idx] );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 220951 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_labels.size();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 221079 "get_pos_of_item"
	cpp_inline private return_type class_ref 146839 // WtCoord
	nparams 1
	  param in name "idx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return WtCoord(m_first_pos.x+(328+6)*idx,0);

    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 221207 "on_press"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "pos" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::cout << \"on press at \" << pos << std::endl;
        if ( pos.in_region( m_pos, m_size ) )
        {
            m_press_start_pos = pos;
            m_active_motion_pos = pos;
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 221335 "on_release"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "pos" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
//        std::cout << \"release detected: (\" << pos.x << \",\" << pos.y << \") -> (\" << m_pos.x << \",\" << m_pos.y << \"):(\" << m_size.w << \",\" << m_size.h << \") -> \" << m_label << std::endl;
        if ( m_press_start_pos == WtCoord( -1, -1 ) )
        {
            if ( pos.in_region( m_pos, m_size ) )
            {
            }
        }
        m_press_start_pos = WtCoord( -1, -1 );
        m_active_motion_pos = m_press_start_pos;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 221463 "on_motion"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "" type class_ref 146839 // WtCoord
	  param inout name "d_pos" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        if ( m_press_start_pos != WtCoord( -1, -1 ) )
        {
            m_first_pos.x = m_first_pos.x + d_pos.x;
#if 0
                        if ( ( drag_btn->x() < 0 ) || ( drag_btn->x()+drag_btn->width() > ACTIVE_WINDOW_WIDTH ) )
                           drag_btn->set_image(\"list_item_inactive.bmp\"); 
                        else
                           drag_btn->set_image(\"list_item_active.bmp\"); 

#endif
            std::cout << \"first = \" << m_first_pos<<std::endl;
            m_active_motion_pos = m_active_motion_pos + d_pos;
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 157079 // m_clickable (<directional composition>)
	relation 157079 *-->
	  a role_name "m_clickable" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 157079 // m_clickable (<directional composition>)
	  b parent class_ref 147735 // WtClickableIf
      end

      classrelation 157207 // m_pos (<directional composition>)
	relation 157207 *-->
	  a role_name "m_pos" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 157207 // m_pos (<directional composition>)
	  b parent class_ref 146839 // WtCoord
      end

      classrelation 157335 // m_size (<directional composition>)
	relation 157335 *-->
	  a role_name "m_size" const_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 157335 // m_size (<directional composition>)
	  b parent class_ref 146583 // WtDim
      end

      attribute 155671 "m_labels"
	private explicit_type "std::string"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 155799 "m_selected"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 157463 // m_first_pos (<directional composition>)
	relation 157463 *-->
	  a role_name "m_first_pos" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 157463 // m_first_pos (<directional composition>)
	  b parent class_ref 146839 // WtCoord
      end

      classrelation 157591 // m_press_start_pos (<directional composition>)
	relation 157591 *-->
	  a role_name "m_press_start_pos" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 157591 // m_press_start_pos (<directional composition>)
	  b parent class_ref 146839 // WtCoord
      end

      classrelation 157719 // m_active_motion_pos (<directional composition>)
	relation 157719 *-->
	  a role_name "m_active_motion_pos" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 157719 // m_active_motion_pos (<directional composition>)
	  b parent class_ref 146839 // WtCoord
      end

      classrelation 157847 // m_on_game_selected (<directional composition>)
	relation 157847 *-->
	  a role_name "m_on_game_selected" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 157847 // m_on_game_selected (<directional composition>)
	  b parent class_ref 151575 // OnGameSelected
      end
    end

    class 151831 "WtInput"
      visibility package 
      nformals 1
      formal name "InputPolicy" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 157975 // <generalisation>
	relation 157975 ---|>
	  a private
	    cpp default "${type}"
	    classrelation_ref 157975 // <generalisation>
	  b parent class_ref 151959 // typedef7
      end

      operation 221591 "instance"
	class_operation cpp_inline public return_type class_ref 151831 // WtInput
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static WtInput _instance;
        return _instance;
    };
"
	
	
	
	
	comment " singleton definition"
      end

      operation 221719 "~WtInput"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 221847 "WtInput"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        InputPolicy()
    {
    };
"
	
	
	
	
      end

      operation 221975 "WtInput"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 151831 // WtInput
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 222103 "operator ="
	private return_type class_ref 151831 // WtInput
	nparams 1
	  param in name "" type class_ref 151831 // WtInput
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      class 152087 "OnKeyPressDelegate"
	visibility package stereotype "template_typedef"
	nformals 1
	formal name "InputPolicy" type "typename" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 151831 // WtInput
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}using ${name} = ${inherit};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	comment " api defintion"
	classrelation 158103 // <generalisation>
	  relation 158103 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 158103 // <generalisation>
	    b parent class_ref 152215 // typedef8
	end
      end

      class 152215 "typedef8"
	visibility package stereotype "typedef" explicit_base_type "std::function<void(wt_control)>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 222231 "register_key_press_delegate"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "on_key_press" type class_ref 152087 // OnKeyPressDelegate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_on_key_press = on_key_press;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 222359 "add_active_region"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "clickable_region" type class_ref 147735 // WtClickableIf
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        clickable_region.set_id ( m_active_regions.size() );
        m_active_regions.push_back( &clickable_region );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 222487 "remove_active_region"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "clickable_region" type class_ref 147735 // WtClickableIf
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        for ( size_t idx = 0; idx < m_active_regions.size(); idx++ )
        {
            if ( m_active_regions[idx]->id() == clickable_region.id() )
            {
                m_active_regions.erase( m_active_regions.begin() + idx );
                clickable_region.set_id( -1 );
                break;
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 222615 "read"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        
        WtInputEvent ev = InputPolicy::read_input();
        while ( ev.call_again )
        {
            if ( ev.is_key_event )
            {
                wt_control ch = ev.key;
                if ( m_on_key_press ) m_on_key_press( ch );
            }
            else
            {
                // eval button
                for ( size_t i = 0; i < m_active_regions.size(); i++ )
                {
                    if ( !ev.is_motion_event )
                    {
                        if ( ev.is_press_event )
                        {
                            m_active_regions[i]->trigger_press( ev.pos );
                        }
                        else
                        {
                            m_active_regions[i]->trigger_release( ev.pos );
                        }
                    }
                    else
                        m_active_regions[i]->trigger_motion( ev.pos, ev.d_pos );

                }
            }
            ev = InputPolicy::read_input();
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 222743 "get_input_help"
	cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return InputPolicy::get_key_map();
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 158231 // m_active_regions (<unidirectional association>)
	relation 158231 --->
	  stereotype "std::vector"
	  a role_name "m_active_regions" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 158231 // m_active_regions (<unidirectional association>)
	  b parent class_ref 147735 // WtClickableIf
      end

      classrelation 158359 // m_on_key_press (<directional composition>)
	relation 158359 *-->
	  a role_name "m_on_key_press" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 158359 // m_on_key_press (<directional composition>)
	  b parent class_ref 152087 // OnKeyPressDelegate
      end
    end

    class 151959 "typedef7"
      visibility package stereotype "typedef" explicit_base_type "InputPolicy"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
    end

    class 152343 "WtL10n"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      class 152471 "LocaleMap"
	visibility package stereotype "typedef" explicit_base_type "std::map< std::string, std::vector<std::string> >"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      attribute 155927 "m_available_languages"
	const_attribute private explicit_type "const char*, 3"
	init_value " { { WtL10n_tr(\"en\"),
                                                              WtL10n_tr(\"de\"),
                                                              WtL10n_tr(\"fr\") } }"
	stereotype "std::array"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 222871 "get_available_languages"
	class_operation cpp_inline public explicit_return_type "std::array<const char*, 3>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtL10n::instance().get_languages();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 222999 "set_language"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "lang_code" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        WtL10n::instance().set_lang( lang_code );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 223127 "get_language_code"
	class_operation cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return std::string( WtL10n::get_available_languages()[WtL10n::instance().active_language_idx()] );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 223255 "get_next_language_code"
	class_operation cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return std::string( WtL10n::get_available_languages()[(WtL10n::instance().active_language_idx() + 1) % WtL10n::get_available_languages().size()] );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 223383 "translate"
	class_operation cpp_inline public explicit_return_type "std::string"
	nparams 1
	  param in name "s" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        std::string result = s;
        if ( ! s.empty() )
        {
            LocaleMap& translations = WtL10n::instance().get_translations();
            LocaleMap::const_iterator it = translations.find(s);

            if ( it != translations.end() )
            {
                result = (*it).second[WtL10n::instance().active_language_idx()];
                if ( result.empty() )
                {
                    result = s;
                }
            }
            else
            {
                result = s;
            }

        }
        return result;
    };
"
	
	
	
	
	comment "this function does the translation
***********************"
      end

      operation 223511 "~WtL10n"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 223639 "instance"
	class_operation cpp_inline private return_type class_ref 152343 // WtL10n
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static WtL10n locale;
        return locale;
    };
"
	
	
	
	
      end

      operation 223767 "WtL10n"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        m_active_language_idx(0)
    {
        read_translations( m_translations );
    };
"
	
	
	
	
      end

      operation 223895 "active_language_idx"
	cpp_inline private explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_active_language_idx;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 224023 "get_translations"
	cpp_inline private return_type class_ref 152471 // LocaleMap
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_translations;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 224151 "set_lang"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "lang_code" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        for( size_t l_idx = 0; l_idx < WtL10n::get_available_languages().size(); l_idx++ )
        {
            if ( WtL10n::get_available_languages()[l_idx] == lang_code )
            {
                m_active_language_idx = l_idx;
                break;
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 224279 "get_languages"
	cpp_inline private explicit_return_type "std::array<const char*, 3>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_available_languages;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 224407 "read_xml"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "tr_tu" explicit_type "std::vector<std::string>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        //TODO wont work; see https://en.wikibooks.org/wiki/OpenGL_Programming/Android_GLUT_Wrapper#Accessing_assets
        std::ifstream file( \"l10n_texts.xml\" );

        if ( file )
        {
            std::stringstream buffer;
            buffer << file.rdbuf();
            file.close();

            // operations on the buffer...
            std::string xml_hdr;
            std::getline( buffer, xml_hdr );
            if ( xml_hdr == \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\" ?>\" )
            {
                std::string root;
                std::getline( buffer, root );
                if ( root == \"<translations>\" )
                {
                    std::string tu;
                    bool tu_started = false;

                    while( !buffer.eof() )
                    {
                        std::string line;
                        std::getline(buffer, line);
//                        std::cout << \"# \" << line << std::endl;
                        trim(line);

                        if ( line == \"<tu>\" )
                            tu_started = true;
                        else if ( line == \"</tu>\" )
                        {
                            tu.append(line);
                            tr_tu.push_back(tu);
                            tu = \"\";
                            tu_started = false;
                        }
                        else
                        {}

                        if ( tu_started )
                            tu.append(line);
                    }
                }
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 224535 "process_tu"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param in name "tu" explicit_type "std::string"
	  param inout name "locale" type class_ref 152471 // LocaleMap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        size_t src_start_pos = tu.find( \"<src>\" ) + std::string(\"<src>\").length();
        size_t src_end_pos = tu.find( \"</src>\" );

        std::string src = tu.substr( src_start_pos, src_end_pos - src_start_pos );
        //std::cout << \">> \" << src << std::endl;

        size_t l_start_pos = src_end_pos + std::string(\"</src>\").length();
        size_t l_end_pos = tu.find( \"</l>\", l_start_pos );
        while ( l_end_pos != std::string::npos )
        {
            std::string l = tu.substr( l_start_pos, l_end_pos - l_start_pos );

            std::string l_code = l.substr( l.find( \"\\\"\")+1, 2 );
            std::string l_text = l.substr( l.find( \">\" )+1 );
          //  std::cout << \">>>  (\" << l_code << \") \"  << l_text << std::endl;

            locale[src].push_back(l_text);

            l_start_pos = l_end_pos + std::string(\"</l>\").length();
            l_end_pos = tu.find( \"</l>\", l_start_pos );
        }
    };
"
	
	
	
	
	comment "<tu><src>you lost! :P</src><l code=\"en\">You lost!</l><l code=\"de\">Du hast verloren!</l><l code=\"fr\">Tu as perdu!</l>
***********************"
      end

      operation 224663 "read_translations"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "locale" type class_ref 152471 // LocaleMap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
#ifdef READ_TEXTS_FROM_XML
        std::vector<std::string> tr_tu;
        read_xml( tr_tu );

        for(size_t i=0;i<tr_tu.size();i++)
        {
           // std::cout << \"> \" << tr_tu[i] << std::endl;

            process_tu( tr_tu[i], locale );
        }
#endif /* READ_TEXTS_FROM_XML */

#ifdef READ_TEXTS_FROM_HEADER
        for(size_t i=0;i<wt_translations.size();i++)
        {
            locale[wt_translations[i].src] = wt_translations[i].texts;
        }
#endif /* READ_TEXTS_FROM_HEADER */        
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 156055 "m_active_language_idx"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 158487 // m_translations (<directional composition>)
	relation 158487 *-->
	  a role_name "m_translations" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 158487 // m_translations (<directional composition>)
	  b parent class_ref 152471 // LocaleMap
      end
    end

    class 152599 "WtTranslationTexts"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 156183 "src"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 156311 "texts"
	public explicit_type "std::string"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 152727 "WtMenuCtr"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 158615 // <generalisation>
	relation 158615 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 158615 // <generalisation>
	  b parent class_ref 149655 // WtMenuIf
      end

      operation 224791 "instance"
	class_operation cpp_inline public return_type class_ref 152727 // WtMenuCtr
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static WtMenuCtr _instance;
        return _instance;
    };
"
	
	
	
	
	comment " singleton definition"
      end

      operation 224919 "~WtMenuCtr"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 225047 "WtMenuCtr"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtMenuIf( 0x100, \"bg_menu_settings.bmp\" ),
        m_drag_start_pos(0,0),
        m_was_drag(false),
        m_drag_button_id(0),
        m_start_btn( WtCoord( 170, 493 ), 
                     WtDim( 200, 200 ),
                     \"start_btn.bmp\",
                     std::bind ( &WtMenuCtr::leave, this ) ),
        m_score_btn( WtCoord( 105, 800 ), 
                     WtDim( 100, 100 ), 
                     \"score_btn.bmp\",
                     std::bind ( &WtMenuCtr::enter_score_menu, this ) ),
        m_setting_btn( WtCoord( 332, 800 ),
                       WtDim( 100, 100 ),
                       \"settings_btn.bmp\",
                       std::bind ( &WtMenuCtr::enter_settings_menu, this ) ),
        m_game_selection( WtCoord( 0, 100 ),
                          WtDim( ACTIVE_WINDOW_WIDTH, 200 ),
                          GAME_MODE_CTR.get_available_mode_titles(),
                          0,
                          [](size_t){} )
    {
        add_button( m_start_btn );
        add_button( m_score_btn );
        add_button( m_setting_btn );
        add_horizontal_carousel( m_game_selection );

        m_settings.listen( m_pause_menu.get_help_listener() );

    };
"
	
	
	
	
      end

      operation 225175 "WtMenuCtr"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 152727 // WtMenuCtr
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 225303 "operator ="
	private return_type class_ref 152727 // WtMenuCtr
	nparams 1
	  param in name "" type class_ref 152727 // WtMenuCtr
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 225431 "get_pause_menu"
	cpp_inline public return_type class_ref 149655 // WtMenuIf
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return &m_pause_menu;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 225559 "listen"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 149015 // WtSettingsChangeObserver
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        WtMenuIf::listen( listener );
        m_settings.listen( listener );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 225687 "enter_score_menu"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        std::cout << \"enter score menu\\n\";
        enter_child_menu( m_scores );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 225815 "enter_settings_menu"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        enter_child_menu( m_settings );
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 158743 // m_drag_start_pos (<directional composition>)
	relation 158743 *-->
	  a role_name "m_drag_start_pos" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 158743 // m_drag_start_pos (<directional composition>)
	  b parent class_ref 146839 // WtCoord
      end

      attribute 156439 "m_was_drag"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 156567 "m_drag_button_id"
	private explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 158871 // m_settings (<directional composition>)
	relation 158871 *-->
	  a role_name "m_settings" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 158871 // m_settings (<directional composition>)
	  b parent class_ref 152855 // WtMenuSettings
      end

      classrelation 158999 // m_pause_menu (<directional composition>)
	relation 158999 *-->
	  a role_name "m_pause_menu" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 158999 // m_pause_menu (<directional composition>)
	  b parent class_ref 152983 // WtMenuPause
      end

      classrelation 159127 // m_scores (<directional composition>)
	relation 159127 *-->
	  a role_name "m_scores" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 159127 // m_scores (<directional composition>)
	  b parent class_ref 153111 // WtMenuHighscores
      end

      classrelation 159255 // m_start_btn (<directional composition>)
	relation 159255 *-->
	  a role_name "m_start_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 159255 // m_start_btn (<directional composition>)
	  b parent class_ref 147351 // WtButton
      end

      classrelation 159383 // m_score_btn (<directional composition>)
	relation 159383 *-->
	  a role_name "m_score_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 159383 // m_score_btn (<directional composition>)
	  b parent class_ref 147351 // WtButton
      end

      classrelation 159511 // m_setting_btn (<directional composition>)
	relation 159511 *-->
	  a role_name "m_setting_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 159511 // m_setting_btn (<directional composition>)
	  b parent class_ref 147351 // WtButton
      end

      classrelation 159639 // m_game_selection (<directional composition>)
	relation 159639 *-->
	  a role_name "m_game_selection" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 159639 // m_game_selection (<directional composition>)
	  b parent class_ref 151447 // WtHorizontalCarousel
      end
    end

    class 152855 "WtMenuSettings"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 162199 // <generalisation>
	relation 162199 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 162199 // <generalisation>
	  b parent class_ref 149655 // WtMenuIf
      end

      attribute 157463 "offset_x"
	class_attribute const_attribute private explicit_type "size_t"
	init_value "=  (ACTIVE_WINDOW_WIDTH - 328) / 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 157591 "offset_y"
	class_attribute const_attribute private explicit_type "size_t"
	init_value "=  (ACTIVE_WINDOW_HEIGHT / 2) - (ACTIVE_WINDOW_HEIGHT / 4)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 157719 "m_selectable_themes"
	const_attribute private explicit_type "const char*, 3"
	init_value " { \"light\",
                                                           \"dark\",
                                                           \"mono\" }"
	stereotype "std::array"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 231703 "WtMenuSettings"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtMenuIf( 0x300, \"bg_menu_settings.bmp\" ),
        m_current_diff(0),
        m_leave_btn( WtCoord( 105, 800 ), 
                     WtDim(100, 100), 
                     \"back_btn.bmp\",
                     std::bind ( &WtMenuSettings::leave, this ) ),
        m_select_mode_btn( WtCoord( offset_x, offset_y ), 
                           WtDim(328, 69), 
                           \"menu_btn.bmp\", 
                           std::bind ( &WtMenuSettings::select_pressed, this ),
                           WtL10n_tr(\"select game mode\") ),
        m_lang_select_btn( WtCoord( offset_x, offset_y + 69 + 20 ),
                           WtDim( 328, 69 ),
                           WtL10n::get_available_languages(),
                           0,
                           std::bind ( &WtMenuSettings::lang_changed, this, std::placeholders::_1 ) ),
        m_diff_select_btn( WtCoord( offset_x, offset_y + (69 + 20)*2 ),
                           WtDim( 328, 69 ),
                           std::array<const char*, 3>{{ WtGameModeIf::get_available_difficulties()[0].second,
                                                        WtGameModeIf::get_available_difficulties()[1].second,
                                                        WtGameModeIf::get_available_difficulties()[2].second }},
                           0,
                           std::bind ( &WtMenuSettings::diff_changed, this, std::placeholders::_1 ) ),
        m_theme_select_btn( WtCoord( offset_x, offset_y + (69 + 20)*3 ),
                            WtDim( 328, 69 ),
                            m_selectable_themes,
                            0,
                            std::bind ( &WtMenuSettings::theme_changed, this, std::placeholders::_1 ) )
    {
        for ( size_t idx = 0; idx < WtL10n::get_available_languages().size(); idx++ )
        {
            if ( WtL10n::get_available_languages()[idx] == WtL10n::get_language_code() )
            {
                m_lang_select_btn.select( (uint8_t) idx );
                break;
            }
        }

        switch( STORAGE.get_settings().difficulty )
        {
            default: break;
            case wt_difficulty_EASY:
                m_diff_select_btn.select( 0 );
                break;
            case wt_difficulty_MEDIUM:
                m_diff_select_btn.select( 1 );
                break;
            case wt_difficulty_HARD:
                m_diff_select_btn.select( 2 );
                break;
        }

        if ( STORAGE.get_settings().active_theme != \"default\" )
        {
            for ( size_t l_idx = 0; l_idx < m_selectable_themes.size(); l_idx++ )
            {
                if ( m_selectable_themes[l_idx] == STORAGE.get_settings().active_theme )
                {
                    m_theme_select_btn.select( l_idx );
                    break;
                }
            }
        }


        add_button( m_leave_btn );
        add_button( m_select_mode_btn );
        add_tristate_button( m_lang_select_btn );
        add_tristate_button( m_diff_select_btn );
        add_tristate_button( m_theme_select_btn );

    };
"
	
	
	
	
      end

      operation 231831 "~WtMenuSettings"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 231959 "WtMenuSettings"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 152855 // WtMenuSettings
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " no copy allowed"
      end

      operation 232087 "operator ="
	private return_type class_ref 152855 // WtMenuSettings
	nparams 1
	  param in name "" type class_ref 152855 // WtMenuSettings
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 232215 "listen"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 149015 // WtSettingsChangeObserver
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        WtMenuIf::listen( listener );
        m_select_mode.listen( listener );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 232343 "select_pressed"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        enter_child_menu( m_select_mode );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 232471 "diff_changed"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        size_t diff_idx = id;
        if ( STORAGE.get_settings().difficulty != WtGameModeIf::get_available_difficulties()[diff_idx].first )
        {
            for( size_t idx = 0; idx < get_listener().size(); idx++ )
            {
                get_listener()[idx]->notify_difficulty_changed( WtGameModeIf::get_available_difficulties()[diff_idx].first );
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 232599 "lang_changed"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        size_t lang_idx = id;
        if ( WtL10n::get_language_code() != WtL10n::get_available_languages()[lang_idx] )
        {
            WtL10n::set_language( WtL10n::get_available_languages()[lang_idx] );
            for( size_t idx = 0; idx < get_listener().size(); idx++ )
            {
                get_listener()[idx]->notify_language_changed( WtL10n::get_language_code() );
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 232727 "theme_changed"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( STORAGE.get_settings().active_theme != m_selectable_themes[id] )
        {
            for( size_t idx = 0; idx < get_listener().size(); idx++ )
            {
                get_listener()[idx]->notify_theme_changed( std::string( m_selectable_themes[id] ) );
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 157847 "m_current_diff"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 162327 // m_select_mode (<directional composition>)
	relation 162327 *-->
	  a role_name "m_select_mode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 162327 // m_select_mode (<directional composition>)
	  b parent class_ref 153239 // WtMenuSelectMode
      end

      classrelation 162455 // m_leave_btn (<directional composition>)
	relation 162455 *-->
	  a role_name "m_leave_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 162455 // m_leave_btn (<directional composition>)
	  b parent class_ref 147351 // WtButton
      end

      classrelation 162583 // m_select_mode_btn (<directional composition>)
	relation 162583 *-->
	  a role_name "m_select_mode_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 162583 // m_select_mode_btn (<directional composition>)
	  b parent class_ref 147351 // WtButton
      end

      classrelation 162711 // m_lang_select_btn (<directional composition>)
	relation 162711 *-->
	  a role_name "m_lang_select_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 162711 // m_lang_select_btn (<directional composition>)
	  b parent class_ref 153495 // WtTriStateButton
      end

      classrelation 162839 // m_diff_select_btn (<directional composition>)
	relation 162839 *-->
	  a role_name "m_diff_select_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 162839 // m_diff_select_btn (<directional composition>)
	  b parent class_ref 153495 // WtTriStateButton
      end

      classrelation 162967 // m_theme_select_btn (<directional composition>)
	relation 162967 *-->
	  a role_name "m_theme_select_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 162967 // m_theme_select_btn (<directional composition>)
	  b parent class_ref 153495 // WtTriStateButton
      end
    end

    class 152983 "WtMenuPause"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 161431 // <generalisation>
	relation 161431 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 161431 // <generalisation>
	  b parent class_ref 149655 // WtMenuIf
      end

      attribute 157207 "offset_x"
	class_attribute const_attribute private explicit_type "size_t"
	init_value "=  (ACTIVE_WINDOW_WIDTH) / 2"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 157335 "offset_y"
	class_attribute const_attribute private explicit_type "size_t"
	init_value "=  (ACTIVE_WINDOW_HEIGHT / 2)"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 230679 "WtMenuPause"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtMenuIf( 0x200, \"bg_menu_pause.bmp\", false ),
        m_leave_btn( WtCoord(offset_x - 158, offset_y-100), 
                     WtDim(100, 100),
                     \"back_btn.bmp\",
                     std::bind ( &WtMenuPause::leave, this ) ),
        m_redo_btn( WtCoord(offset_x + 58, offset_y-100), 
                    WtDim(100, 100),
                    \"redo_btn.bmp\",
                    std::bind ( &WtMenuPause::restart_pressed, this ) ),
        m_quit_btn( WtCoord(offset_x + 58, offset_y+100),
                    WtDim(100, 100),
                    \"quit_btn.bmp\",
                    std::bind ( &WtMenuPause::quit_pressed, this ) ),
        m_help_btn( WtCoord(offset_x - 158, offset_y+100),
                    WtDim(100, 100),
                    \"help_btn.bmp\",
                    std::bind ( &WtMenuPause::help_pressed, this ) )
    {


        add_button( m_leave_btn );
        add_button( m_redo_btn );
        add_button( m_quit_btn );
        add_button( m_help_btn );
    };
"
	
	
	
	
      end

      operation 230807 "~WtMenuPause"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 230935 "WtMenuPause"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 152983 // WtMenuPause
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " no copy allowed"
      end

      operation 231063 "operator ="
	private return_type class_ref 152983 // WtMenuPause
	nparams 1
	  param in name "" type class_ref 152983 // WtMenuPause
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 231191 "restart_pressed"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        GAME_CTR.restart();
        leave();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 231319 "quit_pressed"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        GAME_CTR.quit();
        leave();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 231447 "help_pressed"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        enter_child_menu( m_help );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 231575 "get_help_listener"
	cpp_virtual cpp_inline public return_type class_ref 149015 // WtSettingsChangeObserver
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return &m_help;
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 161559 // m_help (<directional composition>)
	relation 161559 *-->
	  a role_name "m_help" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 161559 // m_help (<directional composition>)
	  b parent class_ref 153367 // WtMenuHelp
      end

      classrelation 161687 // m_leave_btn (<directional composition>)
	relation 161687 *-->
	  a role_name "m_leave_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 161687 // m_leave_btn (<directional composition>)
	  b parent class_ref 147351 // WtButton
      end

      classrelation 161815 // m_redo_btn (<directional composition>)
	relation 161815 *-->
	  a role_name "m_redo_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 161815 // m_redo_btn (<directional composition>)
	  b parent class_ref 147351 // WtButton
      end

      classrelation 161943 // m_quit_btn (<directional composition>)
	relation 161943 *-->
	  a role_name "m_quit_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 161943 // m_quit_btn (<directional composition>)
	  b parent class_ref 147351 // WtButton
      end

      classrelation 162071 // m_help_btn (<directional composition>)
	relation 162071 *-->
	  a role_name "m_help_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 162071 // m_help_btn (<directional composition>)
	  b parent class_ref 147351 // WtButton
      end
    end

    class 153111 "WtMenuHighscores"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 160663 // <generalisation>
	relation 160663 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 160663 // <generalisation>
	  b parent class_ref 149655 // WtMenuIf
      end

      operation 227607 "WtMenuHighscores"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtMenuIf( 0x400, \"bg_menu_settings.bmp\" ),
        m_leave_btn( WtCoord( 105, 800 ), 
                     WtDim(100, 100), 
                     \"back_btn.bmp\",
                     std::bind ( &WtMenuHighscores::leave, this ) )
    {
        add_button( m_leave_btn );
    };
"
	
	
	
	
      end

      operation 227735 "~WtMenuHighscores"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 227863 "WtMenuHighscores"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 153111 // WtMenuHighscores
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " no copy allowed"
      end

      operation 227991 "operator ="
	private return_type class_ref 153111 // WtMenuHighscores
	nparams 1
	  param in name "" type class_ref 153111 // WtMenuHighscores
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      classrelation 160791 // m_leave_btn (<directional composition>)
	relation 160791 *-->
	  a role_name "m_leave_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 160791 // m_leave_btn (<directional composition>)
	  b parent class_ref 147351 // WtButton
      end
    end

    class 153239 "WtMenuSelectMode"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 159767 // <generalisation>
	relation 159767 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 159767 // <generalisation>
	  b parent class_ref 149655 // WtMenuIf
      end

      operation 225943 "WtMenuSelectMode"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtMenuIf( 0x200, \"bg_menu_settings.bmp\" ),
        m_leave_btn( WtCoord( 105, 800 ), 
                     WtDim(100, 100), 
                     \"back_btn.bmp\",
                     std::bind ( &WtMenuSelectMode::leave, this ) )
    {
        ssize_t offset_x = (ACTIVE_WINDOW_WIDTH - 328) / 2;
        ssize_t offset_y = (ACTIVE_WINDOW_HEIGHT / 2) - (ACTIVE_WINDOW_HEIGHT / 4 );

        std::vector<WtGameModeIf*>& available_modes = GAME_MODE_CTR.get_available_modes();

        m_game_mode_list.clear();
        for( size_t idx = 0; idx < available_modes.size(); idx++ )
        {
            WtGameModeIf* current_mode = available_modes[idx];

            std::function<void(void)> cb = [this, idx]() {
                                                            std::cout << \"button \" << idx << \" pressed\\n\";
                                                            for( size_t l_idx = 0; l_idx < get_listener().size(); l_idx++ )
                                                            {
                                                                get_listener()[l_idx]->notify_game_mode_changed( GAME_MODE_CTR.get_available_modes()[idx] );
                                                            }
                                                            leave();
                                                         };
            WtButton* mode_btn = new WtButton( WtCoord(offset_x, offset_y+(idx*(69+20))),
                                               WtDim(328, 69),
                                               \"menu_btn.bmp\",
                                               cb,
                                               current_mode->get_title() );
            m_game_mode_list.push_back( mode_btn );
            add_button( *mode_btn );
        }
        add_button( m_leave_btn );
    };
"
	
	
	
	
      end

      operation 226071 "~WtMenuSelectMode"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
        for ( size_t idx = 0; idx < m_game_mode_list.size(); idx++ ) 
            delete m_game_mode_list[idx];
    };
"
	
	
	
	
      end

      operation 226199 "WtMenuSelectMode"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 153239 // WtMenuSelectMode
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " no copy allowed"
      end

      operation 226327 "operator ="
	private return_type class_ref 153239 // WtMenuSelectMode
	nparams 1
	  param in name "" type class_ref 153239 // WtMenuSelectMode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      classrelation 159895 // m_leave_btn (<directional composition>)
	relation 159895 *-->
	  a role_name "m_leave_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 159895 // m_leave_btn (<directional composition>)
	  b parent class_ref 147351 // WtButton
      end

      classrelation 160023 // m_game_mode_list (<unidirectional association>)
	relation 160023 --->
	  stereotype "std::vector"
	  a role_name "m_game_mode_list" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}*> ${name}${value};
"
	    classrelation_ref 160023 // m_game_mode_list (<unidirectional association>)
	  b parent class_ref 147351 // WtButton
      end
    end

    class 153367 "WtMenuHelp"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 160151 // <generalisation>
	relation 160151 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 160151 // <generalisation>
	  b parent class_ref 149655 // WtMenuIf
      end

      classrelation 160279 // <generalisation>
	relation 160279 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 160279 // <generalisation>
	  b parent class_ref 149015 // WtSettingsChangeObserver
      end

      operation 226455 "WtMenuHelp"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        WtMenuIf( 0x500, \"bg_menu_pause.bmp\", false ),
        m_selected_mode( GAME_MODE_CTR.mode_from_string( STORAGE.get_settings().game_mode ) ),
        m_leave_btn( WtCoord( 105, 800 ), 
                     WtDim(100, 100), 
                     \"back_btn.bmp\",
                     std::bind ( &WtMenuHelp::leave, this ) )
    {
        add_button( m_leave_btn );
    };
"
	
	
	
	
      end

      operation 226583 "~WtMenuHelp"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 226711 "WtMenuHelp"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 153367 // WtMenuHelp
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " no copy allowed"
      end

      operation 226839 "operator ="
	private return_type class_ref 153367 // WtMenuHelp
	nparams 1
	  param in name "" type class_ref 153367 // WtMenuHelp
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 226967 "notify_language_changed"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
	comment "
***********************"
      end

      operation 227095 "notify_difficulty_changed"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "" type class_ref 149399 // wt_difficulty
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
	comment "
***********************"
      end

      operation 227223 "notify_theme_changed"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {};
"
	
	
	
	
	comment "
***********************"
      end

      operation 227351 "notify_game_mode_changed"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "mode" type class_ref 149271 // WtGameModeIf
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_selected_mode = mode;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 227479 "menu_update"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if ( m_selected_mode != INVALID_GAME_MODE )
        {
            ACTIVE_WINDOW.draw_help_box( m_selected_mode->get_help() );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 160407 // m_selected_mode (<unidirectional association>)
	relation 160407 --->
	  a role_name "m_selected_mode" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 160407 // m_selected_mode (<unidirectional association>)
	  b parent class_ref 149271 // WtGameModeIf
      end

      classrelation 160535 // m_leave_btn (<directional composition>)
	relation 160535 *-->
	  a role_name "m_leave_btn" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 160535 // m_leave_btn (<directional composition>)
	  b parent class_ref 147351 // WtButton
      end
    end

    class 153495 "WtTriStateButton"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 160791 "m_tri_state_frame"
	const_attribute private explicit_type "char"
	init_value "=    \"tri_state_btn.bmp\""
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 160919 "m_tri_state_selected_img"
	const_attribute private explicit_type "char"
	multiplicity "[3]"
	init_value "=  { \"tri_state_btn_select0.bmp\", 
                                                                 \"tri_state_btn_select1.bmp\", 
                                                                 \"tri_state_btn_select2.bmp\" }"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 161047 "m_tri_state_unselected_img"
	const_attribute private explicit_type "char"
	init_value "=    \"tri_state_btn_select_none.bmp\""
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 155159 "OnItemTapDelegate"
	visibility package stereotype "template_typedef"
	cpp_decl "${comment}${template}using ${name} = ${inherit};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 164631 // <generalisation>
	  relation 164631 ---|>
	    a public
	      cpp default "${type}"
	      classrelation_ref 164631 // <generalisation>
	    b parent class_ref 155287 // typedef9
	end
      end

      class 155287 "typedef9"
	visibility package stereotype "typedef" explicit_base_type "std::function<void(uint8_t)>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 242455 "WtTriStateButton"
	cpp_inline public explicit_return_type ""
	nparams 5
	  param in name "pos" type class_ref 146839 // WtCoord
	  param in name "size" type class_ref 146583 // WtDim
	  param in name "label" explicit_type "std::array<const char*, 3>"
	  param in name "selected" explicit_type "uint8_t"
	  param in name "on_item_tap" type class_ref 155159 // OnItemTapDelegate
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${volatile}${throw}${abstract} :

        m_clickable( [](WtCoord&) {},
                     std::bind ( &WtTriStateButton::on_release, this, std::placeholders::_1 ),
                     [](WtCoord&, WtCoord&) {} ),

        m_pos( pos ),
        m_size( size ),
        m_item_size( (size.w - 1) / 3, size.h - 2 ),
        m_label{ label[0], label[1], label[2] },
        m_selected( selected ),
        m_on_item_tap( on_item_tap )
    {
    };
"
	
	
	
	
      end

      operation 242583 "~WtTriStateButton"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 242711 "operator WtClickableIf&"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return get_observable();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 242839 "get_observable"
	cpp_inline public return_type class_ref 147735 // WtClickableIf
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_clickable;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 242967 "item_label"
	stereotype "template"
	cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}template<uint8_t const idx>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static_assert( idx < 3, \"tri_state_button has only 3 items\" );

        return WtL10n::translate(m_label[idx]);
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 243095 "background_image"
	cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_tri_state_frame;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 243223 "item_image"
	stereotype "template"
	cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}template<uint8_t const idx>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static_assert( idx < 3, \"tri_state_button has only 3 items\" );

        if ( m_selected == idx )
            return m_tri_state_selected_img[idx];
        else
            return m_tri_state_unselected_img;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 243351 "item"
	stereotype "template"
	cpp_inline public return_type class_ref 147351 // WtButton
	nparams 0
	cpp_decl "    ${comment}template<uint8_t const idx>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static_assert( idx < 3, \"tri_state_button has only 3 items\" );
        WtCoord item_pos( m_pos.x + 1, m_pos.y + 1 );
        if ( idx > 0 )
            item_pos.moveX( m_item_size );
        if ( idx > 1 )
            item_pos.moveX( m_item_size );

        return WtButton( item_pos,
                         m_item_size,
                         item_image<idx>(),
                         [](){},
                         item_label<idx>() );

    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 243479 "width"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_size.w;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 243607 "height"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_size.h;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 243735 "size"
	const cpp_inline public return_type class_ref 146583 // WtDim
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_size;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 243863 "position"
	const cpp_inline public return_type class_ref 146839 // WtCoord
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_pos;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 243991 "set_position"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "new_pos" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_pos = new_pos;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 244119 "x"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_pos.x;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 244247 "set_x"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "x" explicit_type "ssize_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_pos.x = x;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 244375 "y"
	cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_pos.y;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 244503 "select"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( id < 3 )
        {
            m_selected = id;
        }
        else
        {
            std::cout << \"id out of range\\n\";
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 244631 "on_release"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "pos" type class_ref 146839 // WtCoord
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if ( pos.in_region( m_pos, m_size ) )
        {
            WtCoord working_state_pos = WtCoord( m_pos.x + 1, m_pos.y + 1 );

            uint8_t selected = 0;
            if ( pos.in_region( working_state_pos, m_item_size ) )
            {
                selected = 0;
            }

            working_state_pos.moveX( m_item_size );           
            if ( pos.in_region( working_state_pos, m_item_size ) )
            {
                selected = 1;
            }

            working_state_pos.moveX( m_item_size );           
            if ( pos.in_region( working_state_pos, m_item_size ) )
            {
                selected = 2;
            }

            m_selected = selected;

            if ( m_on_item_tap ) m_on_item_tap( m_selected );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      classrelation 164759 // m_clickable (<directional composition>)
	relation 164759 *-->
	  a role_name "m_clickable" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 164759 // m_clickable (<directional composition>)
	  b parent class_ref 147735 // WtClickableIf
      end

      classrelation 164887 // m_pos (<directional composition>)
	relation 164887 *-->
	  a role_name "m_pos" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 164887 // m_pos (<directional composition>)
	  b parent class_ref 146839 // WtCoord
      end

      classrelation 165015 // m_size (<directional composition>)
	relation 165015 *-->
	  a role_name "m_size" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 165015 // m_size (<directional composition>)
	  b parent class_ref 146583 // WtDim
      end

      classrelation 165143 // m_item_size (<directional composition>)
	relation 165143 *-->
	  a role_name "m_item_size" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 165143 // m_item_size (<directional composition>)
	  b parent class_ref 146583 // WtDim
      end

      attribute 161175 "m_label"
	private explicit_type "std::string"
	multiplicity "[3]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 161303 "m_selected"
	private explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 165271 // m_on_item_tap (<directional composition>)
	relation 165271 *-->
	  a role_name "m_on_item_tap" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 165271 // m_on_item_tap (<directional composition>)
	  b parent class_ref 155159 // OnItemTapDelegate
      end
    end

    class 153623 "WtRandom"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 234391 "get_random_from_sequence"
	class_operation cpp_inline public explicit_return_type "size_t"
	nparams 1
	  param inout name "seq" explicit_type "std::vector<size_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        char result = 0;
        uint8_t buf;
        if ( WtRandom::getrandom( &buf, 1 ) <= 1 )
        {
            result = seq[(buf % seq.size() )];
        }
        return result;
    };
"
	
	
	
	
	comment "
***************************************************************************"
      end

      operation 234519 "get_random_letter_of_weight_seq"
	class_operation cpp_inline public explicit_return_type "char"
	nparams 2
	  param in name "word" explicit_type "std::string"
	  param in name "dist" explicit_type "std::discrete_distribution<int>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        char result = '\\0';
        unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
        std::default_random_engine generator(seed);
        int random = dist( generator );

        result = word[(random % word.length())];

/*
        size_t max_weight = (word.length()+1) * (word.length()/2);

        ssize_t buf;
        if ( WtRandom::getrandom( (uint8_t*)&buf, sizeof(size_t) ) <= (ssize_t)sizeof(size_t) )
        {
            buf = (buf % max_weight);
            uint8_t i;
            for ( i = 0; i < word.length(); i++ )
            {
                buf = buf - (word.length() - i);
                if ( buf <= 0 )
                {
                    result = word.at(i);
                    break;
                }
            }
        }
*/
        return result;
    };
"
	
	
	
	
	comment "
***************************************************************************"
      end

      operation 234647 "get_random_letter_of_word"
	class_operation cpp_inline public explicit_return_type "char"
	nparams 1
	  param in name "word" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        char result = 0;
        uint8_t buf;
        if ( WtRandom::getrandom( &buf, 1 ) <= 1 )
        {
            result = word[(buf % word.length() )];
        }
        return result;
    };
"
	
	
	
	
	comment "
***************************************************************************"
      end

      operation 234775 "get_next_random_letter"
	class_operation cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
//      return get_weighted_random_letter();
        return get_purely_random_letter();
    };
"
	
	
	
	
	comment "
***************************************************************************"
      end

      operation 234903 "roll_dice"
	class_operation cpp_inline public explicit_return_type "uint8_t"
	nparams 1
	  param in name "dice" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        uint8_t result = 0;
        uint8_t buf;
        if ( WtRandom::getrandom( &buf, 1 ) == 1 )
        {
            result = 1+(buf % dice);
        }
        return result;
    };
"
	
	
	
	
	comment "
***************************************************************************"
      end

      operation 235031 "get_weighted_random_letter"
	class_operation cpp_inline private explicit_return_type "char"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        const char letters[LETTER_COUNT] = 
                     { 'e','t','a','o','i','n','s','r','h','d','l','u','c',
                       'm','f','y','w','g','p','b','v','k','x','q','j','z' };
        char result = 0;
        int16_t buf;
        if ( WtRandom::getrandom( (uint8_t*)&buf, 2 ) <= 2 )
        {
            buf = (buf % MAX_WEIGHT);
            uint8_t i;
            for ( i = 0; i < LETTER_COUNT; i++ )
            {
                buf = buf - (LETTER_COUNT - i);
                if ( buf <= 0 )
                {
                    result = letters[i];
                    break;
                }
            }
        }
        return result;
    };
"
	
	
	
	
	comment "
***************************************************************************"
      end

      operation 235159 "get_purely_random_letter"
	class_operation cpp_inline private explicit_return_type "char"
	nparams 1
	  param in name "" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        char result = 0;
        uint8_t buf;
        if ( WtRandom::getrandom( &buf, 1 ) <= 1 )
        {
            result = (char)((uint8_t)'a' + (buf % ((uint8_t)'z' - (uint8_t)'a') ) );
        }
        return result;
    };
"
	
	
	
	
	comment "
***************************************************************************"
      end

      operation 235287 "getrandom"
	class_operation cpp_inline public explicit_return_type "ssize_t"
	nparams 2
	  param inout name "buf" explicit_type "uint8_t"
	  param in name "read" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        struct timespec time;

        clock_gettime(CLOCK_MONOTONIC, &time);
        srand( time.tv_nsec );
        for ( size_t i=0; i<read; i++ )
            buf[i] = rand();
        return read;
    };
"
	
	
	
	
	comment "this wrapper may solve some issues on some systems...
***************************************************************************"
      end
    end

    class 153751 "WtDrawingPolicySdl"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 163095 // <generalisation>
	relation 163095 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 163095 // <generalisation>
	  b parent class_ref 146455 // WtDrawingPolicyIf
      end

      attribute 158359 "TEXT_FONT_SIZE"
	class_attribute const_attribute private explicit_type "uint8_t"
	init_value "=  12"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 158487 "GRID_FONT_SIZE"
	class_attribute const_attribute private explicit_type "uint8_t"
	init_value "=  37"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 158615 "GRID_OFFSET_X"
	class_attribute const_attribute private explicit_type "uint8_t"
	init_value "=  78"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 158743 "GRID_OFFSET_Y"
	class_attribute const_attribute private explicit_type "uint8_t"
	init_value "=  127-GRID_FONT_SIZE"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 153879 "SDL_TextureCache"
	visibility package stereotype "typedef" explicit_base_type "std::map<std::string, SDL_Texture*>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 235415 "WtDrawingPolicySdl"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        m_window( 0 ),
        m_renderer( 0 ),
        m_theme(\"default\")
    {
        if (SDL_Init(SDL_INIT_VIDEO)) {
            std::cerr << \"Failed to initialize SDL: \" << SDL_GetError() << std::endl;
            exit(-1);
        }
        if (SDL_CreateWindowAndRenderer(SDL_WIDTH, SDL_HEIGHT, SDL_WINDOW_SHOWN | SDL_WINDOW_INPUT_FOCUS, &m_window, &m_renderer)) {
            std::cerr << \"Failed to create window and renderer: \" << SDL_GetError() << std::endl;
            exit(-1);
        }

        SDL_RenderSetLogicalSize(m_renderer, SDL_WIDTH, SDL_HEIGHT);
        SDL_SetRenderDrawColor(m_renderer, 0, 0, 0, 255);
        SDL_SetRenderDrawBlendMode(m_renderer, SDL_BLENDMODE_BLEND);
        /*
        TTF_Init();
        m_font = TTF_OpenFont(\"assets/DejaVuSansMono.ttf\", 30);
        */
        set_bg(\"bg.bmp\");

        m_grid_font = new WtSdlFont( \"grid\", GRID_FONT_SIZE, GRID_FONT_SIZE, \"grid_font.bmp\", m_theme, m_renderer );
        m_grid_font_inverse = new WtSdlFont( \"grid_inverse\", GRID_FONT_SIZE, GRID_FONT_SIZE, \"grid_font_inverse.bmp\", m_theme, m_renderer );
        m_text_font = new WtSdlFont( \"text\", TEXT_FONT_SIZE, TEXT_FONT_SIZE*2, \"text_font.bmp\", m_theme, m_renderer );

    };
"
	
	
	
	
	comment " policy use only"
      end

      operation 235543 "~WtDrawingPolicySdl"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
        delete m_grid_font;
        delete m_text_font;

        clear_texture_cache();

        SDL_DestroyRenderer(m_renderer);
        SDL_DestroyWindow(m_window);
        SDL_Quit();
    };
"
	
	
	
	
      end

      operation 235671 "clr"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        // clear canvas and init with background image
        SDL_RenderClear(m_renderer);

        // draw bg
        draw_image( WtCoord( 0, 0 ),
                    WtDim( SDL_WIDTH, SDL_HEIGHT ),
                    m_bg_img_path );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 235799 "set_theme"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        // todo base class themeable
        m_grid_font->set_theme( name, m_renderer );
        m_text_font->set_theme( name, m_renderer );
        m_theme = name;
        // TODO check if available and if not keep old
        
        clear_texture_cache();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 235927 "draw_at_grid"
	cpp_inline public explicit_return_type "void"
	nparams 5
	  param in name "row" explicit_type "uint8_t"
	  param in name "column" explicit_type "uint8_t"
	  param in name "horizontal" explicit_type "bool"
	  param in name "text" explicit_type "std::string"
	  param in name "font" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        for ( size_t i = 0; i < text.size(); i++ )
        {
            if ( horizontal )
                put_cell_custom( (column+i)%WtBoard::col_count,
                                 row,
                                 text[i], 
                                 ( font == \"grid_inverse\" ? m_grid_font_inverse : m_grid_font ) );
            else
                put_cell_custom( column,
                                 (row-i)%WtBoard::row_count, 
                                 text[(text.length()-1)-i], 
                                 ( font == \"grid_inverse\" ? m_grid_font_inverse : m_grid_font ) );
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 236055 "draw_board"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "board" type class_ref 146711 // WtBoard
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        for( uint8_t i=0 ; i < WtBoard::row_count; i++ )
            for( uint8_t j=0; j < WtBoard::col_count; j++ )
            {
                char cell = board.get_cell( i, j );
                if ( cell != '\\0' )
                    put_cell( j, ((WtBoard::row_count-i)), cell );
            }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 236183 "draw_active_letter"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "active" type class_ref 145815 // WtLetter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        put_cell( active.current_column(), 
                  WtBoard::row_count - active.current_row(), 
                  active.current_value() );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 236311 "update"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        SDL_RenderPresent(m_renderer);
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 236439 "set_bg"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "bg_img" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_bg_img_path = bg_img;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 236567 "draw_image"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "pos" type class_ref 146839 // WtCoord
	  param in name "size" type class_ref 146583 // WtDim
	  param in name "fname" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, const ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SDL_Texture*  button_img = get_texture( fname );
        SDL_Rect rect;
        rect.x = pos.x;
        rect.y = pos.y;
        rect.w = size.w;
        rect.h = size.h;
        SDL_RenderCopy(m_renderer, button_img, NULL, &rect);
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 236695 "draw_text"
	cpp_inline protected explicit_return_type "void"
	nparams 2
	  param in name "pos" type class_ref 146839 // WtCoord
	  param in name "text" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        puts_fb( pos.x, pos.y, text.c_str(), m_text_font );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 236823 "get_font_size"
	cpp_inline protected return_type class_ref 146583 // WtDim
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return WtDim( m_text_font->width(), m_text_font->height() );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 236951 "WtDrawingPolicySdl"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 153751 // WtDrawingPolicySdl
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 237079 "operator ="
	private return_type class_ref 153751 // WtDrawingPolicySdl
	nparams 1
	  param in name "" type class_ref 153751 // WtDrawingPolicySdl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 237207 "puts_fb"
	cpp_inline private explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "size_t"
	  param in name "y" explicit_type "size_t"
	  param in name "str" explicit_type "char"
	  param inout name "font" type class_ref 154007 // WtSdlFont
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        if ( ( NULL != str ) && ( NULL != font ) )
        {
            // loop through all characters in the text string
            size_t l = strlen(str);
            size_t x_i = 0;
            WtCoord pos( x, y );
            for (size_t i = 0; i < l; i++) {
                pos.x = x+x_i*font->width();
                if (str[i] == '\\n')
                {
                    x_i = 0;
                    pos.x = x;
                    pos.y += font->height()+font->height()/2;
                }
                else
                {
                    font->write( pos, str[i], m_renderer );
                    x_i++;
                }
            }
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 237335 "put_cell_custom"
	cpp_inline private explicit_return_type "void"
	nparams 4
	  param in name "col" explicit_type "size_t"
	  param in name "row" explicit_type "size_t"
	  param in name "ch" explicit_type "char"
	  param inout name "font" type class_ref 154007 // WtSdlFont
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        size_t x = (col*font->width())+col+GRID_OFFSET_X;
        size_t y = ((row*font->height())+row)+GRID_OFFSET_Y;

        font->write( WtCoord(x, y), ch, m_renderer );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 237463 "put_cell"
	cpp_inline private explicit_return_type "void"
	nparams 3
	  param in name "col" explicit_type "size_t"
	  param in name "row" explicit_type "size_t"
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        put_cell_custom( col, row, ch, m_grid_font );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 237591 "get_texture"
	cpp_inline private explicit_return_type "SDL_Texture"
	nparams 1
	  param in name "fname" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        SDL_Texture* tex = NULL;
        SDL_TextureCache::const_iterator it = m_texture_cache.find(fname);
        if ( it != m_texture_cache.end() )
        {
            // load from cache
            tex = (*it).second;
        }
        else
        {
            // load from file
            // insert into cache
            if ( fname.empty() )
            {
                tex = SDL_CreateTexture( m_renderer,
                                         SDL_PIXELFORMAT_RGBA8888, 
                                         SDL_TEXTUREACCESS_TARGET, 
                                         1, 1 );
                SDL_SetRenderTarget( m_renderer, tex );
                SDL_SetRenderDrawBlendMode( m_renderer, SDL_BLENDMODE_NONE );
                SDL_SetRenderDrawColor( m_renderer, 255, 0, 255, 0 );
                SDL_RenderFillRect( m_renderer, NULL );
                SDL_SetRenderTarget( m_renderer, NULL );

                m_texture_cache[fname] = tex;
            }
            else
            {
                std::cout << \"load from file.. \" << fname << std::endl;
                m_texture_cache[fname] = WtSdlUtils::loadAssetToTexture( m_renderer, fname, m_theme );

                tex = m_texture_cache[fname];
            }
        }
        return tex;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 237719 "clear_texture_cache"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        SDL_TextureCache::iterator it;
        for ( it = m_texture_cache.begin(); it != m_texture_cache.end(); it++ )
        {
            if ( NULL != it->second ) {
                SDL_DestroyTexture( it->second );
                it->second = NULL;
            }
        }
        m_texture_cache.clear();
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 158871 "m_window"
	private explicit_type "SDL_Window"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 158999 "m_renderer"
	private explicit_type "SDL_Renderer"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 159127 "m_bg_img_path"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "TTF_Font*     m_font;
"
      end

      attribute 159255 "m_theme"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 163223 // m_grid_font (<unidirectional association>)
	relation 163223 --->
	  a role_name "m_grid_font" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 163223 // m_grid_font (<unidirectional association>)
	  b parent class_ref 154007 // WtSdlFont
      end

      classrelation 163351 // m_grid_font_inverse (<unidirectional association>)
	relation 163351 --->
	  a role_name "m_grid_font_inverse" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 163351 // m_grid_font_inverse (<unidirectional association>)
	  b parent class_ref 154007 // WtSdlFont
      end

      classrelation 163479 // m_text_font (<unidirectional association>)
	relation 163479 --->
	  a role_name "m_text_font" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 163479 // m_text_font (<unidirectional association>)
	  b parent class_ref 154007 // WtSdlFont
      end

      classrelation 163607 // m_texture_cache (<directional composition>)
	relation 163607 *-->
	  a role_name "m_texture_cache" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 163607 // m_texture_cache (<directional composition>)
	  b parent class_ref 153879 // SDL_TextureCache
      end
    end

    class 154007 "WtSdlFont"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 237847 "WtSdlFont"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        m_name(\"\"),
        m_font_w(0),
        m_font_h(0),
        m_font_data()
    {
    };
"
	
	
	
	
      end

      operation 237975 "WtSdlFont"
	cpp_inline public explicit_return_type ""
	nparams 6
	  param in name "name" explicit_type "std::string"
	  param in name "w" explicit_type "size_t"
	  param in name "h" explicit_type "size_t"
	  param in name "filename" explicit_type "std::string"
	  param in name "theme" explicit_type "std::string"
	  param inout name "renderer" explicit_type "SDL_Renderer"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} * ${p5}${v5}${)}${volatile}${throw}${abstract} :
        m_name( name ),
        m_font_w( w ),
        m_font_h( h ),
        m_fname( filename )
    {
        load_font_data( filename, theme, renderer );
    };
"
	
	
	
	
      end

      operation 238103 "~WtSdlFont"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
        for(size_t i = 0; i < m_font_data.size(); i++)
            SDL_DestroyTexture(m_font_data[i]);
    };
"
	
	
	
	
      end

      operation 238231 "load_font_data"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "filename" explicit_type "std::string"
	  param in name "theme" explicit_type "std::string"
	  param inout name "renderer" explicit_type "SDL_Renderer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        std::cout << \"load font data = \"<<filename<<std::endl;
        if ( m_font_data.size() > 0 )
        {
            for(size_t i = 0; i < m_font_data.size(); i++)
                SDL_DestroyTexture( m_font_data[i] );
            m_font_data.clear();
        }

        SDL_Texture* font_complete = WtSdlUtils::loadAssetToTexture( renderer, filename, theme );
        // fonts are organized by ascii code...
        for(char i = ' '; i < '~'; i++ )
        {
            m_font_data.push_back( get_letter_texture( font_complete, i, renderer ) );
        }
        SDL_DestroyTexture(font_complete);
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 238359 "set_theme"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param inout name "renderer" explicit_type "SDL_Renderer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        load_font_data( m_fname, name, renderer );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 238487 "width"
	cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_font_w;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 238615 "height"
	cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_font_w;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 238743 "write"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "pos" type class_ref 146839 // WtCoord
	  param in name "ch" explicit_type "char"
	  param inout name "renderer" explicit_type "SDL_Renderer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SDL_Rect small;
        small.x = pos.x;
        small.y = pos.y;
        small.w = m_font_w;
        small.h = m_font_h;

        SDL_RenderCopy(renderer, m_font_data[(ch - 0x20)], NULL, &small );        
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 238871 "GetAreaTexture"
	cpp_inline private explicit_return_type "SDL_Texture"
	nparams 3
	  param in name "rect" explicit_type "SDL_Rect"
	  param inout name "renderer" explicit_type "SDL_Renderer"
	  param inout name "source" explicit_type "SDL_Texture"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SDL_Texture* result = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_RGBA8888, SDL_TEXTUREACCESS_TARGET, rect.w, rect.h);
        SDL_SetTextureBlendMode(result, SDL_BLENDMODE_BLEND);
        SDL_SetRenderTarget(renderer, result);
        SDL_SetRenderDrawColor(renderer, 128, 128, 128, 0);
//TODO font color        SDL_SetTextureColorMod(result, 0, 255, 255 );
        SDL_RenderClear(renderer);
        SDL_RenderCopy(renderer, source, &rect, NULL);
        // the folowing line should reset the target to default(the screen)
        SDL_SetRenderTarget(renderer, NULL);

        return result;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 238999 "get_letter_texture"
	cpp_inline private explicit_return_type "SDL_Texture"
	nparams 3
	  param inout name "t_letters" explicit_type "SDL_Texture"
	  param in name "letter" explicit_type "char"
	  param inout name "renderer" explicit_type "SDL_Renderer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SDL_Rect letter_rect;
        letter_rect.x = (letter - 0x20) * m_font_w;
        letter_rect.y = 0;
        letter_rect.w = m_font_w;
        letter_rect.h = m_font_h;
        return GetAreaTexture( letter_rect, renderer, t_letters );
    };
"
	
	
	
	
	comment "
***********************"
      end

      attribute 159383 "m_name"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 159511 "m_font_w"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 159639 "m_font_h"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 159767 "m_fname"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 159895 "m_font_data"
	private explicit_type "SDL_Texture*"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 154135 "WtInputPolicySdl"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 163735 // <generalisation>
	relation 163735 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 163735 // <generalisation>
	  b parent class_ref 146967 // WtInputPolicyIf
      end

      operation 239127 "WtInputPolicySdl"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 239255 "~WtInputPolicySdl"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 239383 "read_input"
	cpp_inline protected return_type class_ref 147095 // WtInputEvent
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        WtInputEvent event;

        SDL_Event sdl_event;
        event.call_again = SDL_PollEvent(&sdl_event);
        if (event.call_again)
        {
            switch (sdl_event.type)
            {
                case SDL_QUIT:
                    event.is_key_event = true;
                    event.key = wt_control_QUIT;
                    break;
                case SDL_KEYDOWN:
                    event.is_key_event = true;
                    if ('a'==sdl_event.key.keysym.sym) event.key = wt_control_LEFT;
                    if ('d'==sdl_event.key.keysym.sym) event.key = wt_control_RIGHT;
                    if ('s'==sdl_event.key.keysym.sym) event.key = wt_control_DROP;
                    if ('p'==sdl_event.key.keysym.sym) event.key = wt_control_PAUSE;
                    if ('q'==sdl_event.key.keysym.sym) event.key = wt_control_QUIT;
                    if (SDLK_AC_BACK == sdl_event.key.keysym.sym) event.key = wt_control_QUIT;
                    break;

                case SDL_FINGERDOWN:
                    event.is_key_event = false;
                    event.is_press_event = true;
                    event.is_motion_event = false;
                    event.pos.x = sdl_event.tfinger.x;
                    event.pos.y = sdl_event.tfinger.y;
                    break;
                case SDL_FINGERMOTION:
                    event.is_key_event = false;
                    event.is_motion_event = true;
                    event.is_press_event = false;
                    event.pos.x = sdl_event.tfinger.x;
                    event.pos.y = sdl_event.tfinger.y;
                    event.d_pos.x = sdl_event.tfinger.dx;
                    event.d_pos.y = sdl_event.tfinger.dy;
                    break;
                case SDL_FINGERUP:
                    event.is_key_event = false;
                    event.is_press_event = false;
                    event.is_motion_event = false;
                    event.pos.x = sdl_event.tfinger.x;
                    event.pos.y = sdl_event.tfinger.y;
                    break;

                case SDL_MOUSEBUTTONDOWN:
                    event.is_key_event = false;
                    event.is_press_event = true;
                    event.is_motion_event = false;
                    event.pos.x = sdl_event.button.x;
                    event.pos.y = sdl_event.button.y;
                    break;
                case SDL_MOUSEMOTION:
                    event.is_key_event = false;
                    event.is_motion_event = true;
                    event.is_press_event = false;
                    event.pos.x = sdl_event.motion.x;
                    event.pos.y = sdl_event.motion.y;
                    event.d_pos.x = sdl_event.motion.xrel;
                    event.d_pos.y = sdl_event.motion.yrel;
                    break;
                case SDL_MOUSEBUTTONUP:
                    event.is_key_event = false;
                    event.is_press_event = false;
                    event.is_motion_event = false;
                    event.pos.x = sdl_event.button.x;
                    event.pos.y = sdl_event.button.y;
                    break;                    



                default:
                    /*SDL_PumpEvents();
                    SDL_FlushEvent( SDL_FINGERDOWN );
                    SDL_FlushEvent( SDL_FINGERUP );
                    SDL_FlushEvent( SDL_FINGERMOTION );*/
                    break;
            }
        }
        return event;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 239511 "get_key_map"
	cpp_inline protected explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return std::string(\"a - LEFT\\nd - RIGHT\\ns - DROP\\np - PAUSE\\nq - QUIT\\n\");
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 239639 "WtInputPolicySdl"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 154135 // WtInputPolicySdl
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 239767 "operator ="
	private return_type class_ref 154135 // WtInputPolicySdl
	nparams 1
	  param in name "" type class_ref 154135 // WtInputPolicySdl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end
    end

    class 154263 "WtSdlUtils"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 239895 "loadAssetToTexture"
	class_operation cpp_inline public explicit_return_type "SDL_Texture"
	nparams 3
	  param inout name "renderer" explicit_type "SDL_Renderer"
	  param in name "fname" explicit_type "std::string"
	  param in name "theme" explicit_type "std::string"
	    defaultvalue "\"default\" "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SDL_Texture* result_texture = NULL;
        std::string path = std::string(SDL_ASSETS).append(theme).append(\"/\").append(fname);
        SDL_Surface* surface = SDL_LoadBMP(path.c_str());
        if (surface != 0)
        {
            result_texture = SDL_CreateTextureFromSurface(renderer, surface);
            SDL_FreeSurface(surface);
        }
        else
        {
            std::cout<<\"could not load \"<<path<<std::endl;
            exit(-1);
        }
        return result_texture;
    };
"
	
	
	
	
	comment "
***********************"
      end
    end

    class 154391 "WtStorageCtr"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      class 154519 "_FileHeader"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 160023 "magic"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 154647 "_FileData"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 163863 // settings (<directional composition>)
	  relation 163863 *-->
	    a role_name "settings" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 163863 // settings (<directional composition>)
	    b parent class_ref 154775 // WtSettings
	end

	classrelation 163991 // highscores (<directional composition>)
	  relation 163991 *-->
	    a role_name "highscores" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 163991 // highscores (<directional composition>)
	    b parent class_ref 149527 // WtHighscores
	end
      end

      class 154903 "_PersistentFileStructure"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 164119 // header (<directional composition>)
	  relation 164119 *-->
	    a role_name "header" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 164119 // header (<directional composition>)
	    b parent class_ref 154519 // _FileHeader
	end

	classrelation 164247 // data (<directional composition>)
	  relation 164247 *-->
	    a role_name "data" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 164247 // data (<directional composition>)
	    b parent class_ref 154647 // _FileData
	end
      end

      class 155031 "SimpleFileCache"
	visibility package stereotype "typedef" explicit_base_type "std::map< std::string, std::vector<uint8_t> >"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      attribute 160151 "m_header_magic"
	class_attribute const_attribute private explicit_type "uint32_t"
	init_value "=  0x0001ADDE"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " least significant word is fixed magic and most sig. word
 may represent file structure
"
      end

      attribute 160279 "m_fname"
	class_attribute const_attribute private explicit_type "char"
	init_value "=  \"wordtris.dat\""
	cpp_constexpr cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 240535 "instance"
	class_operation cpp_inline public return_type class_ref 154391 // WtStorageCtr
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static WtStorageCtr _instance;
        return _instance;
    };
"
	
	
	
	
	comment " singleton definition"
      end

      operation 240663 "~WtStorageCtr"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 240791 "WtStorageCtr"
	cpp_inline private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} {
        m_storage_copy.header.magic = m_header_magic;
        m_storage_copy.data.settings = WtSettings();
        m_storage_copy.data.highscores.clear();

        char cwd_buf[512];
        const char* cwd;
#ifndef __ANDROID__
        std::cout << \"cwd = \"<<getcwd(cwd_buf, 512)<<std::endl;
        cwd = cwd_buf;
        std::cout << \"cwd = \" << std::string(cwd) << std::endl;
#else
        m_assetManager = getAssetManager();
        cwd = SDL_AndroidGetInternalStoragePath();
        std::cout << \"a cwd = \" << cwd << std::endl; 
        __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, \"%s\", cwd );
#endif
        m_cwd = std::string( cwd );
    };
"
	
	
	
	
      end

      operation 240919 "WtStorageCtr"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 154391 // WtStorageCtr
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 241047 "operator ="
	private return_type class_ref 154391 // WtStorageCtr
	nparams 1
	  param in name "" type class_ref 154391 // WtStorageCtr
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 241175 "store_settings"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "settings" type class_ref 154775 // WtSettings
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_storage_copy.data.settings = settings;

        write_to_file();
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 241303 "store_highscores"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "scores" type class_ref 149527 // WtHighscores
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_storage_copy.data.highscores = scores;

        if ( ! write_to_file() )
        {
            std::cout << \"write failed\" << std::endl;
        }
        else
            std::cout << \"write success\" << std::endl;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 241431 "load"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        bool read_successful = read_from_file();


        std::cout << \"read was \" << (read_successful ? \"successful\" : \"not successful\") << std::endl;

        if ( !read_successful )
        {
            //load default
        }

        std::cout << \"highscores.size() == \" << m_storage_copy.data.highscores.size() << std::endl;
        std::cout << \"settings.language == \" << m_storage_copy.data.settings.language << std::endl;
        std::cout << \"settings.game mode == \" << m_storage_copy.data.settings.game_mode << std::endl;
        std::cout << \"settings.diff == \" << m_storage_copy.data.settings.difficulty << std::endl;
        std::cout << \"settings.active_theme == \" << m_storage_copy.data.settings.active_theme << std::endl;
        // distribute
        //
        return read_successful;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 241559 "get_settings"
	cpp_inline public return_type class_ref 154775 // WtSettings
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_storage_copy.data.settings;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 241687 "get_scores"
	cpp_inline public return_type class_ref 149527 // WtHighscores
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_storage_copy.data.highscores;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 241815 "get_asset_file_buf"
	cpp_inline public explicit_return_type "std::vector<uint8_t>"
	nparams 1
	  param in name "fname" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        SimpleFileCache::iterator it = m_asset_cache.find(fname);
        if ( it != m_asset_cache.end() )
        {
            // load from cache
            return (*it).second;
        }
        else
        {
            std::cout << \"read from assets folder: \" << fname << std::endl;
            internal_load_from_assets( fname, m_asset_cache[fname] );
            return m_asset_cache[fname];
        }
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 241943 "write_to_file"
	cpp_inline private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        bool success = false;

        std::string fname = m_cwd;
        fname.append( \"/\" );
        fname.append( m_fname );

#ifdef __ANDROID__
        __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, \"write to: %s\", fname.c_str() );
#endif
        std::ofstream output_file( fname, std::ios::binary );
        if ( output_file.is_open() )
        {
            m_storage_copy.header.magic = m_header_magic;

            output_file.write( (char*)&m_storage_copy.header, sizeof(m_storage_copy.header));

            m_storage_copy.data.settings.write( output_file );
            for(size_t idx = 0; idx < m_storage_copy.data.highscores.size(); idx++ )
            {
                m_storage_copy.data.highscores[idx].write( output_file );
            }

            output_file.close();

            success = true;
        }

        return success;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 242071 "read_from_file"
	cpp_inline private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        bool success = false;

        std::string fname = m_cwd;
        fname.append( \"/\" );
        fname.append( m_fname );

#ifdef __ANDROID__
        __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, \"read from: %s\", fname.c_str() );
#endif
        std::ifstream input_file( fname, std::ios::binary );
        if ( input_file.is_open() )
        {
            input_file.read( (char*)&m_storage_copy.header, sizeof(m_storage_copy.header) );

            //if ( (! input_file.eof()) && (!input_file.fail()) ) in case latter wont work
            if ( input_file.gcount() == sizeof(m_storage_copy.header) )
            {
                // check binary compatibility
                if ( m_storage_copy.header.magic == m_header_magic )
                {
                    std::cout << \"read: header matches\\n\";

                    m_storage_copy.data.settings.read( input_file );

                    m_storage_copy.data.highscores.clear();
                    while( !input_file.eof() )
                    {
                        WtScoreEntry tmp;
                        if ( tmp.read( input_file ) )
                            m_storage_copy.data.highscores.push_back( tmp );
                    }

                    // check read size
                    // todo..
                    {
                        success = true;
                    }
                }
            }
        }

        return success;
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 242199 "internal_load_from_assets"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param in name "fname" explicit_type "std::string"
	  param inout name "buffer" explicit_type "std::vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        // Open your file
        AAsset* file = AAssetManager_open(m_assetManager, fname.c_str(), AASSET_MODE_BUFFER);

        // Get the file length
        size_t fileLength = AAsset_getLength(file);

        // Allocate memory to read your file
        buffer.resize(fileLength+1);

        // Read your file
        AAsset_read(file, buffer.data(), fileLength);
        // For safety you can add a 0 terminating character at the end of your file ...
        buffer[fileLength] = '\\0';
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 242327 "getAssetManager"
	cpp_inline private explicit_return_type "AAssetManager"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        JNIEnv* env = (JNIEnv*)SDL_AndroidGetJNIEnv();

        jobject activity = (jobject)SDL_AndroidGetActivity();

        jclass activity_class = env->GetObjectClass(activity);

        jmethodID activity_class_getAssets = env->GetMethodID(activity_class, \"getAssets\", \"()Landroid/content/res/AssetManager;\");
        jobject asset_manager = env->CallObjectMethod(activity, activity_class_getAssets); // activity.getAssets();
        _global_asset_manager = env->NewGlobalRef(asset_manager);

        return AAssetManager_fromJava(env, _global_asset_manager);
    };
"
	
	
	
	
      end

      classrelation 164375 // m_storage_copy (<directional composition>)
	relation 164375 *-->
	  a role_name "m_storage_copy" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 164375 // m_storage_copy (<directional composition>)
	  b parent class_ref 154903 // _PersistentFileStructure
      end

      attribute 160407 "m_cwd"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 164503 // m_asset_cache (<directional composition>)
	relation 164503 *-->
	  a role_name "m_asset_cache" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 164503 // m_asset_cache (<directional composition>)
	  b parent class_ref 155031 // SimpleFileCache
      end

      attribute 160535 "m_assetManager"
	private explicit_type "AAssetManager"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 160663 "_global_asset_manager"
	private explicit_type "jobject"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 154775 "WtSettings"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      operation 246295 "WtSettings"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :
        language( \"en\" ),
        game_mode( \"\" ),
        difficulty( wt_difficulty_EASY ),
        active_theme( \"default\" )
    {
    };
"
	
	
	
	
      end

      operation 246423 "~WtSettings"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      attribute 163607 "language"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 163735 "game_mode"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 165783 // difficulty (<directional composition>)
	relation 165783 *-->
	  a role_name "difficulty" public
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 165783 // difficulty (<directional composition>)
	  b parent class_ref 149399 // wt_difficulty
      end

      attribute 163863 "active_theme"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 246551 "write"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "of" explicit_type "std::ofstream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        const char* str = language.c_str();
        of.write( str, strlen(str)+1 );// incl. NULL

        str = game_mode.c_str();
        of.write( str, strlen(str)+1 );// incl. NULL

        uint8_t diff = difficulty;
        of.write( (char*)&diff, 1 );

        str = active_theme.c_str();
        of.write( str, strlen(str)+1 );// incl. NULL
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 246679 "read"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "inf" explicit_type "std::ifstream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        char input[0xFF];
        inf.getline( input, 0xFF, '\\0' );
        language = std::string(input);

        inf.getline( input, 0xFF, '\\0' );
        game_mode = std::string(input);

        uint8_t diff;
        inf.read( (char*)&diff, 1 );
        difficulty = (wt_difficulty)diff;

        inf.getline( input, 0xFF, '\\0' );
        active_theme= std::string(input);
    };
"
	
	
	
	
	comment "
***********************"
      end
    end

    class 155415 "wt_mode_difficulty_tag"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 161431 "wt_difficulty_EASY"
	public type class_ref 155415 // wt_mode_difficulty_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 161559 "wt_difficulty_MEDIUM"
	public type class_ref 155415 // wt_mode_difficulty_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 161687 "wt_difficulty_HARD"
	public type class_ref 155415 // wt_mode_difficulty_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 155543 "wt_controls_tag"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 161815 "wt_control_DROP"
	public type class_ref 155543 // wt_controls_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 161943 "wt_control_LEFT"
	public type class_ref 155543 // wt_controls_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 162071 "wt_control_RIGHT"
	public type class_ref 155543 // wt_controls_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 162199 "wt_control_QUIT"
	public type class_ref 155543 // wt_controls_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 162327 "wt_control_PAUSE"
	public type class_ref 155543 // wt_controls_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 162455 "wt_control_INVALID"
	public type class_ref 155543 // wt_controls_tag
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 155671 "WtScoreEntry"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************"
      attribute 163991 "player"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 164119 "game_mode"
	public explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 164247 "score"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 246807 "write"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "of" explicit_type "std::ofstream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        const char* str = player.c_str();
        of.write( str, strlen(str)+1 ); // incl. NULL

        str = game_mode.c_str();
        of.write( str, strlen(str)+1 );// incl. NULL

        of.write( (char*)&score, sizeof(score) );
    };
"
	
	
	
	
	comment "
***********************"
      end

      operation 246935 "read"
	cpp_inline public explicit_return_type "bool"
	nparams 1
	  param inout name "inf" explicit_type "std::ifstream"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        char input[0xFF];

        if (inf.eof()) return false;

        inf.getline( input, 0xFF, '\\0' );
        player = std::string( input );

        if (inf.eof()) return false;

        inf.getline( input, 0xFF, '\\0' );
        game_mode = std::string( input );

        if (inf.eof()) return false;

        inf.read( (char*)&score, sizeof(score) );

        return true;
    };
"
	
	
	
	
	comment "
***********************"
      end
    end

    class 155799 "WtWord"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
***********************************"
      operation 247063 "WtWord"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "w" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} ${p0}${v0}${)}${volatile}${throw}${abstract} :
        m_word( w ),
        m_dea( w )
    {
      //  std::cout << \"=====\" <<std::endl << \"WtWord = \" << w << std::endl;
       // m_dea.print();
    };
"
	
	
	
	
      end

      operation 247191 "~WtWord"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
    };
"
	
	
	
	
      end

      operation 247319 "search_update"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "symbol" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        m_dea.process_symbol( symbol );
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 247447 "search_found"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_dea.is_current_state_accepting();
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 247575 "search_reset"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        m_dea.init();
    };
"
	
	
	
	
	comment "
***********************************"
      end

      operation 247703 "as_string"
	cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return m_word;
    };
"
	
	
	
	
	comment "
***********************************"
      end

      attribute 164375 "m_word"
	private explicit_type "std::string"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 166039 // m_dea (<directional composition>)
	relation 166039 *-->
	  a role_name "m_dea" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 166039 // m_dea (<directional composition>)
	  b parent class_ref 145687 // TDea
      end
    end

    classdiagram 136087 "menu"
      classdiagramsettings member_max_width 0 end
      size D
    end

    classdiagram 136215 "input"
      classdiagramsettings member_max_width 0 end
      size C
    end

    classdiagram 136343 "gamectr"
      classdiagramsettings member_max_width 0 end
      size E
    end

    classdiagram 136471 "drawing"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 136599 "storage"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 136727 "l10n"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 136855 "wordlist"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 136983 "gamemode"
      classdiagramsettings member_max_width 0 end
      size C
    end

    classdiagram 137111 "random"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 137239 "sdl input"
      classdiagramsettings member_max_width 0 end
      size A4
    end

    classdiagram 137367 "sdl drawing"
      classdiagramsettings member_max_width 0 end
      size Legal
    end

    classdiagram 137495 "animation"
      classdiagramsettings member_max_width 0 end
      size A4
    end
  end

  deploymentview 134551 "src"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 139415 "dea"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 145047 // dea_char_type_t
	class_ref 145175 // dea_special_types_t
	class_ref 145303 // dea_input_symbol_t
	class_ref 145431 // TDeaTransition
	class_ref 145559 // TDeaState
	class_ref 145687 // TDea
      end
    end

    artifact 139543 "wt_active_letter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 145815 // WtLetter
      end
    end

    artifact 139671 "wt_animations"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 145943 // WtAnimationStep
	class_ref 146071 // WtGridAnimation
      end
    end

    artifact 139799 "wt_backend_policy_if"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 146455 // WtDrawingPolicyIf
	class_ref 146967 // WtInputPolicyIf
      end
    end

    artifact 139927 "wt_board"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 146711 // WtBoard
      end
    end

    artifact 140055 "wt_button"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 147351 // WtButton
      end
    end

    artifact 140183 "wt_clickable_if"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 147735 // WtClickableIf
      end
    end

    artifact 140311 "wt_drawing"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 148631 // typedef4
	class_ref 148503 // WtDrawing
      end
    end

    artifact 140439 "wt_game_ctr"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 148887 // WtGameCtr
      end
    end

    artifact 140567 "wt_game_mode_abc"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 149911 // WtGameModeAbc
      end
    end

    artifact 140695 "wt_game_mode_ctr"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 150167 // WtGameModeCtr
      end
    end

    artifact 140823 "wt_game_mode_guessing"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 150423 // WtGameModeGuessing
      end
    end

    artifact 140951 "wt_game_mode_if"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 150039 // WtGameModeState
	class_ref 149271 // WtGameModeIf
	class_ref 150295 // WtGameModeDemo
      end
    end

    artifact 141079 "wt_game_mode_tetris"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 150551 // WtGameModeTetris
      end
    end

    artifact 141207 "wt_game_mode_wordtris"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 150679 // WtGameModeWordtris
      end
    end

    artifact 141335 "wt_grid_touch_overlay"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 149783 // WtGridTouchOverlay
      end
    end

    artifact 141463 "wt_horizontal_carousel"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 151447 // WtHorizontalCarousel
      end
    end

    artifact 141591 "wt_input"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 151959 // typedef7
	class_ref 151831 // WtInput
      end
    end

    artifact 141719 "wt_l10n"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 152343 // WtL10n
      end
    end

    artifact 141847 "wt_l10n_translations"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 152599 // WtTranslationTexts
      end
    end

    artifact 141975 "wt_menu_ctr"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 152727 // WtMenuCtr
      end
    end

    artifact 142103 "wt_menu_game_mode_select"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 153239 // WtMenuSelectMode
      end
    end

    artifact 142231 "wt_menu_help"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 153367 // WtMenuHelp
      end
    end

    artifact 142359 "wt_menu_highscores"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 153111 // WtMenuHighscores
      end
    end

    artifact 142487 "wt_menu_if"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 149655 // WtMenuIf
      end
    end

    artifact 142615 "wt_menu_pause"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 152983 // WtMenuPause
      end
    end

    artifact 142743 "wt_menu_settings"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 152855 // WtMenuSettings
      end
    end

    artifact 142871 "wt_player"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 148759 // WtPlayer
      end
    end

    artifact 142999 "wt_random"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 153623 // WtRandom
      end
    end

    artifact 143127 "wt_sdl_drawing"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 153751 // WtDrawingPolicySdl
      end
    end

    artifact 143255 "wt_sdl_font"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 154007 // WtSdlFont
      end
    end

    artifact 143383 "wt_sdl_input"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 154135 // WtInputPolicySdl
      end
    end

    artifact 143511 "wt_sdl_utils"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 154263 // WtSdlUtils
      end
    end

    artifact 143639 "wt_settings_observer_if"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 149015 // WtSettingsChangeObserver
      end
    end

    artifact 143767 "wt_storage"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 154391 // WtStorageCtr
      end
    end

    artifact 143895 "wt_tristate_button"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 153495 // WtTriStateButton
      end
    end

    artifact 144023 "wt_types"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 155415 // wt_mode_difficulty_tag
	class_ref 149399 // wt_difficulty
	class_ref 155543 // wt_controls_tag
	class_ref 149143 // wt_control
	class_ref 146583 // WtDim
	class_ref 146839 // WtCoord
	class_ref 147095 // WtInputEvent
	class_ref 154775 // WtSettings
	class_ref 155671 // WtScoreEntry
	class_ref 149527 // WtHighscores
      end
    end

    artifact 144151 "wt_wordlist"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 155799 // WtWord
	class_ref 150807 // WtWordList
      end
    end

    artifact 144279 "main"
      stereotype "source"
      cpp_src "//
//
//***************************************************************************

int main( int, char** )
{
    if ( ! STORAGE.load() )
    {
        // defaults should be used...
    }

    GAME_CTR.set_pause_menu( MENU_CTR.get_pause_menu() );

    MENU_CTR.listen( &GAME_CTR );

    while( 1 )
    {
        MENU_CTR.show();

        GAME_CTR.run();
    }

    return 0;
}
"
      associated_elems
      end
    end
  end
end
